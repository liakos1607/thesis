"""my_controller_firstslamtry controller."""
from controller import Robot, DistanceSensor, Motor
from controller import Display,GPS,Compass
from controller import Gyro
from controller import PositionSensor
from controller import Accelerometer

import sys
import array
import random

#degree=180*rad/Ï€
from math import cos
from math import sin
from math import *
from random import random
from collections import Iterable
#####cell size=accuracy of sensors=0.01
##length *width=0.485*0.381=0.2m

                #####DJIKSTRA CODE#####
# Python program for Dijkstra's single  
# source shortest path algorithm. The program is  
# for adjacency matrix representation of the graph 
  
# Library for INT_M

thesiis=[]
#list_of_free_c
list_of_obs=[[13, 232], [13, 234], [13, 236], [13, 238], [13, 239], [13, 240], [13, 241], [13, 243], [13, 245], [13, 247], [13, 249], [13, 251], [14, 198], [14, 202], [14, 203], [14, 205], [14, 206], [14, 208], [14, 210], [14, 212], [14, 213], [14, 214], [14, 215], [14, 216], [14, 217], [14, 218], [14, 219], [14, 220], [14, 221], [14, 222], [14, 223], [14, 224], [14, 225], [14, 226], [14, 227], [14, 228], [14, 229], [14, 230], [14, 231], [14, 232], [14, 233], [14, 234], [14, 235], [14, 236], [14, 237], [14, 238], [14, 239], [14, 240], [14, 241], [14, 243], [14, 245], [14, 247], [14, 248], [14, 250], [14, 251], [14, 252], [14, 253], [14, 254], [14, 256], [14, 258], [14, 260], [14, 264], [15, 157], [15, 161], [15, 165], [15, 166], [15, 167], [15, 168], [15, 171], [15, 172], [15, 173], [15, 175], [15, 176], [15, 177], [15, 178], [15, 180], [15, 181], [15, 182], [15, 183], [15, 184], [15, 185], [15, 186], [15, 187], [15, 188], [15, 189], [15, 190], [15, 191], [15, 192], [15, 193], [15, 194], [15, 195], [15, 196], [15, 197], [15, 198], [15, 199], [15, 200], [15, 201], [15, 202], [15, 203], [15, 204], [15, 205], [15, 206], [15, 207], [15, 208], [15, 209], [15, 210], [15, 211], [15, 212], [15, 213], [15, 214], [15, 215], [15, 216], [15, 217], [15, 218], [15, 219], [15, 220], [15, 221], [15, 222], [15, 223], [15, 224], [15, 225], [15, 226], [15, 227], [15, 228], [15, 229], [15, 230], [15, 231], [15, 232], [15, 233], [15, 234], [15, 235], [15, 236], [15, 237], [15, 238], [15, 239], [15, 240], [15, 241], [15, 242], [15, 243], [15, 245], [15, 247], [15, 249], [15, 250], [15, 251], [15, 252], [15, 253], [15, 254], [15, 255], [15, 256], [15, 258], [15, 260], [15, 262], [15, 264], [15, 266], [15, 268], [15, 270], [16, 124], [16, 127], [16, 129], [16, 130], [16, 131], [16, 133], [16, 134], [16, 135], [16, 136], [16, 137], [16, 139], [16, 141], [16, 142], [16, 143], [16, 145], [16, 146], [16, 147], [16, 148], [16, 149], [16, 150], [16, 151], [16, 152], [16, 153], [16, 154], [16, 155], [16, 156], [16, 157], [16, 158], [16, 159], [16, 160], [16, 161], [16, 162], [16, 163], [16, 164], [16, 165], [16, 166], [16, 167], [16, 168], [16, 169], [16, 170], [16, 171], [16, 172], [16, 173], [16, 174], [16, 175], [16, 176], [16, 177], [16, 178], [16, 179], [16, 180], [16, 181], [16, 182], [16, 183], [16, 184], [16, 185], [16, 186], [16, 187], [16, 188], [16, 189], [16, 190], [16, 191], [16, 192], [16, 193], [16, 194], [16, 195], [16, 196], [16, 197], [16, 198], [16, 199], [16, 200], [16, 201], [16, 202], [16, 203], [16, 204], [16, 205], [16, 206], [16, 207], [16, 208], [16, 209], [16, 210], [16, 211], [16, 212], [16, 213], [16, 214], [16, 215], [16, 216], [16, 217], [16, 218], [16, 219], [16, 220], [16, 221], [16, 222], [16, 223], [16, 224], [16, 225], [16, 226], [16, 227], [16, 228], [16, 229], [16, 230], [16, 231], [16, 232], [16, 233], [16, 234], [16, 235], [16, 236], [16, 237], [16, 238], [16, 239], [16, 240], [16, 241], [16, 242], [16, 243], [16, 244], [16, 245], [16, 246], [16, 247], [16, 248], [16, 249], [16, 250], [16, 251], [16, 252], [16, 253], [16, 254], [16, 255], [16, 256], [16, 257], [16, 258], [16, 259], [16, 260], [16, 261], [16, 262], [16, 264], [16, 266], [16, 268], [16, 270], [16, 272], [16, 274], [17, 104], [17, 105], [17, 106], [17, 107], [17, 109], [17, 111], [17, 112], [17, 113], [17, 114], [17, 115], [17, 116], [17, 117], [17, 118], [17, 119], [17, 120], [17, 121], [17, 122], [17, 123], [17, 124], [17, 125], [17, 126], [17, 127], [17, 128], [17, 129], [17, 130], [17, 131], [17, 132], [17, 133], [17, 134], [17, 135], [17, 136], [17, 137], [17, 138], [17, 139], [17, 140], [17, 141], [17, 142], [17, 143], [17, 144], [17, 145], [17, 146], [17, 147], [17, 148], [17, 149], [17, 150], [17, 151], [17, 152], [17, 153], [17, 154], [17, 155], [17, 156], [17, 157], [17, 158], [17, 159], [17, 160], [17, 161], [17, 162], [17, 163], [17, 164], [17, 165], [17, 166], [17, 167], [17, 168], [17, 169], [17, 170], [17, 171], [17, 172], [17, 173], [17, 174], [17, 175], [17, 176], [17, 177], [17, 178], [17, 179], [17, 180], [17, 181], [17, 182], [17, 183], [17, 184], [17, 185], [17, 186], [17, 187], [17, 188], [17, 189], [17, 190], [17, 191], [17, 192], [17, 193], [17, 194], [17, 195], [17, 196], [17, 197], [17, 198], [17, 199], [17, 200], [17, 201], [17, 202], [17, 203], [17, 204], [17, 205], [17, 206], [17, 207], [17, 208], [17, 209], [17, 210], [17, 211], [17, 212], [17, 213], [17, 214], [17, 215], [17, 216], [17, 217], [17, 218], [17, 219], [17, 220], [17, 221], [17, 222], [17, 223], [17, 224], [17, 225], [17, 226], [17, 227], [17, 228], [17, 229], [17, 230], [17, 231], [17, 232], [17, 233], [17, 234], [17, 235], [17, 236], [17, 237], [17, 238], [17, 239], [17, 240], [17, 241], [17, 242], [17, 243], [17, 244], [17, 245], [17, 246], [17, 247], [17, 248], [17, 249], [17, 250], [17, 251], [17, 252], [17, 253], [17, 254], [17, 255], [17, 256], [17, 257], [17, 258], [17, 259], [17, 260], [17, 261], [17, 262], [17, 263], [17, 264], [17, 265], [17, 266], [17, 268], [17, 269], [17, 270], [17, 271], [17, 272], [17, 274], [17, 276], [17, 278], [18, 94], [18, 99], [18, 102], [18, 103], [18, 104], [18, 105], [18, 106], [18, 107], [18, 108], [18, 109], [18, 110], [18, 111], [18, 112], [18, 113], [18, 114], [18, 115], [18, 116], [18, 117], [18, 118], [18, 119], [18, 120], [18, 121], [18, 122], [18, 123], [18, 124], [18, 125], [18, 126], [18, 127], [18, 128], [18, 129], [18, 130], [18, 131], [18, 132], [18, 133], [18, 134], [18, 135], [18, 136], [18, 137], [18, 138], [18, 139], [18, 140], [18, 141], [18, 142], [18, 143], [18, 144], [18, 145], [18, 146], [18, 147], [18, 148], [18, 149], [18, 150], [18, 151], [18, 152], [18, 153], [18, 154], [18, 155], [18, 156], [18, 157], [18, 158], [18, 159], [18, 160], [18, 161], [18, 162], [18, 163], [18, 164], [18, 165], [18, 166], [18, 167], [18, 168], [18, 169], [18, 170], [18, 171], [18, 172], [18, 173], [18, 174], [18, 175], [18, 176], [18, 177], [18, 178], [18, 179], [18, 180], [18, 181], [18, 182], [18, 183], [18, 184], [18, 185], [18, 186], [18, 187], [18, 188], [18, 189], [18, 190], [18, 191], [18, 192], [18, 193], [18, 194], [18, 195], [18, 196], [18, 197], [18, 198], [18, 199], [18, 200], [18, 201], [18, 202], [18, 203], [18, 204], [18, 205], [18, 206], [18, 207], [18, 208], [18, 209], [18, 210], [18, 211], [18, 212], [18, 213], [18, 214], [18, 215], [18, 216], [18, 217], [18, 218], [18, 219], [18, 220], [18, 221], [18, 222], [18, 223], [18, 224], [18, 225], [18, 226], [18, 227], [18, 228], [18, 229], [18, 230], [18, 231], [18, 232], [18, 233], [18, 234], [18, 235], [18, 236], [18, 237], [18, 238], [18, 239], [18, 240], [18, 241], [18, 242], [18, 243], [18, 244], [18, 245], [18, 246], [18, 247], [18, 248], [18, 249], [18, 250], [18, 251], [18, 252], [18, 253], [18, 254], [18, 255], [18, 256], [18, 257], [18, 258], [18, 259], [18, 260], [18, 261], [18, 262], [18, 263], [18, 264], [18, 265], [18, 266], [18, 267], [18, 268], [18, 269], [18, 270], [18, 272], [18, 273], [18, 274], [18, 276], [18, 277], [18, 278], [18, 280], [18, 282], [19, 95], [19, 97], [19, 99], [19, 100], [19, 101], [19, 102], [19, 103], [19, 104], [19, 105], [19, 106], [19, 107], [19, 108], [19, 109], [19, 110], [19, 111], [19, 112], [19, 113], [19, 114], [19, 115], [19, 116], [19, 117], [19, 118], [19, 119], [19, 120], [19, 121], [19, 122], [19, 123], [19, 124], [19, 125], [19, 126], [19, 127], [19, 128], [19, 129], [19, 130], [19, 131], [19, 132], [19, 133], [19, 134], [19, 135], [19, 136], [19, 137], [19, 138], [19, 139], [19, 140], [19, 141], [19, 142], [19, 143], [19, 144], [19, 145], [19, 146], [19, 147], [19, 148], [19, 149], [19, 150], [19, 151], [19, 152], [19, 153], [19, 154], [19, 155], [19, 156], [19, 157], [19, 158], [19, 159], [19, 160], [19, 161], [19, 162], [19, 163], [19, 164], [19, 165], [19, 166], [19, 167], [19, 168], [19, 169], [19, 170], [19, 171], [19, 172], [19, 173], [19, 174], [19, 175], [19, 176], [19, 177], [19, 178], [19, 179], [19, 180], [19, 181], [19, 182], [19, 183], [19, 184], [19, 185], [19, 186], [19, 187], [19, 188], [19, 189], [19, 190], [19, 191], [19, 192], [19, 193], [19, 194], [19, 195], [19, 196], [19, 197], [19, 198], [19, 199], [19, 200], [19, 201], [19, 202], [19, 203], [19, 204], [19, 205], [19, 206], [19, 207], [19, 208], [19, 209], [19, 210], [19, 211], [19, 212], [19, 213], [19, 214], [19, 215], [19, 216], [19, 217], [19, 218], [19, 219], [19, 220], [19, 221], [19, 222], [19, 223], [19, 224], [19, 225], [19, 226], [19, 227], [19, 228], [19, 229], [19, 230], [19, 231], [19, 232], [19, 233], [19, 234], [19, 235], [19, 236], [19, 237], [19, 238], [19, 239], [19, 240], [19, 241], [19, 242], [19, 243], [19, 244], [19, 245], [19, 246], [19, 247], [19, 248], [19, 249], [19, 250], [19, 251], [19, 252], [19, 253], [19, 254], [19, 255], [19, 256], [19, 257], [19, 258], [19, 259], [19, 260], [19, 261], [19, 262], [19, 263], [19, 264], [19, 265], [19, 266], [19, 267], [19, 268], [19, 269], [19, 270], [19, 272], [19, 273], [19, 274], [19, 275], [19, 276], [19, 277], [19, 278], [19, 280], [19, 281], [19, 282], [19, 284], [20, 88], [20, 90], [20, 93], [20, 95], [20, 96], [20, 97], [20, 98], [20, 99], [20, 100], [20, 101], [20, 102], [20, 103], [20, 104], [20, 105], [20, 106], [20, 107], [20, 108], [20, 109], [20, 110], [20, 111], [20, 112], [20, 113], [20, 114], [20, 115], [20, 116], [20, 117], [20, 118], [20, 119], [20, 120], [20, 121], [20, 122], [20, 123], [20, 124], [20, 125], [20, 126], [20, 127], [20, 128], [20, 129], [20, 130], [20, 131], [20, 132], [20, 133], [20, 134], [20, 135], [20, 136], [20, 137], [20, 138], [20, 139], [20, 140], [20, 141], [20, 142], [20, 143], [20, 144], [20, 145], [20, 146], [20, 147], [20, 148], [20, 149], [20, 150], [20, 151], [20, 152], [20, 153], [20, 154], [20, 155], [20, 156], [20, 157], [20, 158], [20, 159], [20, 160], [20, 161], [20, 162], [20, 163], [20, 164], [20, 165], [20, 166], [20, 167], [20, 168], [20, 169], [20, 170], [20, 171], [20, 172], [20, 173], [20, 174], [20, 175], [20, 176], [20, 177], [20, 178], [20, 179], [20, 180], [20, 181], [20, 182], [20, 183], [20, 184], [20, 185], [20, 186], [20, 187], [20, 188], [20, 189], [20, 190], [20, 191], [20, 192], [20, 193], [20, 194], [20, 195], [20, 196], [20, 197], [20, 198], [20, 199], [20, 200], [20, 201], [20, 202], [20, 203], [20, 204], [20, 205], [20, 206], [20, 207], [20, 208], [20, 209], [20, 210], [20, 211], [20, 212], [20, 213], [20, 214], [20, 215], [20, 216], [20, 217], [20, 218], [20, 219], [20, 220], [20, 221], [20, 222], [20, 223], [20, 224], [20, 225], [20, 226], [20, 227], [20, 228], [20, 229], [20, 230], [20, 231], [20, 232], [20, 233], [20, 234], [20, 235], [20, 236], [20, 237], [20, 238], [20, 239], [20, 240], [20, 241], [20, 242], [20, 243], [20, 244], [20, 245], [20, 246], [20, 247], [20, 248], [20, 249], [20, 250], [20, 251], [20, 252], [20, 253], [20, 254], [20, 255], [20, 256], [20, 257], [20, 258], [20, 259], [20, 260], [20, 261], [20, 262], [20, 263], [20, 264], [20, 265], [20, 266], [20, 267], [20, 268], [20, 269], [20, 270], [20, 271], [20, 272], [20, 273], [20, 274], [20, 275], [20, 276], [20, 277], [20, 278], [20, 279], [20, 280], [20, 281], [20, 282], [20, 284], [20, 285], [20, 286], [20, 288], [21, 84], [21, 87], [21, 89], [21, 90], [21, 92], [21, 93], [21, 94], [21, 95], [21, 96], [21, 97], [21, 98], [21, 99], [21, 100], [21, 101], [21, 102], [21, 103], [21, 104], [21, 105], [21, 106], [21, 107], [21, 108], [21, 109], [21, 110], [21, 111], [21, 112], [21, 113], [21, 114], [21, 115], [21, 116], [21, 117], [21, 118], [21, 119], [21, 120], [21, 121], [21, 122], [21, 123], [21, 124], [21, 125], [21, 126], [21, 127], [21, 128], [21, 129], [21, 130], [21, 131], [21, 132], [21, 133], [21, 134], [21, 135], [21, 136], [21, 137], [21, 138], [21, 139], [21, 140], [21, 141], [21, 142], [21, 143], [21, 144], [21, 145], [21, 146], [21, 147], [21, 148], [21, 149], [21, 150], [21, 151], [21, 152], [21, 153], [21, 154], [21, 155], [21, 156], [21, 157], [21, 158], [21, 159], [21, 160], [21, 161], [21, 162], [21, 163], [21, 164], [21, 165], [21, 166], [21, 167], [21, 168], [21, 169], [21, 170], [21, 171], [21, 172], [21, 173], [21, 174], [21, 175], [21, 176], [21, 177], [21, 178], [21, 179], [21, 180], [21, 181], [21, 182], [21, 183], [21, 184], [21, 185], [21, 186], [21, 187], [21, 188], [21, 189], [21, 190], [21, 191], [21, 192], [21, 193], [21, 194], [21, 195], [21, 196], [21, 197], [21, 198], [21, 199], [21, 200], [21, 201], [21, 202], [21, 203], [21, 204], [21, 205], [21, 206], [21, 207], [21, 208], [21, 209], [21, 210], [21, 211], [21, 212], [21, 213], [21, 214], [21, 215], [21, 216], [21, 217], [21, 218], [21, 219], [21, 220], [21, 221], [21, 222], [21, 223], [21, 224], [21, 225], [21, 226], [21, 227], [21, 228], [21, 229], [21, 230], [21, 231], [21, 232], [21, 233], [21, 234], [21, 235], [21, 236], [21, 237], [21, 238], [21, 239], [21, 240], [21, 241], [21, 242], [21, 243], [21, 244], [21, 245], [21, 246], [21, 247], [21, 248], [21, 249], [21, 250], [21, 251], [21, 252], [21, 253], [21, 254], [21, 255], [21, 256], [21, 257], [21, 258], [21, 259], [21, 260], [21, 261], [21, 262], [21, 263], [21, 264], [21, 265], [21, 266], [21, 267], [21, 268], [21, 269], [21, 270], [21, 271], [21, 272], [21, 273], [21, 274], [21, 275], [21, 276], [21, 277], [21, 278], [21, 279], [21, 280], [21, 281], [21, 282], [21, 283], [21, 284], [21, 285], [21, 286], [21, 288], [21, 289], [21, 290], [22, 83], [22, 85], [22, 86], [22, 88], [22, 90], [22, 91], [22, 92], [22, 93], [22, 94], [22, 95], [22, 96], [22, 97], [22, 98], [22, 99], [22, 100], [22, 101], [22, 102], [22, 103], [22, 104], [22, 105], [22, 106], [22, 107], [22, 108], [22, 109], [22, 110], [22, 111], [22, 112], [22, 113], [22, 114], [22, 115], [22, 116], [22, 117], [22, 118], [22, 119], [22, 120], [22, 121], [22, 122], [22, 123], [22, 124], [22, 125], [22, 126], [22, 127], [22, 128], [22, 129], [22, 130], [22, 131], [22, 132], [22, 133], [22, 134], [22, 135], [22, 136], [22, 137], [22, 138], [22, 139], [22, 140], [22, 141], [22, 142], [22, 143], [22, 144], [22, 145], [22, 146], [22, 147], [22, 148], [22, 149], [22, 150], [22, 151], [22, 152], [22, 153], [22, 154], [22, 155], [22, 156], [22, 157], [22, 158], [22, 159], [22, 160], [22, 161], [22, 162], [22, 163], [22, 164], [22, 165], [22, 166], [22, 167], [22, 168], [22, 169], [22, 170], [22, 171], [22, 172], [22, 173], [22, 174], [22, 175], [22, 176], [22, 177], [22, 178], [22, 179], [22, 180], [22, 181], [22, 182], [22, 183], [22, 184], [22, 185], [22, 186], [22, 187], [22, 188], [22, 189], [22, 190], [22, 191], [22, 192], [22, 193], [22, 194], [22, 195], [22, 196], [22, 197], [22, 198], [22, 199], [22, 200], [22, 201], [22, 202], [22, 203], [22, 204], [22, 205], [22, 206], [22, 207], [22, 208], [22, 209], [22, 210], [22, 211], [22, 212], [22, 213], [22, 214], [22, 215], [22, 216], [22, 217], [22, 218], [22, 219], [22, 220], [22, 221], [22, 222], [22, 223], [22, 224], [22, 225], [22, 226], [22, 227], [22, 228], [22, 229], [22, 230], [22, 231], [22, 232], [22, 233], [22, 234], [22, 235], [22, 236], [22, 237], [22, 238], [22, 239], [22, 240], [22, 241], [22, 242], [22, 243], [22, 244], [22, 245], [22, 246], [22, 247], [22, 248], [22, 249], [22, 250], [22, 251], [22, 252], [22, 253], [22, 254], [22, 255], [22, 256], [22, 257], [22, 258], [22, 259], [22, 260], [22, 261], [22, 262], [22, 263], [22, 264], [22, 265], [22, 266], [22, 267], [22, 268], [22, 269], [22, 270], [22, 271], [22, 272], [22, 273], [22, 274], [22, 275], [22, 276], [22, 277], [22, 278], [22, 279], [22, 280], [22, 281], [22, 282], [22, 283], [22, 284], [22, 285], [22, 286], [22, 288], [22, 289], [22, 290], [22, 293], [23, 81], [23, 84], [23, 86], [23, 87], [23, 88], [23, 89], [23, 90], [23, 91], [23, 92], [23, 93], [23, 94], [23, 95], [23, 96], [23, 97], [23, 98], [23, 99], [23, 100], [23, 101], [23, 102], [23, 103], [23, 104], [23, 105], [23, 106], [23, 107], [23, 108], [23, 109], [23, 110], [23, 111], [23, 112], [23, 113], [23, 114], [23, 115], [23, 116], [23, 117], [23, 118], [23, 119], [23, 120], [23, 121], [23, 122], [23, 123], [23, 124], [23, 125], [23, 126], [23, 127], [23, 128], [23, 129], [23, 130], [23, 131], [23, 132], [23, 133], [23, 134], [23, 135], [23, 136], [23, 137], [23, 138], [23, 139], [23, 140], [23, 141], [23, 142], [23, 143], [23, 144], [23, 145], [23, 146], [23, 147], [23, 148], [23, 149], [23, 150], [23, 151], [23, 152], [23, 153], [23, 154], [23, 155], [23, 156], [23, 157], [23, 158], [23, 159], [23, 160], [23, 161], [23, 162], [23, 163], [23, 164], [23, 165], [23, 166], [23, 167], [23, 168], [23, 169], [23, 170], [23, 171], [23, 172], [23, 173], [23, 174], [23, 175], [23, 176], [23, 177], [23, 178], [23, 179], [23, 180], [23, 181], [23, 182], [23, 183], [23, 184], [23, 185], [23, 186], [23, 187], [23, 188], [23, 189], [23, 190], [23, 191], [23, 192], [23, 193], [23, 194], [23, 195], [23, 196], [23, 197], [23, 198], [23, 199], [23, 200], [23, 201], [23, 202], [23, 203], [23, 204], [23, 205], [23, 206], [23, 207], [23, 208], [23, 209], [23, 210], [23, 211], [23, 212], [23, 213], [23, 214], [23, 215], [23, 216], [23, 217], [23, 218], [23, 219], [23, 220], [23, 221], [23, 222], [23, 223], [23, 224], [23, 225], [23, 226], [23, 227], [23, 228], [23, 229], [23, 230], [23, 231], [23, 232], [23, 233], [23, 234], [23, 235], [23, 236], [23, 237], [23, 238], [23, 239], [23, 240], [23, 241], [23, 242], [23, 243], [23, 244], [23, 245], [23, 246], [23, 247], [23, 248], [23, 249], [23, 250], [23, 251], [23, 252], [23, 253], [23, 254], [23, 255], [23, 256], [23, 257], [23, 258], [23, 259], [23, 260], [23, 261], [23, 262], [23, 263], [23, 264], [23, 265], [23, 266], [23, 267], [23, 268], [23, 269], [23, 270], [23, 271], [23, 272], [23, 273], [23, 274], [23, 275], [23, 276], [23, 277], [23, 278], [23, 279], [23, 280], [23, 281], [23, 282], [23, 283], [23, 284], [23, 285], [23, 286], [23, 287], [23, 288], [23, 289], [23, 290], [23, 292], [23, 293], [23, 294], [23, 301], [24, 77], [24, 81], [24, 82], [24, 83], [24, 84], [24, 85], [24, 86], [24, 87], [24, 88], [24, 89], [24, 90], [24, 91], [24, 92], [24, 93], [24, 94], [24, 95], [24, 96], [24, 97], [24, 98], [24, 99], [24, 100], [24, 101], [24, 102], [24, 103], [24, 104], [24, 105], [24, 106], [24, 107], [24, 108], [24, 109], [24, 110], [24, 111], [24, 112], [24, 113], [24, 114], [24, 115], [24, 116], [24, 117], [24, 118], [24, 119], [24, 120], [24, 121], [24, 122], [24, 123], [24, 124], [24, 125], [24, 126], [24, 127], [24, 128], [24, 129], [24, 130], [24, 131], [24, 132], [24, 133], [24, 134], [24, 135], [24, 136], [24, 137], [24, 138], [24, 139], [24, 140], [24, 141], [24, 142], [24, 143], [24, 144], [24, 145], [24, 146], [24, 147], [24, 148], [24, 149], [24, 150], [24, 151], [24, 152], [24, 153], [24, 154], [24, 155], [24, 156], [24, 157], [24, 158], [24, 159], [24, 160], [24, 161], [24, 162], [24, 163], [24, 164], [24, 165], [24, 166], [24, 167], [24, 168], [24, 169], [24, 170], [24, 171], [24, 172], [24, 173], [24, 174], [24, 175], [24, 176], [24, 177], [24, 178], [24, 179], [24, 180], [24, 181], [24, 182], [24, 183], [24, 184], [24, 185], [24, 186], [24, 187], [24, 188], [24, 189], [24, 190], [24, 191], [24, 192], [24, 193], [24, 194], [24, 195], [24, 196], [24, 197], [24, 198], [24, 199], [24, 200], [24, 201], [24, 203], [24, 205], [24, 207], [24, 209], [24, 210], [24, 211], [24, 212], [24, 214], [24, 216], [24, 218], [24, 220], [24, 222], [24, 223], [24, 224], [24, 225], [24, 226], [24, 227], [24, 228], [24, 229], [24, 230], [24, 231], [24, 233], [24, 234], [24, 235], [24, 237], [24, 238], [24, 239], [24, 241], [24, 242], [24, 243], [24, 244], [24, 245], [24, 246], [24, 248], [24, 249], [24, 250], [24, 251], [24, 252], [24, 253], [24, 254], [24, 255], [24, 256], [24, 257], [24, 258], [24, 259], [24, 260], [24, 261], [24, 262], [24, 263], [24, 264], [24, 265], [24, 266], [24, 267], [24, 268], [24, 269], [24, 270], [24, 271], [24, 272], [24, 273], [24, 274], [24, 275], [24, 276], [24, 277], [24, 278], [24, 279], [24, 280], [24, 281], [24, 282], [24, 283], [24, 284], [24, 285], [24, 286], [24, 287], [24, 288], [24, 289], [24, 290], [24, 291], [24, 292], [24, 293], [24, 294], [24, 296], [24, 297], [24, 298], [24, 302], [24, 305], [25, 75], [25, 79], [25, 81], [25, 82], [25, 83], [25, 85], [25, 86], [25, 87], [25, 88], [25, 89], [25, 90], [25, 91], [25, 92], [25, 93], [25, 94], [25, 95], [25, 96], [25, 97], [25, 98], [25, 99], [25, 100], [25, 101], [25, 102], [25, 103], [25, 104], [25, 105], [25, 106], [25, 107], [25, 108], [25, 109], [25, 110], [25, 111], [25, 112], [25, 113], [25, 114], [25, 115], [25, 116], [25, 117], [25, 118], [25, 119], [25, 120], [25, 121], [25, 122], [25, 123], [25, 124], [25, 125], [25, 126], [25, 127], [25, 128], [25, 129], [25, 130], [25, 131], [25, 132], [25, 133], [25, 134], [25, 135], [25, 136], [25, 137], [25, 138], [25, 139], [25, 140], [25, 141], [25, 142], [25, 143], [25, 144], [25, 145], [25, 146], [25, 147], [25, 148], [25, 149], [25, 150], [25, 151], [25, 152], [25, 153], [25, 154], [25, 155], [25, 156], [25, 157], [25, 158], [25, 159], [25, 160], [25, 162], [25, 164], [25, 165], [25, 166], [25, 167], [25, 169], [25, 170], [25, 171], [25, 173], [25, 175], [25, 177], [25, 179], [25, 180], [25, 181], [25, 183], [25, 184], [25, 186], [25, 188], [25, 189], [25, 190], [25, 192], [25, 194], [25, 196], [25, 197], [25, 199], [25, 201], [25, 203], [25, 205], [25, 207], [25, 209], [25, 212], [25, 214], [25, 216], [25, 218], [25, 220], [25, 222], [25, 224], [25, 225], [25, 226], [25, 227], [25, 229], [25, 230], [25, 231], [25, 233], [25, 234], [25, 235], [25, 237], [25, 239], [25, 241], [25, 242], [25, 243], [25, 244], [25, 245], [25, 246], [25, 249], [25, 252], [25, 254], [25, 255], [25, 256], [25, 258], [25, 259], [25, 260], [25, 261], [25, 262], [25, 263], [25, 264], [25, 265], [25, 266], [25, 267], [25, 268], [25, 269], [25, 270], [25, 271], [25, 272], [25, 273], [25, 274], [25, 275], [25, 276], [25, 277], [25, 278], [25, 279], [25, 280], [25, 281], [25, 282], [25, 283], [25, 284], [25, 285], [25, 286], [25, 287], [25, 288], [25, 289], [25, 290], [25, 291], [25, 292], [25, 293], [25, 294], [25, 295], [25, 296], [25, 297], [25, 298], [25, 300], [25, 301], [25, 309], [26, 69], [26, 70], [26, 73], [26, 75], [26, 77], [26, 79], [26, 80], [26, 81], [26, 82], [26, 83], [26, 84], [26, 85], [26, 86], [26, 87], [26, 88], [26, 89], [26, 90], [26, 91], [26, 92], [26, 93], [26, 94], [26, 95], [26, 96], [26, 97], [26, 98], [26, 99], [26, 100], [26, 101], [26, 102], [26, 103], [26, 104], [26, 105], [26, 106], [26, 107], [26, 108], [26, 109], [26, 110], [26, 111], [26, 112], [26, 113], [26, 114], [26, 115], [26, 116], [26, 117], [26, 118], [26, 119], [26, 121], [26, 122], [26, 123], [26, 124], [26, 126], [26, 128], [26, 130], [26, 132], [26, 134], [26, 136], [26, 138], [26, 139], [26, 140], [26, 141], [26, 143], [26, 145], [26, 147], [26, 149], [26, 150], [26, 151], [26, 152], [26, 153], [26, 155], [26, 156], [26, 158], [26, 160], [26, 162], [26, 164], [26, 166], [26, 169], [26, 171], [26, 173], [26, 175], [26, 177], [26, 179], [26, 181], [26, 182], [26, 184], [26, 186], [26, 188], [26, 190], [26, 192], [26, 194], [26, 197], [26, 199], [26, 201], [26, 203], [26, 205], [26, 207], [26, 209], [26, 214], [26, 216], [26, 218], [26, 220], [26, 222], [26, 224], [26, 226], [26, 227], [26, 229], [26, 230], [26, 231], [26, 233], [26, 235], [26, 237], [26, 239], [26, 241], [26, 243], [26, 246], [26, 249], [26, 252], [26, 254], [26, 255], [26, 256], [26, 258], [26, 259], [26, 260], [26, 261], [26, 262], [26, 263], [26, 264], [26, 265], [26, 266], [26, 267], [26, 268], [26, 269], [26, 270], [26, 271], [26, 272], [26, 273], [26, 274], [26, 275], [26, 276], [26, 277], [26, 278], [26, 279], [26, 280], [26, 281], [26, 282], [26, 283], [26, 284], [26, 285], [26, 286], [26, 287], [26, 288], [26, 289], [26, 290], [26, 291], [26, 292], [26, 293], [26, 294], [26, 295], [26, 296], [26, 297], [26, 298], [26, 299], [26, 300], [26, 301], [27, 67], [27, 71], [27, 72], [27, 75], [27, 77], [27, 78], [27, 79], [27, 81], [27, 82], [27, 83], [27, 84], [27, 85], [27, 86], [27, 87], [27, 88], [27, 89], [27, 90], [27, 91], [27, 92], [27, 94], [27, 95], [27, 96], [27, 98], [27, 100], [27, 102], [27, 104], [27, 106], [27, 111], [27, 113], [27, 115], [27, 117], [27, 119], [27, 126], [27, 128], [27, 130], [27, 132], [27, 134], [27, 136], [27, 138], [27, 141], [27, 143], [27, 145], [27, 147], [27, 149], [27, 151], [27, 156], [27, 158], [27, 160], [27, 162], [27, 164], [27, 171], [27, 173], [27, 175], [27, 177], [27, 179], [27, 181], [27, 184], [27, 186], [27, 188], [27, 190], [27, 192], [27, 194], [27, 201], [27, 203], [27, 205], [27, 207], [27, 209], [27, 211], [27, 214], [27, 216], [27, 218], [27, 220], [27, 222], [27, 224], [27, 226], [27, 229], [27, 231], [27, 233], [27, 235], [27, 237], [27, 239], [27, 242], [27, 244], [27, 246], [27, 249], [27, 252], [27, 254], [27, 256], [27, 258], [27, 259], [27, 260], [27, 262], [27, 263], [27, 264], [27, 265], [27, 266], [27, 267], [27, 268], [27, 269], [27, 270], [27, 271], [27, 272], [27, 273], [27, 274], [27, 275], [27, 276], [27, 277], [27, 278], [27, 279], [27, 280], [27, 281], [27, 282], [27, 283], [27, 284], [27, 285], [27, 286], [27, 287], [27, 288], [27, 289], [27, 290], [27, 291], [27, 292], [27, 293], [27, 294], [27, 295], [27, 296], [27, 297], [27, 298], [27, 299], [27, 300], [27, 301], [27, 302], [27, 303], [27, 304], [28, 65], [28, 69], [28, 71], [28, 72], [28, 73], [28, 75], [28, 76], [28, 77], [28, 78], [28, 79], [28, 81], [28, 82], [28, 83], [28, 85], [28, 86], [28, 87], [28, 89], [28, 91], [28, 92], [28, 94], [28, 96], [28, 98], [28, 100], [28, 102], [28, 111], [28, 113], [28, 115], [28, 117], [28, 119], [28, 121], [28, 130], [28, 132], [28, 134], [28, 143], [28, 147], [28, 149], [28, 151], [28, 156], [28, 158], [28, 160], [28, 162], [28, 164], [28, 171], [28, 173], [28, 175], [28, 177], [28, 179], [28, 181], [28, 186], [28, 188], [28, 190], [28, 192], [28, 194], [28, 196], [28, 201], [28, 203], [28, 205], [28, 207], [28, 209], [28, 216], [28, 218], [28, 220], [28, 222], [28, 224], [28, 226], [28, 231], [28, 233], [28, 235], [28, 237], [28, 239], [28, 242], [28, 246], [28, 249], [28, 252], [28, 254], [28, 256], [28, 258], [28, 259], [28, 260], [28, 261], [28, 263], [28, 265], [28, 266], [28, 267], [28, 269], [28, 270], [28, 271], [28, 272], [28, 273], [28, 274], [28, 275], [28, 276], [28, 277], [28, 278], [28, 279], [28, 280], [28, 281], [28, 282], [28, 283], [28, 284], [28, 285], [28, 286], [28, 287], [28, 288], [28, 289], [28, 290], [28, 291], [28, 292], [28, 293], [28, 294], [28, 295], [28, 296], [28, 297], [28, 298], [28, 299], [28, 300], [28, 301], [28, 302], [28, 303], [28, 304], [28, 305], [28, 306], [28, 307], [28, 312], [29, 63], [29, 67], [29, 70], [29, 71], [29, 72], [29, 73], [29, 74], [29, 76], [29, 77], [29, 79], [29, 80], [29, 81], [29, 83], [29, 85], [29, 87], [29, 89], [29, 92], [29, 94], [29, 96], [29, 98], [29, 100], [29, 102], [29, 106], [29, 111], [29, 113], [29, 115], [29, 117], [29, 130], [29, 134], [29, 143], [29, 147], [29, 149], [29, 151], [29, 158], [29, 160], [29, 162], [29, 164], [29, 166], [29, 173], [29, 175], [29, 177], [29, 179], [29, 186], [29, 188], [29, 190], [29, 192], [29, 194], [29, 203], [29, 205], [29, 207], [29, 220], [29, 222], [29, 224], [29, 265], [29, 268], [29, 270], [29, 271], [29, 272], [29, 273], [29, 274], [29, 275], [29, 276], [29, 277], [29, 278], [29, 279], [29, 280], [29, 281], [29, 282], [29, 283], [29, 284], [29, 285], [29, 286], [29, 287], [29, 288], [29, 289], [29, 290], [29, 291], [29, 292], [29, 293], [29, 294], [29, 295], [29, 296], [29, 297], [29, 298], [29, 299], [29, 300], [29, 301], [29, 302], [29, 303], [29, 304], [29, 305], [29, 306], [29, 307], [29, 308], [29, 309], [29, 311], [30, 62], [30, 65], [30, 66], [30, 67], [30, 68], [30, 70], [30, 72], [30, 73], [30, 74], [30, 76], [30, 79], [30, 81], [30, 83], [30, 85], [30, 87], [30, 89], [30, 96], [30, 98], [30, 100], [30, 102], [30, 113], [30, 115], [30, 117], [30, 132], [30, 134], [30, 145], [30, 149], [30, 151], [30, 158], [30, 160], [30, 162], [30, 164], [30, 173], [30, 175], [30, 177], [30, 179], [30, 190], [30, 192], [30, 194], [30, 207], [30, 273], [30, 274], [30, 275], [30, 276], [30, 277], [30, 278], [30, 279], [30, 280], [30, 281], [30, 282], [30, 283], [30, 284], [30, 285], [30, 286], [30, 287], [30, 288], [30, 289], [30, 290], [30, 291], [30, 292], [30, 293], [30, 294], [30, 295], [30, 296], [30, 297], [30, 298], [30, 299], [30, 300], [30, 301], [30, 302], [30, 303], [30, 304], [30, 305], [30, 306], [30, 307], [30, 308], [30, 309], [30, 310], [30, 311], [30, 312], [30, 313], [31, 55], [31, 61], [31, 62], [31, 63], [31, 66], [31, 68], [31, 69], [31, 70], [31, 71], [31, 73], [31, 74], [31, 75], [31, 77], [31, 81], [31, 83], [31, 85], [31, 87], [31, 89], [31, 100], [31, 104], [31, 115], [31, 117], [31, 145], [31, 147], [31, 149], [31, 162], [31, 164], [31, 177], [31, 278], [31, 281], [31, 282], [31, 283], [31, 284], [31, 285], [31, 286], [31, 287], [31, 288], [31, 289], [31, 290], [31, 291], [31, 292], [31, 293], [31, 294], [31, 295], [31, 296], [31, 297], [31, 298], [31, 299], [31, 300], [31, 301], [31, 302], [31, 303], [31, 304], [31, 305], [31, 306], [31, 307], [31, 308], [31, 309], [31, 310], [31, 311], [31, 312], [31, 313], [31, 315], [31, 316], [32, 56], [32, 58], [32, 60], [32, 63], [32, 64], [32, 66], [32, 67], [32, 68], [32, 70], [32, 72], [32, 76], [32, 85], [32, 91], [32, 102], [32, 104], [32, 285], [32, 287], [32, 288], [32, 289], [32, 290], [32, 291], [32, 292], [32, 293], [32, 294], [32, 295], [32, 296], [32, 297], [32, 298], [32, 299], [32, 300], [32, 301], [32, 302], [32, 303], [32, 304], [32, 305], [32, 306], [32, 307], [32, 308], [32, 309], [32, 310], [32, 311], [32, 312], [32, 313], [32, 315], [33, 54], [33, 60], [33, 63], [33, 64], [33, 66], [33, 70], [33, 72], [33, 74], [33, 78], [33, 95], [33, 289], [33, 290], [33, 291], [33, 292], [33, 293], [33, 294], [33, 295], [33, 296], [33, 297], [33, 298], [33, 299], [33, 300], [33, 301], [33, 302], [33, 303], [33, 304], [33, 305], [33, 306], [33, 307], [33, 308], [33, 309], [33, 310], [33, 311], [33, 312], [33, 313], [33, 314], [33, 315], [33, 316], [33, 317], [33, 318], [33, 319], [34, 53], [34, 59], [34, 61], [34, 293], [34, 294], [34, 296], [34, 297], [34, 298], [34, 299], [34, 300], [34, 301], [34, 302], [34, 303], [34, 304], [34, 305], [34, 306], [34, 307], [34, 308], [34, 309], [34, 310], [34, 311], [34, 312], [34, 313], [34, 314], [34, 315], [34, 316], [34, 317], [34, 318], [34, 319], [34, 320], [34, 322], [34, 323], [35, 58], [35, 61], [35, 80], [35, 296], [35, 297], [35, 298], [35, 299], [35, 300], [35, 301], [35, 302], [35, 303], [35, 304], [35, 305], [35, 306], [35, 307], [35, 308], [35, 309], [35, 310], [35, 311], [35, 312], [35, 313], [35, 314], [35, 315], [35, 316], [35, 317], [35, 318], [35, 319], [35, 320], [35, 321], [35, 323], [35, 324], [35, 326], [35, 327], [36, 30], [36, 299], [36, 300], [36, 302], [36, 303], [36, 304], [36, 305], [36, 306], [36, 307], [36, 308], [36, 309], [36, 310], [36, 311], [36, 312], [36, 313], [36, 314], [36, 315], [36, 316], [36, 317], [36, 318], [36, 319], [36, 320], [36, 321], [36, 322], [36, 324], [36, 325], [36, 327], [37, 303], [37, 304], [37, 306], [37, 307], [37, 308], [37, 309], [37, 310], [37, 311], [37, 312], [37, 313], [37, 314], [37, 315], [37, 316], [37, 317], [37, 318], [37, 319], [37, 320], [37, 321], [37, 322], [37, 323], [37, 325], [37, 326], [37, 327], [37, 329], [37, 330], [38, 305], [38, 307], [38, 308], [38, 310], [38, 311], [38, 312], [38, 313], [38, 314], [38, 315], [38, 316], [38, 317], [38, 318], [38, 319], [38, 320], [38, 321], [38, 323], [38, 324], [38, 325], [38, 326], [38, 328], [38, 330], [39, 307], [39, 309], [39, 310], [39, 311], [39, 312], [39, 313], [39, 314], [39, 315], [39, 316], [39, 317], [39, 318], [39, 319], [39, 320], [39, 321], [39, 322], [39, 323], [39, 324], [39, 326], [39, 327], [39, 328], [39, 329], [39, 330], [39, 331], [39, 333], [39, 334], [39, 338], [40, 309], [40, 310], [40, 311], [40, 312], [40, 313], [40, 314], [40, 315], [40, 316], [40, 317], [40, 318], [40, 319], [40, 320], [40, 321], [40, 322], [40, 323], [40, 324], [40, 325], [40, 326], [40, 327], [40, 328], [40, 329], [40, 331], [40, 332], [40, 333], [40, 351], [41, 315], [41, 316], [41, 318], [41, 319], [41, 320], [41, 321], [41, 322], [41, 323], [41, 324], [41, 325], [41, 326], [41, 327], [41, 328], [41, 329], [41, 330], [41, 332], [41, 334], [41, 336], [41, 337], [41, 346], [42, 319], [42, 321], [42, 322], [42, 323], [42, 324], [42, 325], [42, 326], [42, 327], [42, 328], [42, 330], [42, 331], [42, 332], [42, 333], [42, 335], [42, 337], [42, 339], [42, 341], [43, 322], [43, 324], [43, 325], [43, 326], [43, 327], [43, 329], [43, 330], [43, 331], [43, 333], [43, 335], [43, 336], [43, 337], [43, 339], [43, 340], [43, 341], [44, 325], [44, 327], [44, 329], [44, 330], [44, 331], [44, 333], [44, 334], [44, 338], [44, 340], [44, 342], [44, 344], [44, 346], [45, 325], [45, 328], [45, 330], [45, 332], [45, 333], [45, 334], [45, 337], [45, 338], [45, 339], [45, 341], [45, 343], [46, 330], [46, 332], [46, 333], [46, 337], [46, 338], [46, 341], [46, 343], [46, 344], [46, 345], [46, 347], [46, 349], [47, 333], [47, 334], [47, 336], [47, 337], [47, 340], [47, 342], [47, 344], [47, 346], [47, 348], [48, 26], [48, 336], [48, 340], [48, 344], [48, 346], [48, 348], [48, 350], [48, 352], [49, 333], [49, 341], [49, 343], [49, 345], [49, 349], [49, 351], [49, 354], [50, 343], [50, 347], [50, 349], [50, 351], [50, 353], [50, 355], [51, 346], [51, 348], [52, 350], [52, 352], [52, 358], [52, 363], [53, 347], [104, 14], [116, 11], [120, 9], [131, 7], [131, 9], [133, 5], [136, 1], [136, 2], [136, 3], [136, 4], [136, 5], [136, 6], [136, 7], [136, 8], [136, 9], [136, 10], [139, 10], [139, 11], [139, 12], [139, 13], [139, 14], [140, 3], [140, 5], [140, 6], [140, 7], [140, 8], [140, 9], [140, 10], [142, 6], [142, 7], [142, 8], [142, 9], [142, 10], [142, 11], [143, 2], [143, 8], [143, 9], [145, 9], [147, 8], [147, 477], [150, 7], [150, 8], [150, 9], [150, 10], [150, 11], [150, 12], [151, 10], [154, 9], [154, 10], [154, 11], [154, 12], [155, 9], [155, 10], [155, 11], [155, 12], [155, 14], [155, 15], [157, 11], [157, 12], [158, 9], [158, 10], [158, 11], [158, 12], [158, 14], [158, 15], [158, 16], [159, 9], [159, 10], [159, 11], [159, 478], [161, 8], [161, 10], [161, 11], [161, 12], [162, 9], [162, 10], [162, 11], [162, 12], [162, 13], [162, 14], [162, 15], [163, 9], [163, 10], [163, 11], [163, 12], [163, 13], [163, 478], [164, 11], [164, 14], [164, 15], [164, 16], [165, 9], [165, 10], [165, 11], [165, 12], [165, 13], [166, 8], [166, 9], [166, 10], [166, 11], [166, 12], [166, 13], [166, 14], [166, 15], [167, 11], [167, 12], [167, 13], [167, 14], [167, 16], [168, 14], [168, 15], [168, 16], [169, 11], [169, 12], [169, 13], [169, 14], [169, 15], [170, 10], [170, 11], [170, 12], [170, 13], [170, 14], [170, 15], [170, 16], [171, 9], [171, 10], [171, 11], [171, 12], [171, 13], [171, 14], [171, 15], [172, 11], [172, 12], [172, 13], [172, 14], [172, 15], [172, 16], [172, 17], [173, 10], [173, 11], [173, 12], [173, 13], [173, 14], [173, 15], [173, 16], [174, 9], [174, 10], [174, 12], [174, 13], [174, 14], [174, 15], [174, 16], [174, 17], [175, 11], [175, 12], [175, 13], [175, 14], [175, 15], [175, 16], [176, 11], [176, 12], [176, 13], [176, 14], [176, 15], [176, 16], [176, 17], [177, 11], [177, 13], [177, 14], [177, 15], [177, 16], [178, 10], [178, 12], [178, 13], [178, 14], [178, 15], [178, 16], [178, 17], [179, 10], [179, 11], [179, 12], [179, 13], [179, 14], [179, 15], [179, 16], [179, 17], [180, 10], [180, 11], [180, 13], [180, 14], [180, 16], [181, 11], [181, 12], [181, 14], [181, 15], [181, 16], [181, 17], [182, 11], [182, 12], [182, 13], [182, 14], [182, 15], [182, 16], [183, 12], [183, 13], [183, 14], [183, 15], [183, 16], [183, 17], [184, 12], [184, 13], [184, 15], [184, 16], [185, 11], [185, 12], [185, 13], [185, 14], [185, 15], [185, 16], [185, 17], [186, 14], [186, 15], [186, 16], [186, 17], [187, 12], [187, 13], [187, 15], [187, 16], [187, 17], [187, 477], [188, 11], [188, 13], [188, 14], [188, 15], [188, 16], [188, 475], [190, 11], [190, 15], [190, 16], [190, 17], [191, 13], [191, 14], [191, 15], [191, 16], [191, 17], [192, 12], [192, 13], [192, 14], [192, 15], [192, 16], [192, 17], [193, 16], [194, 14], [194, 15], [194, 16], [194, 17], [195, 13], [195, 14], [195, 15], [195, 16], [195, 17], [196, 10], [196, 12], [196, 13], [196, 14], [196, 15], [196, 16], [196, 17], [197, 15], [197, 16], [198, 11], [198, 14], [198, 15], [198, 16], [198, 17], [199, 11], [199, 12], [199, 13], [199, 14], [199, 15], [199, 16], [199, 17], [200, 12], [200, 13], [200, 14], [200, 15], [200, 16], [200, 17], [200, 480], [201, 15], [201, 16], [201, 17], [202, 11], [202, 13], [202, 14], [202, 15], [202, 16], [202, 17], [203, 10], [203, 11], [203, 12], [203, 13], [203, 14], [203, 15], [203, 16], [203, 17], [204, 10], [204, 12], [204, 13], [204, 14], [204, 15], [204, 16], [204, 17], [205, 12], [205, 15], [205, 16], [205, 17], [206, 10], [206, 12], [206, 13], [206, 14], [206, 15], [206, 16], [206, 17], [207, 11], [207, 12], [207, 13], [207, 14], [207, 15], [207, 16], [207, 17], [207, 18], [208, 10], [208, 12], [208, 13], [208, 14], [208, 15], [208, 16], [208, 17], [209, 11], [209, 14], [209, 15], [209, 16], [209, 17], [210, 10], [210, 12], [210, 13], [210, 14], [210, 15], [210, 16], [210, 17], [211, 9], [211, 10], [211, 11], [211, 12], [211, 13], [211, 14], [211, 15], [211, 16], [211, 17], [212, 10], [212, 11], [212, 12], [212, 13], [212, 14], [212, 15], [212, 16], [212, 17], [213, 10], [213, 11], [213, 12], [213, 13], [213, 14], [213, 15], [213, 16], [213, 17], [213, 18], [214, 12], [214, 13], [214, 14], [214, 15], [214, 16], [214, 17], [214, 475], [215, 10], [215, 11], [215, 12], [215, 13], [215, 14], [215, 15], [215, 16], [215, 17], [215, 478], [216, 10], [216, 11], [216, 12], [216, 13], [216, 14], [216, 15], [216, 16], [216, 17], [216, 18], [217, 9], [217, 10], [217, 11], [217, 12], [217, 13], [217, 14], [217, 15], [217, 16], [217, 17], [218, 10], [218, 11], [218, 12], [218, 13], [218, 14], [218, 15], [218, 16], [218, 17], [218, 477], [219, 8], [219, 10], [219, 11], [219, 12], [219, 13], [219, 14], [219, 15], [219, 16], [219, 17], [220, 9], [220, 10], [220, 11], [220, 12], [220, 13], [220, 14], [220, 15], [220, 16], [220, 17], [220, 476], [221, 10], [221, 11], [221, 12], [221, 13], [221, 14], [221, 15], [221, 16], [221, 17], [222, 9], [222, 11], [222, 12], [222, 13], [222, 14], [222, 15], [222, 16], [222, 17], [222, 479], [223, 1], [223, 10], [223, 12], [223, 13], [223, 14], [223, 15], [223, 16], [223, 17], [224, 9], [224, 10], [224, 11], [224, 12], [224, 13], [224, 14], [224, 15], [224, 16], [224, 17], [225, 2], [225, 9], [225, 10], [225, 11], [225, 12], [225, 13], [225, 14], [225, 15], [225, 16], [225, 17], [226, 1], [226, 10], [226, 11], [226, 12], [226, 13], [226, 14], [226, 15], [226, 16], [226, 17], [226, 18], [227, 10], [227, 11], [227, 12], [227, 13], [227, 14], [227, 15], [227, 16], [227, 17], [228, 8], [228, 9], [228, 10], [228, 11], [228, 12], [228, 13], [228, 14], [228, 15], [228, 16], [228, 17], [229, 1], [229, 9], [229, 10], [229, 11], [229, 12], [229, 13], [229, 14], [229, 15], [229, 16], [229, 17], [229, 483], [230, 10], [230, 11], [230, 12], [230, 13], [230, 14], [230, 15], [230, 16], [230, 17], [230, 482], [231, 2], [231, 9], [231, 11], [231, 12], [231, 13], [231, 14], [231, 15], [231, 16], [231, 17], [231, 18], [231, 483], [232, 1], [232, 9], [232, 10], [232, 11], [232, 12], [232, 13], [232, 14], [232, 15], [232, 16], [232, 17], [232, 18], [233, 9], [233, 10], [233, 11], [233, 12], [233, 13], [233, 14], [233, 15], [233, 16], [233, 17], [234, 10], [234, 11], [234, 12], [234, 13], [234, 14], [234, 15], [234, 16], [234, 17], [234, 18], [234, 484], [234, 488], [234, 489], [235, 1], [235, 2], [235, 5], [235, 9], [235, 10], [235, 11], [235, 12], [235, 13], [235, 14], [235, 15], [235, 16], [235, 17], [235, 483], [236, 1], [236, 8], [236, 9], [236, 10], [236, 11], [236, 12], [236, 13], [236, 14], [236, 15], [236, 16], [236, 17], [236, 488], [237, 9], [237, 10], [237, 11], [237, 12], [237, 13], [237, 14], [237, 15], [237, 16], [237, 17], [237, 486], [237, 487], [238, 1], [238, 10], [238, 11], [238, 12], [238, 13], [238, 14], [238, 15], [238, 16], [238, 17], [238, 18], [238, 478], [239, 1], [239, 4], [239, 9], [239, 10], [239, 11], [239, 12], [239, 14], [239, 15], [239, 16], [239, 17], [239, 490], [240, 3], [240, 8], [240, 9], [240, 10], [240, 11], [240, 12], [240, 13], [240, 14], [240, 15], [240, 16], [240, 17], [240, 487], [240, 488], [241, 8], [241, 9], [241, 10], [241, 11], [241, 12], [241, 13], [241, 14], [241, 15], [241, 16], [241, 17], [241, 18], [241, 490], [241, 491], [242, 1], [242, 4], [242, 9], [242, 10], [242, 11], [242, 12], [242, 13], [242, 14], [242, 15], [242, 16], [242, 17], [242, 487], [242, 488], [242, 492], [243, 1], [243, 9], [243, 10], [243, 11], [243, 12], [243, 13], [243, 14], [243, 15], [243, 16], [243, 17], [243, 489], [243, 490], [244, 2], [244, 9], [244, 10], [244, 11], [244, 12], [244, 13], [244, 14], [244, 15], [244, 16], [244, 17], [244, 487], [244, 488], [244, 491], [244, 492], [244, 493], [245, 1], [245, 8], [245, 9], [245, 10], [245, 11], [245, 12], [245, 13], [245, 14], [245, 15], [245, 16], [245, 17], [245, 489], [245, 490], [245, 494], [245, 495], [246, 9], [246, 11], [246, 12], [246, 13], [246, 14], [246, 15], [246, 16], [246, 17], [246, 488], [246, 490], [246, 491], [246, 492], [246, 493], [247, 2], [247, 8], [247, 9], [247, 10], [247, 11], [247, 12], [247, 13], [247, 14], [247, 15], [247, 16], [247, 17], [247, 18], [247, 489], [247, 490], [247, 493], [247, 494], [247, 495], [247, 496], [248, 1], [248, 3], [248, 4], [248, 8], [248, 9], [248, 10], [248, 11], [248, 12], [248, 13], [248, 14], [248, 15], [248, 16], [248, 17], [248, 487], [248, 490], [248, 491], [248, 492], [248, 496], [249, 3], [249, 8], [249, 9], [249, 10], [249, 11], [249, 12], [249, 13], [249, 14], [249, 15], [249, 16], [249, 17], [249, 488], [249, 489], [249, 493], [249, 494], [249, 495], [250, 9], [250, 10], [250, 11], [250, 12], [250, 13], [250, 14], [250, 15], [250, 16], [250, 17], [250, 487], [250, 490], [250, 491], [250, 492], [250, 496], [250, 497], [251, 1], [251, 8], [251, 9], [251, 10], [251, 11], [251, 12], [251, 13], [251, 14], [251, 15], [251, 16], [251, 17], [251, 489], [251, 492], [251, 493], [251, 494], [251, 495], [252, 3], [252, 4], [252, 8], [252, 9], [252, 10], [252, 11], [252, 12], [252, 13], [252, 14], [252, 15], [252, 16], [252, 17], [252, 18], [252, 490], [252, 491], [252, 495], [252, 496], [252, 497], [253, 2], [253, 3], [253, 8], [253, 9], [253, 10], [253, 11], [253, 12], [253, 13], [253, 14], [253, 15], [253, 16], [253, 17], [253, 18], [253, 488], [253, 489], [253, 492], [253, 493], [253, 494], [254, 8], [254, 9], [254, 10], [254, 11], [254, 12], [254, 13], [254, 14], [254, 15], [254, 16], [254, 17], [254, 18], [254, 490], [254, 491], [254, 495], [254, 496], [254, 497], [254, 498], [255, 2], [255, 3], [255, 8], [255, 9], [255, 10], [255, 11], [255, 12], [255, 13], [255, 14], [255, 15], [255, 16], [255, 17], [255, 488], [255, 491], [255, 492], [255, 493], [255, 494], [255, 498], [256, 2], [256, 3], [256, 4], [256, 5], [256, 8], [256, 9], [256, 10], [256, 11], [256, 12], [256, 13], [256, 14], [256, 15], [256, 16], [256, 17], [256, 489], [256, 490], [256, 491], [256, 494], [256, 495], [256, 496], [256, 497], [257, 4], [257, 8], [257, 9], [257, 10], [257, 11], [257, 12], [257, 13], [257, 14], [257, 15], [257, 16], [257, 17], [257, 488], [257, 491], [257, 492], [257, 493], [257, 498], [257, 499], [259, 2], [259, 243], [259, 244], [259, 245], [259, 246], [259, 252], [259, 253], [259, 254], [259, 255], [260, 1], [260, 4], [260, 5], [260, 243], [260, 244], [260, 245], [260, 246], [260, 247], [260, 248], [260, 249], [260, 250], [260, 251], [260, 252], [260, 253], [260, 254], [260, 255], [260, 256], [261, 3], [261, 206], [261, 207], [261, 208], [261, 209], [261, 210], [261, 211], [261, 212], [261, 213], [261, 214], [261, 215], [261, 216], [261, 217], [261, 218], [261, 219], [261, 220], [261, 221], [261, 222], [261, 223], [261, 224], [261, 225], [261, 226], [261, 227], [261, 228], [261, 229], [261, 230], [261, 231], [261, 232], [261, 233], [261, 234], [261, 235], [261, 236], [261, 237], [261, 238], [261, 239], [261, 240], [261, 241], [261, 242], [261, 243], [261, 244], [261, 245], [261, 246], [261, 247], [261, 248], [261, 249], [261, 250], [261, 251], [261, 252], [261, 253], [261, 254], [261, 255], [261, 256], [261, 257], [261, 258], [261, 259], [261, 260], [261, 261], [261, 262], [261, 263], [261, 264], [261, 265], [261, 266], [261, 267], [261, 268], [261, 269], [261, 270], [261, 271], [261, 272], [261, 273], [261, 274], [261, 275], [261, 276], [261, 277], [261, 278], [261, 279], [261, 280], [261, 281], [261, 282], [261, 283], [261, 284], [261, 285], [261, 286], [261, 287], [261, 288], [261, 289], [261, 290], [261, 291], [261, 292], [261, 293], [261, 294], [261, 295], [261, 296], [261, 297], [262, 4], [262, 5], [262, 206], [262, 207], [262, 208], [262, 209], [262, 210], [262, 211], [262, 212], [262, 213], [262, 214], [262, 215], [262, 216], [262, 217], [262, 218], [262, 219], [262, 220], [262, 221], [262, 222], [262, 223], [262, 224], [262, 225], [262, 226], [262, 227], [262, 228], [262, 229], [262, 230], [262, 231], [262, 232], [262, 233], [262, 234], [262, 235], [262, 236], [262, 237], [262, 238], [262, 239], [262, 240], [262, 241], [262, 242], [262, 243], [262, 244], [262, 245], [262, 246], [262, 247], [262, 248], [262, 249], [262, 250], [262, 251], [262, 252], [262, 253], [262, 254], [262, 255], [262, 256], [262, 257], [262, 258], [262, 259], [262, 260], [262, 261], [262, 262], [262, 263], [262, 264], [262, 265], [262, 266], [262, 267], [262, 268], [262, 269], [262, 270], [262, 271], [262, 272], [262, 273], [262, 274], [262, 275], [262, 276], [262, 277], [262, 278], [262, 279], [262, 280], [262, 281], [262, 282], [262, 283], [262, 284], [262, 285], [262, 286], [262, 287], [262, 288], [262, 289], [262, 290], [262, 291], [262, 292], [262, 293], [262, 294], [262, 295], [262, 296], [262, 297], [263, 206], [263, 207], [263, 208], [263, 209], [263, 210], [263, 211], [263, 212], [263, 213], [263, 214], [263, 215], [263, 216], [263, 217], [263, 218], [263, 219], [263, 220], [263, 221], [263, 222], [263, 223], [263, 224], [263, 225], [263, 226], [263, 227], [263, 228], [263, 229], [263, 230], [263, 231], [263, 232], [263, 233], [263, 234], [263, 235], [263, 236], [263, 237], [263, 238], [263, 239], [263, 240], [263, 241], [263, 242], [263, 243], [263, 244], [263, 245], [263, 246], [263, 247], [263, 248], [263, 249], [263, 250], [263, 251], [263, 252], [263, 253], [263, 254], [263, 255], [263, 256], [263, 257], [263, 258], [263, 259], [263, 260], [263, 261], [263, 262], [263, 263], [263, 264], [263, 265], [263, 266], [263, 267], [263, 268], [263, 269], [263, 270], [263, 271], [263, 272], [263, 273], [263, 274], [263, 275], [263, 276], [263, 277], [263, 278], [263, 279], [263, 280], [263, 281], [263, 282], [263, 283], [263, 284], [263, 285], [263, 286], [263, 287], [263, 288], [263, 289], [263, 290], [263, 291], [263, 292], [263, 293], [263, 294], [263, 295], [263, 296], [263, 297], [263, 478], [264, 3], [264, 4], [264, 206], [264, 207], [264, 208], [264, 209], [264, 210], [264, 211], [264, 212], [264, 213], [264, 214], [264, 215], [264, 216], [264, 217], [264, 218], [264, 219], [264, 220], [264, 221], [264, 222], [264, 223], [264, 224], [264, 225], [264, 226], [264, 227], [264, 228], [264, 229], [264, 230], [264, 231], [264, 232], [264, 233], [264, 234], [264, 235], [264, 236], [264, 237], [264, 238], [264, 239], [264, 240], [264, 241], [264, 242], [264, 243], [264, 244], [264, 245], [264, 246], [264, 247], [264, 248], [264, 249], [264, 250], [264, 251], [264, 252], [264, 253], [264, 254], [264, 255], [264, 256], [264, 257], [264, 258], [264, 259], [264, 260], [264, 261], [264, 262], [264, 263], [264, 264], [264, 265], [264, 266], [264, 267], [264, 268], [264, 269], [264, 270], [264, 271], [264, 272], [264, 273], [264, 274], [264, 275], [264, 276], [264, 277], [264, 278], [264, 279], [264, 280], [264, 281], [264, 282], [264, 283], [264, 284], [264, 285], [264, 286], [264, 287], [264, 288], [264, 289], [264, 290], [264, 291], [264, 292], [264, 293], [264, 294], [264, 295], [264, 296], [264, 297], [265, 2], [265, 4], [265, 5], [265, 6], [265, 206], [265, 207], [265, 208], [265, 209], [265, 210], [265, 211], [265, 212], [265, 213], [265, 214], [265, 215], [265, 216], [265, 217], [265, 218], [265, 219], [265, 220], [265, 221], [265, 222], [265, 223], [265, 224], [265, 225], [265, 226], [265, 227], [265, 228], [265, 229], [265, 230], [265, 231], [265, 232], [265, 233], [265, 234], [265, 235], [265, 236], [265, 237], [265, 238], [265, 239], [265, 240], [265, 241], [265, 242], [265, 243], [265, 244], [265, 245], [265, 246], [265, 247], [265, 248], [265, 249], [265, 250], [265, 251], [265, 252], [265, 253], [265, 254], [265, 255], [265, 256], [265, 257], [265, 258], [265, 259], [265, 260], [265, 261], [265, 262], [265, 263], [265, 264], [265, 265], [265, 266], [265, 267], [265, 268], [265, 269], [265, 270], [265, 271], [265, 272], [265, 273], [265, 274], [265, 275], [265, 276], [265, 277], [265, 278], [265, 279], [265, 280], [265, 281], [265, 282], [265, 283], [265, 284], [265, 285], [265, 286], [265, 287], [265, 288], [265, 289], [265, 290], [265, 291], [265, 292], [265, 293], [265, 294], [265, 295], [265, 296], [265, 297], [266, 5], [266, 206], [266, 207], [266, 208], [266, 209], [266, 210], [266, 211], [266, 212], [266, 213], [266, 214], [266, 215], [266, 216], [266, 217], [266, 218], [266, 219], [266, 220], [266, 221], [266, 222], [266, 223], [266, 224], [266, 225], [266, 226], [266, 227], [266, 228], [266, 229], [266, 230], [266, 231], [266, 232], [266, 233], [266, 234], [266, 235], [266, 236], [266, 237], [266, 238], [266, 239], [266, 240], [266, 241], [266, 242], [266, 243], [266, 244], [266, 245], [266, 246], [266, 247], [266, 248], [266, 249], [266, 250], [266, 251], [266, 252], [266, 253], [266, 254], [266, 255], [266, 256], [266, 257], [266, 258], [266, 259], [266, 260], [266, 261], [266, 262], [266, 263], [266, 264], [266, 265], [266, 266], [266, 267], [266, 268], [266, 269], [266, 270], [266, 271], [266, 272], [266, 273], [266, 274], [266, 275], [266, 276], [266, 277], [266, 278], [266, 279], [266, 280], [266, 281], [266, 282], [266, 283], [266, 284], [266, 285], [266, 286], [266, 287], [266, 288], [266, 289], [266, 290], [266, 291], [266, 292], [266, 293], [266, 294], [266, 295], [266, 296], [266, 297], [267, 206], [267, 207], [267, 208], [267, 209], [267, 210], [267, 211], [267, 212], [267, 213], [267, 214], [267, 215], [267, 216], [267, 217], [267, 218], [267, 219], [267, 220], [267, 221], [267, 222], [267, 223], [267, 224], [267, 225], [267, 226], [267, 227], [267, 228], [267, 229], [267, 230], [267, 231], [267, 232], [267, 233], [267, 234], [267, 235], [267, 236], [267, 237], [267, 238], [267, 239], [267, 240], [267, 241], [267, 242], [267, 243], [267, 244], [267, 245], [267, 246], [267, 247], [267, 248], [267, 249], [267, 250], [267, 251], [267, 252], [267, 253], [267, 254], [267, 255], [267, 256], [267, 257], [267, 258], [267, 259], [267, 260], [267, 261], [267, 262], [267, 263], [267, 264], [267, 265], [267, 266], [267, 267], [267, 268], [267, 269], [267, 270], [267, 271], [267, 272], [267, 273], [267, 274], [267, 275], [267, 276], [267, 277], [267, 278], [267, 279], [267, 280], [267, 281], [267, 282], [267, 283], [267, 284], [267, 285], [267, 286], [267, 287], [267, 288], [267, 289], [267, 290], [267, 291], [267, 292], [267, 293], [267, 294], [267, 295], [267, 296], [267, 297], [268, 2], [268, 3], [268, 5], [268, 206], [268, 207], [268, 208], [268, 209], [268, 210], [268, 211], [268, 212], [268, 213], [268, 214], [268, 215], [268, 216], [268, 217], [268, 218], [268, 219], [268, 220], [268, 221], [268, 222], [268, 223], [268, 224], [268, 225], [268, 226], [268, 227], [268, 228], [268, 229], [268, 230], [268, 231], [268, 232], [268, 233], [268, 234], [268, 235], [268, 236], [268, 237], [268, 238], [268, 239], [268, 240], [268, 241], [268, 242], [268, 243], [268, 244], [268, 245], [268, 246], [268, 247], [268, 248], [268, 249], [268, 250], [268, 251], [268, 252], [268, 253], [268, 254], [268, 255], [268, 256], [268, 257], [268, 258], [268, 259], [268, 260], [268, 261], [268, 262], [268, 263], [268, 264], [268, 265], [268, 266], [268, 267], [268, 268], [268, 269], [268, 270], [268, 271], [268, 272], [268, 273], [268, 274], [268, 275], [268, 276], [268, 277], [268, 278], [268, 279], [268, 280], [268, 281], [268, 282], [268, 283], [268, 284], [268, 285], [268, 286], [268, 287], [268, 288], [268, 289], [268, 290], [268, 291], [268, 292], [268, 293], [268, 294], [268, 295], [268, 296], [268, 297], [269, 4], [269, 6], [269, 206], [269, 207], [269, 208], [269, 209], [269, 210], [269, 211], [269, 212], [269, 213], [269, 214], [269, 215], [269, 216], [269, 217], [269, 218], [269, 219], [269, 220], [269, 221], [269, 222], [269, 223], [269, 224], [269, 225], [269, 226], [269, 227], [269, 228], [269, 229], [269, 230], [269, 231], [269, 232], [269, 233], [269, 234], [269, 235], [269, 236], [269, 237], [269, 238], [269, 239], [269, 240], [269, 241], [269, 242], [269, 243], [269, 244], [269, 245], [269, 246], [269, 247], [269, 248], [269, 249], [269, 250], [269, 251], [269, 252], [269, 253], [269, 254], [269, 255], [269, 256], [269, 257], [269, 258], [269, 259], [269, 260], [269, 261], [269, 262], [269, 263], [269, 264], [269, 265], [269, 266], [269, 267], [269, 268], [269, 269], [269, 270], [269, 271], [269, 272], [269, 273], [269, 274], [269, 275], [269, 276], [269, 277], [269, 278], [269, 279], [269, 280], [269, 281], [269, 282], [269, 283], [269, 284], [269, 285], [269, 286], [269, 287], [269, 288], [269, 289], [269, 290], [269, 291], [269, 292], [269, 293], [269, 294], [269, 295], [269, 296], [269, 297], [270, 4], [270, 5], [270, 206], [270, 207], [270, 208], [270, 209], [270, 210], [270, 211], [270, 212], [270, 213], [270, 214], [270, 215], [270, 216], [270, 217], [270, 218], [270, 219], [270, 220], [270, 221], [270, 222], [270, 223], [270, 224], [270, 225], [270, 226], [270, 227], [270, 228], [270, 229], [270, 230], [270, 231], [270, 232], [270, 233], [270, 234], [270, 235], [270, 236], [270, 237], [270, 238], [270, 239], [270, 240], [270, 241], [270, 242], [270, 243], [270, 244], [270, 245], [270, 246], [270, 247], [270, 248], [270, 249], [270, 250], [270, 251], [270, 252], [270, 253], [270, 254], [270, 255], [270, 256], [270, 257], [270, 258], [270, 259], [270, 260], [270, 261], [270, 262], [270, 263], [270, 264], [270, 265], [270, 266], [270, 267], [270, 268], [270, 269], [270, 270], [270, 271], [270, 272], [270, 273], [270, 274], [270, 275], [270, 276], [270, 277], [270, 278], [270, 279], [270, 280], [270, 281], [270, 282], [270, 283], [270, 284], [270, 285], [270, 286], [270, 287], [270, 288], [270, 289], [270, 290], [270, 291], [270, 292], [270, 293], [270, 294], [270, 295], [270, 296], [270, 297], [271, 206], [271, 207], [271, 208], [271, 209], [271, 210], [271, 211], [271, 212], [271, 213], [271, 214], [271, 215], [271, 216], [271, 217], [271, 218], [271, 219], [271, 220], [271, 221], [271, 222], [271, 223], [271, 224], [271, 225], [271, 226], [271, 227], [271, 228], [271, 229], [271, 230], [271, 231], [271, 232], [271, 233], [271, 234], [271, 235], [271, 236], [271, 237], [271, 238], [271, 239], [271, 240], [271, 241], [271, 242], [271, 243], [271, 244], [271, 245], [271, 246], [271, 247], [271, 248], [271, 249], [271, 250], [271, 251], [271, 252], [271, 253], [271, 254], [271, 255], [271, 256], [271, 257], [271, 258], [271, 259], [271, 260], [271, 261], [271, 262], [271, 263], [271, 264], [271, 265], [271, 266], [271, 267], [271, 268], [271, 269], [271, 270], [271, 271], [271, 272], [271, 273], [271, 274], [271, 275], [271, 276], [271, 277], [271, 278], [271, 279], [271, 280], [271, 281], [271, 282], [271, 283], [271, 284], [271, 285], [271, 286], [271, 287], [271, 288], [271, 289], [271, 290], [271, 291], [271, 292], [271, 293], [271, 294], [271, 295], [271, 296], [271, 297], [272, 2], [272, 5], [272, 206], [272, 207], [272, 208], [272, 209], [272, 210], [272, 211], [272, 212], [272, 213], [272, 214], [272, 215], [272, 216], [272, 217], [272, 218], [272, 219], [272, 220], [272, 221], [272, 222], [272, 223], [272, 224], [272, 225], [272, 226], [272, 227], [272, 228], [272, 229], [272, 230], [272, 231], [272, 232], [272, 233], [272, 234], [272, 235], [272, 236], [272, 237], [272, 238], [272, 239], [272, 240], [272, 241], [272, 242], [272, 243], [272, 244], [272, 245], [272, 246], [272, 247], [272, 248], [272, 249], [272, 250], [272, 251], [272, 252], [272, 253], [272, 254], [272, 255], [272, 256], [272, 257], [272, 258], [272, 259], [272, 260], [272, 261], [272, 262], [272, 263], [272, 264], [272, 265], [272, 266], [272, 267], [272, 268], [272, 269], [272, 270], [272, 271], [272, 272], [272, 273], [272, 274], [272, 275], [272, 276], [272, 277], [272, 278], [272, 279], [272, 280], [272, 281], [272, 282], [272, 283], [272, 284], [272, 285], [272, 286], [272, 287], [272, 288], [272, 289], [272, 290], [272, 291], [272, 292], [272, 293], [272, 294], [272, 295], [272, 296], [272, 297], [273, 4], [273, 5], [273, 6], [273, 206], [273, 207], [273, 208], [273, 209], [273, 210], [273, 211], [273, 212], [273, 213], [273, 214], [273, 215], [273, 216], [273, 217], [273, 218], [273, 219], [273, 220], [273, 221], [273, 222], [273, 223], [273, 224], [273, 225], [273, 226], [273, 227], [273, 228], [273, 229], [273, 230], [273, 231], [273, 232], [273, 233], [273, 234], [273, 235], [273, 236], [273, 237], [273, 238], [273, 239], [273, 240], [273, 241], [273, 242], [273, 243], [273, 244], [273, 245], [273, 246], [273, 247], [273, 248], [273, 249], [273, 250], [273, 251], [273, 252], [273, 253], [273, 254], [273, 255], [273, 256], [273, 257], [273, 258], [273, 259], [273, 260], [273, 261], [273, 262], [273, 263], [273, 264], [273, 265], [273, 266], [273, 267], [273, 268], [273, 269], [273, 270], [273, 271], [273, 272], [273, 273], [273, 274], [273, 275], [273, 276], [273, 277], [273, 278], [273, 279], [273, 280], [273, 281], [273, 282], [273, 283], [273, 284], [273, 285], [273, 286], [273, 287], [273, 288], [273, 289], [273, 290], [273, 291], [273, 292], [273, 293], [273, 294], [273, 295], [273, 296], [273, 297], [274, 7], [274, 8], [274, 206], [274, 207], [274, 208], [274, 209], [274, 210], [274, 211], [274, 212], [274, 213], [274, 214], [274, 215], [274, 216], [274, 217], [274, 218], [274, 219], [274, 220], [274, 221], [274, 222], [274, 223], [274, 224], [274, 225], [274, 226], [274, 227], [274, 228], [274, 229], [274, 230], [274, 231], [274, 232], [274, 233], [274, 234], [274, 235], [274, 236], [274, 237], [274, 238], [274, 239], [274, 240], [274, 241], [274, 242], [274, 243], [274, 244], [274, 245], [274, 246], [274, 247], [274, 248], [274, 249], [274, 250], [274, 251], [274, 252], [274, 253], [274, 254], [274, 255], [274, 256], [274, 257], [274, 258], [274, 259], [274, 260], [274, 261], [274, 262], [274, 263], [274, 264], [274, 265], [274, 266], [274, 267], [274, 268], [274, 269], [274, 270], [274, 271], [274, 272], [274, 273], [274, 274], [274, 275], [274, 276], [274, 277], [274, 278], [274, 279], [274, 280], [274, 281], [274, 282], [274, 283], [274, 284], [274, 285], [274, 286], [274, 287], [274, 288], [274, 289], [274, 290], [274, 291], [274, 292], [274, 293], [274, 294], [274, 295], [274, 296], [274, 297], [275, 5], [275, 206], [275, 207], [275, 208], [275, 209], [275, 210], [275, 211], [275, 212], [275, 213], [275, 214], [275, 215], [275, 216], [275, 217], [275, 218], [275, 219], [275, 220], [275, 221], [275, 222], [275, 223], [275, 224], [275, 225], [275, 226], [275, 227], [275, 228], [275, 229], [275, 230], [275, 231], [275, 232], [275, 233], [275, 234], [275, 235], [275, 236], [275, 237], [275, 238], [275, 239], [275, 240], [275, 241], [275, 242], [275, 243], [275, 244], [275, 245], [275, 246], [275, 247], [275, 248], [275, 249], [275, 250], [275, 251], [275, 252], [275, 253], [275, 254], [275, 255], [275, 256], [275, 257], [275, 258], [275, 259], [275, 260], [275, 261], [275, 262], [275, 263], [275, 264], [275, 265], [275, 266], [275, 267], [275, 268], [275, 269], [275, 270], [275, 271], [275, 272], [275, 273], [275, 274], [275, 275], [275, 276], [275, 277], [275, 278], [275, 279], [275, 280], [275, 281], [275, 282], [275, 283], [275, 284], [275, 285], [275, 286], [275, 287], [275, 288], [275, 289], [275, 290], [275, 291], [275, 292], [275, 293], [275, 294], [275, 295], [275, 296], [275, 297], [275, 478], [276, 4], [276, 206], [276, 207], [276, 208], [276, 209], [276, 210], [276, 211], [276, 212], [276, 213], [276, 214], [276, 215], [276, 216], [276, 217], [276, 218], [276, 219], [276, 220], [276, 221], [276, 222], [276, 223], [276, 224], [276, 225], [276, 226], [276, 227], [276, 228], [276, 229], [276, 230], [276, 231], [276, 232], [276, 233], [276, 234], [276, 235], [276, 236], [276, 237], [276, 238], [276, 239], [276, 240], [276, 241], [276, 242], [276, 243], [276, 244], [276, 245], [276, 246], [276, 247], [276, 248], [276, 249], [276, 250], [276, 251], [276, 252], [276, 253], [276, 254], [276, 255], [276, 256], [276, 257], [276, 258], [276, 259], [276, 260], [276, 261], [276, 262], [276, 263], [276, 264], [276, 265], [276, 266], [276, 267], [276, 268], [276, 269], [276, 270], [276, 271], [276, 272], [276, 273], [276, 274], [276, 275], [276, 276], [276, 277], [276, 278], [276, 279], [276, 280], [276, 281], [276, 282], [276, 283], [276, 284], [276, 285], [276, 286], [276, 287], [276, 288], [276, 289], [276, 290], [276, 291], [276, 292], [276, 293], [276, 294], [276, 295], [276, 296], [276, 297], [277, 6], [277, 8], [277, 206], [277, 207], [277, 208], [277, 209], [277, 210], [277, 211], [277, 212], [277, 213], [277, 214], [277, 215], [277, 216], [277, 217], [277, 218], [277, 219], [277, 220], [277, 221], [277, 222], [277, 223], [277, 224], [277, 225], [277, 226], [277, 227], [277, 228], [277, 229], [277, 230], [277, 231], [277, 232], [277, 233], [277, 234], [277, 235], [277, 236], [277, 237], [277, 238], [277, 239], [277, 240], [277, 241], [277, 242], [277, 243], [277, 244], [277, 245], [277, 246], [277, 247], [277, 248], [277, 249], [277, 250], [277, 251], [277, 252], [277, 253], [277, 254], [277, 255], [277, 256], [277, 257], [277, 258], [277, 259], [277, 260], [277, 261], [277, 262], [277, 263], [277, 264], [277, 265], [277, 266], [277, 267], [277, 268], [277, 269], [277, 270], [277, 271], [277, 272], [277, 273], [277, 274], [277, 275], [277, 276], [277, 277], [277, 278], [277, 279], [277, 280], [277, 281], [277, 282], [277, 283], [277, 284], [277, 285], [277, 286], [277, 287], [277, 288], [277, 289], [277, 290], [277, 291], [277, 292], [277, 293], [277, 294], [277, 295], [277, 296], [277, 297], [278, 7], [278, 10], [278, 206], [278, 207], [278, 208], [278, 209], [278, 210], [278, 211], [278, 212], [278, 213], [278, 214], [278, 215], [278, 216], [278, 217], [278, 218], [278, 219], [278, 220], [278, 221], [278, 222], [278, 223], [278, 224], [278, 225], [278, 226], [278, 227], [278, 228], [278, 229], [278, 230], [278, 231], [278, 232], [278, 233], [278, 234], [278, 235], [278, 236], [278, 237], [278, 238], [278, 239], [278, 240], [278, 241], [278, 242], [278, 243], [278, 244], [278, 245], [278, 246], [278, 247], [278, 248], [278, 249], [278, 250], [278, 251], [278, 252], [278, 253], [278, 254], [278, 255], [278, 256], [278, 257], [278, 258], [278, 259], [278, 260], [278, 261], [278, 262], [278, 263], [278, 264], [278, 265], [278, 266], [278, 267], [278, 268], [278, 269], [278, 270], [278, 271], [278, 272], [278, 273], [278, 274], [278, 275], [278, 276], [278, 277], [278, 278], [278, 279], [278, 280], [278, 281], [278, 282], [278, 283], [278, 284], [278, 285], [278, 286], [278, 287], [278, 288], [278, 289], [278, 290], [278, 291], [278, 292], [278, 293], [278, 294], [278, 295], [278, 296], [278, 297], [279, 5], [279, 8], [279, 206], [279, 207], [279, 208], [279, 209], [279, 210], [279, 211], [279, 212], [279, 213], [279, 214], [279, 215], [279, 216], [279, 217], [279, 218], [279, 219], [279, 220], [279, 221], [279, 222], [279, 223], [279, 224], [279, 225], [279, 226], [279, 227], [279, 228], [279, 229], [279, 230], [279, 231], [279, 232], [279, 233], [279, 234], [279, 235], [279, 236], [279, 237], [279, 238], [279, 239], [279, 240], [279, 241], [279, 242], [279, 243], [279, 244], [279, 245], [279, 246], [279, 247], [279, 248], [279, 249], [279, 250], [279, 251], [279, 252], [279, 253], [279, 254], [279, 255], [279, 256], [279, 257], [279, 258], [279, 259], [279, 260], [279, 261], [279, 262], [279, 263], [279, 264], [279, 265], [279, 266], [279, 267], [279, 268], [279, 269], [279, 270], [279, 271], [279, 272], [279, 273], [279, 274], [279, 275], [279, 276], [279, 277], [279, 278], [279, 279], [279, 280], [279, 281], [279, 282], [279, 283], [279, 284], [279, 285], [279, 286], [279, 287], [279, 288], [279, 289], [279, 290], [279, 291], [279, 292], [279, 293], [279, 294], [279, 295], [279, 296], [279, 297], [280, 206], [280, 207], [280, 208], [280, 209], [280, 210], [280, 211], [280, 212], [280, 213], [280, 214], [280, 215], [280, 216], [280, 217], [280, 218], [280, 219], [280, 220], [280, 221], [280, 222], [280, 223], [280, 224], [280, 225], [280, 226], [280, 227], [280, 228], [280, 229], [280, 230], [280, 231], [280, 232], [280, 233], [280, 234], [280, 235], [280, 236], [280, 237], [280, 238], [280, 239], [280, 240], [280, 241], [280, 242], [280, 243], [280, 244], [280, 245], [280, 246], [280, 247], [280, 248], [280, 249], [280, 250], [280, 251], [280, 252], [280, 253], [280, 254], [280, 255], [280, 256], [280, 257], [280, 258], [280, 259], [280, 260], [280, 261], [280, 262], [280, 263], [280, 264], [280, 265], [280, 266], [280, 267], [280, 268], [280, 269], [280, 270], [280, 271], [280, 272], [280, 273], [280, 274], [280, 275], [280, 276], [280, 277], [280, 278], [280, 279], [280, 280], [280, 281], [280, 282], [280, 283], [280, 284], [280, 285], [280, 286], [280, 287], [280, 288], [280, 289], [280, 290], [280, 291], [280, 292], [280, 293], [280, 294], [280, 295], [280, 296], [280, 297], [281, 8], [281, 206], [281, 207], [281, 208], [281, 209], [281, 210], [281, 211], [281, 212], [281, 213], [281, 214], [281, 215], [281, 216], [281, 217], [281, 218], [281, 219], [281, 220], [281, 221], [281, 222], [281, 223], [281, 224], [281, 225], [281, 226], [281, 227], [281, 228], [281, 229], [281, 230], [281, 231], [281, 232], [281, 233], [281, 234], [281, 235], [281, 236], [281, 237], [281, 238], [281, 239], [281, 240], [281, 241], [281, 242], [281, 243], [281, 244], [281, 245], [281, 246], [281, 247], [281, 248], [281, 249], [281, 250], [281, 251], [281, 252], [281, 253], [281, 254], [281, 255], [281, 256], [281, 257], [281, 258], [281, 259], [281, 260], [281, 261], [281, 262], [281, 263], [281, 264], [281, 265], [281, 266], [281, 267], [281, 268], [281, 269], [281, 270], [281, 271], [281, 272], [281, 273], [281, 274], [281, 275], [281, 276], [281, 277], [281, 278], [281, 279], [281, 280], [281, 281], [281, 282], [281, 283], [281, 284], [281, 285], [281, 286], [281, 287], [281, 288], [281, 289], [281, 290], [281, 291], [281, 292], [281, 293], [281, 294], [281, 295], [281, 296], [281, 297], [282, 206], [282, 207], [282, 208], [282, 209], [282, 210], [282, 211], [282, 212], [282, 213], [282, 214], [282, 215], [282, 216], [282, 217], [282, 218], [282, 219], [282, 220], [282, 221], [282, 222], [282, 223], [282, 224], [282, 225], [282, 226], [282, 227], [282, 228], [282, 229], [282, 230], [282, 231], [282, 232], [282, 233], [282, 234], [282, 235], [282, 236], [282, 237], [282, 238], [282, 239], [282, 240], [282, 241], [282, 242], [282, 243], [282, 244], [282, 245], [282, 246], [282, 247], [282, 248], [282, 249], [282, 250], [282, 251], [282, 252], [282, 253], [282, 254], [282, 255], [282, 256], [282, 257], [282, 258], [282, 259], [282, 260], [282, 261], [282, 262], [282, 263], [282, 264], [282, 265], [282, 266], [282, 267], [282, 268], [282, 269], [282, 270], [282, 271], [282, 272], [282, 273], [282, 274], [282, 275], [282, 276], [282, 277], [282, 278], [282, 279], [282, 280], [282, 281], [282, 282], [282, 283], [282, 284], [282, 285], [282, 286], [282, 287], [282, 288], [282, 289], [282, 290], [282, 291], [282, 292], [282, 293], [282, 294], [282, 295], [282, 296], [282, 297], [283, 5], [283, 8], [283, 206], [283, 207], [283, 208], [283, 209], [283, 210], [283, 211], [283, 212], [283, 213], [283, 214], [283, 215], [283, 216], [283, 217], [283, 218], [283, 219], [283, 220], [283, 221], [283, 222], [283, 223], [283, 224], [283, 225], [283, 226], [283, 227], [283, 228], [283, 229], [283, 230], [283, 231], [283, 232], [283, 233], [283, 234], [283, 235], [283, 236], [283, 237], [283, 238], [283, 239], [283, 240], [283, 241], [283, 242], [283, 243], [283, 244], [283, 245], [283, 246], [283, 247], [283, 248], [283, 249], [283, 250], [283, 251], [283, 252], [283, 253], [283, 254], [283, 255], [283, 256], [283, 257], [283, 258], [283, 259], [283, 260], [283, 261], [283, 262], [283, 263], [283, 264], [283, 265], [283, 266], [283, 267], [283, 268], [283, 269], [283, 270], [283, 271], [283, 272], [283, 273], [283, 274], [283, 275], [283, 276], [283, 277], [283, 278], [283, 279], [283, 280], [283, 281], [283, 282], [283, 283], [283, 284], [283, 285], [283, 286], [283, 287], [283, 288], [283, 289], [283, 290], [283, 291], [283, 292], [283, 293], [283, 294], [283, 295], [283, 296], [283, 297], [284, 206], [284, 207], [284, 208], [284, 209], [284, 210], [284, 211], [284, 212], [284, 213], [284, 214], [284, 215], [284, 216], [284, 217], [284, 218], [284, 219], [284, 220], [284, 221], [284, 222], [284, 223], [284, 224], [284, 225], [284, 226], [284, 227], [284, 228], [284, 229], [284, 230], [284, 231], [284, 232], [284, 233], [284, 234], [284, 235], [284, 236], [284, 237], [284, 238], [284, 239], [284, 240], [284, 241], [284, 242], [284, 243], [284, 244], [284, 245], [284, 246], [284, 247], [284, 248], [284, 249], [284, 250], [284, 251], [284, 252], [284, 253], [284, 254], [284, 255], [284, 256], [284, 257], [284, 258], [284, 259], [284, 260], [284, 261], [284, 262], [284, 263], [284, 264], [284, 265], [284, 266], [284, 267], [284, 268], [284, 269], [284, 270], [284, 271], [284, 272], [284, 273], [284, 274], [284, 275], [284, 276], [284, 277], [284, 278], [284, 279], [284, 280], [284, 281], [284, 282], [284, 283], [284, 284], [284, 285], [284, 286], [284, 287], [284, 288], [284, 289], [284, 290], [284, 291], [284, 292], [284, 293], [284, 294], [284, 295], [284, 296], [284, 297], [285, 7], [285, 8], [285, 9], [285, 10], [285, 11], [285, 12], [285, 13], [285, 14], [285, 15], [285, 16], [285, 17], [285, 206], [285, 207], [285, 208], [285, 209], [285, 210], [285, 211], [285, 212], [285, 213], [285, 214], [285, 215], [285, 216], [285, 217], [285, 218], [285, 219], [285, 220], [285, 221], [285, 222], [285, 223], [285, 224], [285, 225], [285, 226], [285, 227], [285, 228], [285, 229], [285, 230], [285, 231], [285, 232], [285, 233], [285, 234], [285, 235], [285, 236], [285, 237], [285, 238], [285, 239], [285, 240], [285, 241], [285, 242], [285, 243], [285, 244], [285, 245], [285, 246], [285, 247], [285, 248], [285, 249], [285, 250], [285, 251], [285, 252], [285, 253], [285, 254], [285, 255], [285, 256], [285, 257], [285, 258], [285, 259], [285, 260], [285, 261], [285, 262], [285, 263], [285, 264], [285, 265], [285, 266], [285, 267], [285, 268], [285, 269], [285, 270], [285, 271], [285, 272], [285, 273], [285, 274], [285, 275], [285, 276], [285, 277], [285, 278], [285, 279], [285, 280], [285, 281], [285, 282], [285, 283], [285, 284], [285, 285], [285, 286], [285, 287], [285, 288], [285, 289], [285, 290], [285, 291], [285, 292], [285, 293], [285, 294], [285, 295], [285, 296], [285, 297], [286, 8], [286, 9], [286, 10], [286, 11], [286, 12], [286, 13], [286, 14], [286, 15], [286, 16], [286, 17], [286, 206], [286, 207], [286, 208], [286, 209], [286, 210], [286, 211], [286, 212], [286, 213], [286, 214], [286, 215], [286, 216], [286, 217], [286, 218], [286, 219], [286, 220], [286, 221], [286, 222], [286, 223], [286, 224], [286, 225], [286, 226], [286, 227], [286, 228], [286, 229], [286, 230], [286, 231], [286, 232], [286, 233], [286, 234], [286, 235], [286, 236], [286, 237], [286, 238], [286, 239], [286, 240], [286, 241], [286, 242], [286, 243], [286, 244], [286, 245], [286, 246], [286, 247], [286, 248], [286, 249], [286, 250], [286, 251], [286, 252], [286, 253], [286, 254], [286, 255], [286, 256], [286, 257], [286, 258], [286, 259], [286, 260], [286, 261], [286, 262], [286, 263], [286, 264], [286, 265], [286, 266], [286, 267], [286, 268], [286, 269], [286, 270], [286, 271], [286, 272], [286, 273], [286, 274], [286, 275], [286, 276], [286, 277], [286, 278], [286, 279], [286, 280], [286, 281], [286, 282], [286, 283], [286, 284], [286, 285], [286, 286], [286, 287], [286, 288], [286, 289], [286, 290], [286, 291], [286, 292], [286, 293], [286, 294], [286, 295], [286, 296], [286, 297], [287, 8], [287, 9], [287, 10], [287, 11], [287, 12], [287, 13], [287, 14], [287, 15], [287, 16], [287, 17], [287, 206], [287, 207], [287, 208], [287, 209], [287, 210], [287, 211], [287, 212], [287, 213], [287, 214], [287, 215], [287, 216], [287, 217], [287, 218], [287, 219], [287, 220], [287, 221], [287, 222], [287, 223], [287, 224], [287, 225], [287, 226], [287, 227], [287, 228], [287, 229], [287, 230], [287, 231], [287, 232], [287, 233], [287, 234], [287, 235], [287, 236], [287, 237], [287, 238], [287, 239], [287, 240], [287, 241], [287, 242], [287, 243], [287, 244], [287, 245], [287, 246], [287, 247], [287, 248], [287, 249], [287, 250], [287, 251], [287, 252], [287, 253], [287, 254], [287, 255], [287, 256], [287, 257], [287, 258], [287, 259], [287, 260], [287, 261], [287, 262], [287, 263], [287, 264], [287, 265], [287, 266], [287, 267], [287, 268], [287, 269], [287, 270], [287, 271], [287, 272], [287, 273], [287, 274], [287, 275], [287, 276], [287, 277], [287, 278], [287, 279], [287, 280], [287, 281], [287, 282], [287, 283], [287, 284], [287, 285], [287, 286], [287, 287], [287, 288], [287, 289], [287, 290], [287, 291], [287, 292], [287, 293], [287, 294], [287, 295], [287, 296], [287, 297], [288, 8], [288, 9], [288, 10], [288, 11], [288, 12], [288, 13], [288, 14], [288, 15], [288, 16], [288, 17], [288, 206], [288, 207], [288, 208], [288, 209], [288, 210], [288, 211], [288, 212], [288, 213], [288, 214], [288, 215], [288, 216], [288, 217], [288, 218], [288, 219], [288, 220], [288, 221], [288, 222], [288, 223], [288, 224], [288, 225], [288, 226], [288, 227], [288, 228], [288, 229], [288, 230], [288, 231], [288, 232], [288, 233], [288, 234], [288, 235], [288, 236], [288, 237], [288, 238], [288, 239], [288, 240], [288, 241], [288, 242], [288, 243], [288, 244], [288, 245], [288, 246], [288, 247], [288, 248], [288, 249], [288, 250], [288, 251], [288, 252], [288, 253], [288, 254], [288, 255], [288, 256], [288, 257], [288, 258], [288, 259], [288, 260], [288, 261], [288, 262], [288, 263], [288, 264], [288, 265], [288, 266], [288, 267], [288, 268], [288, 269], [288, 270], [288, 271], [288, 272], [288, 273], [288, 274], [288, 275], [288, 276], [288, 277], [288, 278], [288, 279], [288, 280], [288, 281], [288, 282], [288, 283], [288, 284], [288, 285], [288, 286], [288, 287], [288, 288], [288, 289], [288, 290], [288, 291], [288, 292], [288, 293], [288, 294], [288, 295], [288, 296], [288, 297], [288, 485], [289, 8], [289, 9], [289, 10], [289, 11], [289, 12], [289, 13], [289, 14], [289, 15], [289, 16], [289, 17], [289, 206], [289, 207], [289, 208], [289, 209], [289, 210], [289, 211], [289, 212], [289, 213], [289, 214], [289, 215], [289, 216], [289, 217], [289, 218], [289, 219], [289, 220], [289, 221], [289, 222], [289, 223], [289, 224], [289, 225], [289, 226], [289, 227], [289, 228], [289, 229], [289, 230], [289, 231], [289, 232], [289, 233], [289, 234], [289, 235], [289, 236], [289, 237], [289, 238], [289, 239], [289, 240], [289, 241], [289, 242], [289, 243], [289, 244], [289, 245], [289, 246], [289, 247], [289, 248], [289, 249], [289, 250], [289, 251], [289, 252], [289, 253], [289, 254], [289, 255], [289, 256], [289, 257], [289, 258], [289, 259], [289, 260], [289, 261], [289, 262], [289, 263], [289, 264], [289, 265], [289, 266], [289, 267], [289, 268], [289, 269], [289, 270], [289, 271], [289, 272], [289, 273], [289, 274], [289, 275], [289, 276], [289, 277], [289, 278], [289, 279], [289, 280], [289, 281], [289, 282], [289, 283], [289, 284], [289, 285], [289, 286], [289, 287], [289, 288], [289, 289], [289, 290], [289, 291], [289, 292], [289, 293], [289, 294], [289, 295], [289, 296], [289, 297], [289, 487], [290, 8], [290, 9], [290, 10], [290, 11], [290, 12], [290, 13], [290, 14], [290, 15], [290, 16], [290, 17], [290, 206], [290, 207], [290, 208], [290, 209], [290, 210], [290, 211], [290, 212], [290, 213], [290, 214], [290, 215], [290, 216], [290, 217], [290, 218], [290, 219], [290, 220], [290, 221], [290, 222], [290, 223], [290, 224], [290, 225], [290, 226], [290, 227], [290, 228], [290, 229], [290, 230], [290, 231], [290, 232], [290, 233], [290, 234], [290, 235], [290, 236], [290, 237], [290, 238], [290, 239], [290, 240], [290, 241], [290, 242], [290, 243], [290, 244], [290, 245], [290, 246], [290, 247], [290, 248], [290, 249], [290, 250], [290, 251], [290, 252], [290, 253], [290, 254], [290, 255], [290, 256], [290, 257], [290, 258], [290, 259], [290, 260], [290, 261], [290, 262], [290, 263], [290, 264], [290, 265], [290, 266], [290, 267], [290, 268], [290, 269], [290, 270], [290, 271], [290, 272], [290, 273], [290, 274], [290, 275], [290, 276], [290, 277], [290, 278], [290, 279], [290, 280], [290, 281], [290, 282], [290, 283], [290, 284], [290, 285], [290, 286], [290, 287], [290, 288], [290, 289], [290, 290], [290, 291], [290, 292], [290, 293], [290, 294], [290, 295], [290, 296], [290, 297], [290, 485], [290, 488], [291, 8], [291, 9], [291, 10], [291, 11], [291, 12], [291, 13], [291, 14], [291, 15], [291, 16], [291, 17], [291, 18], [291, 206], [291, 207], [291, 208], [291, 209], [291, 210], [291, 211], [291, 212], [291, 213], [291, 214], [291, 215], [291, 216], [291, 217], [291, 218], [291, 219], [291, 220], [291, 221], [291, 222], [291, 223], [291, 224], [291, 225], [291, 226], [291, 227], [291, 228], [291, 229], [291, 230], [291, 231], [291, 232], [291, 233], [291, 234], [291, 235], [291, 236], [291, 237], [291, 238], [291, 239], [291, 240], [291, 241], [291, 242], [291, 243], [291, 244], [291, 245], [291, 246], [291, 247], [291, 248], [291, 249], [291, 250], [291, 251], [291, 252], [291, 253], [291, 254], [291, 255], [291, 256], [291, 257], [291, 258], [291, 259], [291, 260], [291, 261], [291, 262], [291, 263], [291, 264], [291, 265], [291, 266], [291, 267], [291, 268], [291, 269], [291, 270], [291, 271], [291, 272], [291, 273], [291, 274], [291, 275], [291, 276], [291, 277], [291, 278], [291, 279], [291, 280], [291, 281], [291, 282], [291, 283], [291, 284], [291, 285], [291, 286], [291, 287], [291, 288], [291, 289], [291, 290], [291, 291], [291, 292], [291, 293], [291, 294], [291, 295], [291, 296], [291, 297], [291, 486], [292, 8], [292, 9], [292, 10], [292, 11], [292, 12], [292, 13], [292, 14], [292, 15], [292, 16], [292, 17], [292, 206], [292, 207], [292, 208], [292, 209], [292, 210], [292, 211], [292, 212], [292, 213], [292, 214], [292, 215], [292, 216], [292, 217], [292, 218], [292, 219], [292, 220], [292, 221], [292, 222], [292, 223], [292, 224], [292, 225], [292, 226], [292, 227], [292, 228], [292, 229], [292, 230], [292, 231], [292, 232], [292, 233], [292, 234], [292, 235], [292, 236], [292, 237], [292, 238], [292, 239], [292, 240], [292, 241], [292, 242], [292, 243], [292, 244], [292, 245], [292, 246], [292, 247], [292, 248], [292, 249], [292, 250], [292, 251], [292, 252], [292, 253], [292, 254], [292, 255], [292, 256], [292, 257], [292, 258], [292, 259], [292, 260], [292, 261], [292, 262], [292, 263], [292, 264], [292, 265], [292, 266], [292, 267], [292, 268], [292, 269], [292, 270], [292, 271], [292, 272], [292, 273], [292, 274], [292, 275], [292, 276], [292, 277], [292, 278], [292, 279], [292, 280], [292, 281], [292, 282], [292, 283], [292, 284], [292, 285], [292, 286], [292, 287], [292, 288], [292, 289], [292, 290], [292, 291], [292, 292], [292, 293], [292, 294], [292, 295], [292, 296], [292, 297], [292, 485], [292, 488], [293, 8], [293, 9], [293, 10], [293, 11], [293, 12], [293, 13], [293, 14], [293, 15], [293, 16], [293, 17], [293, 206], [293, 207], [293, 208], [293, 209], [293, 210], [293, 211], [293, 212], [293, 213], [293, 214], [293, 215], [293, 216], [293, 217], [293, 218], [293, 219], [293, 220], [293, 221], [293, 222], [293, 223], [293, 224], [293, 225], [293, 226], [293, 227], [293, 228], [293, 229], [293, 230], [293, 231], [293, 232], [293, 233], [293, 234], [293, 235], [293, 236], [293, 237], [293, 238], [293, 239], [293, 240], [293, 241], [293, 242], [293, 243], [293, 244], [293, 245], [293, 246], [293, 247], [293, 248], [293, 249], [293, 250], [293, 251], [293, 252], [293, 253], [293, 254], [293, 255], [293, 256], [293, 257], [293, 258], [293, 259], [293, 260], [293, 261], [293, 262], [293, 263], [293, 264], [293, 265], [293, 266], [293, 267], [293, 268], [293, 269], [293, 270], [293, 271], [293, 272], [293, 273], [293, 274], [293, 275], [293, 276], [293, 277], [293, 278], [293, 279], [293, 280], [293, 281], [293, 282], [293, 283], [293, 284], [293, 285], [293, 286], [293, 287], [293, 288], [293, 289], [293, 290], [293, 291], [293, 292], [293, 293], [293, 294], [293, 295], [293, 296], [293, 297], [293, 486], [293, 491], [294, 8], [294, 9], [294, 10], [294, 11], [294, 12], [294, 13], [294, 14], [294, 15], [294, 16], [294, 17], [294, 206], [294, 207], [294, 208], [294, 209], [294, 210], [294, 211], [294, 212], [294, 213], [294, 214], [294, 215], [294, 216], [294, 217], [294, 218], [294, 219], [294, 220], [294, 221], [294, 222], [294, 223], [294, 224], [294, 225], [294, 226], [294, 227], [294, 228], [294, 229], [294, 230], [294, 231], [294, 232], [294, 233], [294, 234], [294, 235], [294, 236], [294, 237], [294, 238], [294, 239], [294, 240], [294, 241], [294, 242], [294, 243], [294, 244], [294, 245], [294, 246], [294, 247], [294, 248], [294, 249], [294, 250], [294, 251], [294, 252], [294, 253], [294, 254], [294, 255], [294, 256], [294, 257], [294, 258], [294, 259], [294, 260], [294, 261], [294, 262], [294, 263], [294, 264], [294, 265], [294, 266], [294, 267], [294, 268], [294, 269], [294, 270], [294, 271], [294, 272], [294, 273], [294, 274], [294, 275], [294, 276], [294, 277], [294, 278], [294, 279], [294, 280], [294, 281], [294, 282], [294, 283], [294, 284], [294, 285], [294, 286], [294, 287], [294, 288], [294, 289], [294, 290], [294, 291], [294, 292], [294, 293], [294, 294], [294, 295], [294, 296], [294, 297], [294, 488], [295, 8], [295, 9], [295, 10], [295, 11], [295, 12], [295, 13], [295, 14], [295, 15], [295, 16], [295, 17], [295, 206], [295, 207], [295, 208], [295, 209], [295, 210], [295, 211], [295, 212], [295, 213], [295, 214], [295, 215], [295, 216], [295, 217], [295, 218], [295, 219], [295, 220], [295, 221], [295, 222], [295, 223], [295, 224], [295, 225], [295, 226], [295, 227], [295, 228], [295, 229], [295, 230], [295, 231], [295, 232], [295, 233], [295, 234], [295, 235], [295, 236], [295, 237], [295, 238], [295, 239], [295, 240], [295, 241], [295, 242], [295, 243], [295, 244], [295, 245], [295, 246], [295, 247], [295, 248], [295, 249], [295, 250], [295, 251], [295, 252], [295, 253], [295, 254], [295, 255], [295, 256], [295, 257], [295, 258], [295, 259], [295, 260], [295, 261], [295, 262], [295, 263], [295, 264], [295, 265], [295, 266], [295, 267], [295, 268], [295, 269], [295, 270], [295, 271], [295, 272], [295, 273], [295, 274], [295, 275], [295, 276], [295, 277], [295, 278], [295, 279], [295, 280], [295, 281], [295, 282], [295, 283], [295, 284], [295, 285], [295, 286], [295, 287], [295, 288], [295, 289], [295, 290], [295, 291], [295, 292], [295, 293], [295, 294], [295, 295], [295, 296], [295, 297], [295, 486], [295, 490], [295, 491], [296, 8], [296, 9], [296, 10], [296, 11], [296, 12], [296, 13], [296, 14], [296, 15], [296, 16], [296, 18], [296, 206], [296, 207], [296, 208], [296, 209], [296, 210], [296, 211], [296, 212], [296, 213], [296, 214], [296, 215], [296, 216], [296, 217], [296, 218], [296, 219], [296, 220], [296, 221], [296, 222], [296, 223], [296, 224], [296, 225], [296, 226], [296, 227], [296, 228], [296, 229], [296, 230], [296, 231], [296, 232], [296, 233], [296, 234], [296, 235], [296, 236], [296, 237], [296, 238], [296, 239], [296, 240], [296, 241], [296, 242], [296, 243], [296, 244], [296, 245], [296, 246], [296, 247], [296, 248], [296, 249], [296, 250], [296, 251], [296, 252], [296, 253], [296, 254], [296, 255], [296, 256], [296, 257], [296, 258], [296, 259], [296, 260], [296, 261], [296, 262], [296, 263], [296, 264], [296, 265], [296, 266], [296, 267], [296, 268], [296, 269], [296, 270], [296, 271], [296, 272], [296, 273], [296, 274], [296, 275], [296, 276], [296, 277], [296, 278], [296, 279], [296, 280], [296, 281], [296, 282], [296, 283], [296, 284], [296, 285], [296, 286], [296, 287], [296, 288], [296, 289], [296, 290], [296, 291], [296, 292], [296, 293], [296, 294], [296, 295], [296, 296], [296, 297], [296, 485], [296, 487], [296, 488], [297, 8], [297, 9], [297, 10], [297, 11], [297, 12], [297, 13], [297, 14], [297, 15], [297, 16], [297, 17], [297, 206], [297, 207], [297, 208], [297, 209], [297, 210], [297, 211], [297, 212], [297, 213], [297, 214], [297, 215], [297, 216], [297, 217], [297, 218], [297, 219], [297, 220], [297, 221], [297, 222], [297, 223], [297, 224], [297, 225], [297, 226], [297, 227], [297, 228], [297, 229], [297, 230], [297, 231], [297, 232], [297, 233], [297, 234], [297, 235], [297, 236], [297, 237], [297, 238], [297, 239], [297, 240], [297, 241], [297, 242], [297, 243], [297, 244], [297, 245], [297, 246], [297, 247], [297, 248], [297, 249], [297, 250], [297, 251], [297, 252], [297, 253], [297, 254], [297, 255], [297, 256], [297, 257], [297, 258], [297, 259], [297, 260], [297, 261], [297, 262], [297, 263], [297, 264], [297, 265], [297, 266], [297, 267], [297, 268], [297, 269], [297, 270], [297, 271], [297, 272], [297, 273], [297, 274], [297, 275], [297, 276], [297, 277], [297, 278], [297, 279], [297, 280], [297, 281], [297, 282], [297, 283], [297, 284], [297, 285], [297, 286], [297, 287], [297, 288], [297, 289], [297, 290], [297, 291], [297, 292], [297, 293], [297, 294], [297, 295], [297, 296], [297, 297], [297, 490], [297, 491], [298, 8], [298, 9], [298, 10], [298, 11], [298, 12], [298, 13], [298, 14], [298, 15], [298, 16], [298, 17], [298, 18], [298, 206], [298, 207], [298, 208], [298, 209], [298, 210], [298, 211], [298, 212], [298, 213], [298, 214], [298, 215], [298, 216], [298, 217], [298, 218], [298, 219], [298, 220], [298, 221], [298, 222], [298, 223], [298, 224], [298, 225], [298, 226], [298, 227], [298, 228], [298, 229], [298, 230], [298, 231], [298, 232], [298, 233], [298, 234], [298, 235], [298, 236], [298, 237], [298, 238], [298, 239], [298, 240], [298, 241], [298, 242], [298, 243], [298, 244], [298, 245], [298, 246], [298, 247], [298, 248], [298, 249], [298, 250], [298, 251], [298, 252], [298, 253], [298, 254], [298, 255], [298, 256], [298, 257], [298, 258], [298, 259], [298, 260], [298, 261], [298, 262], [298, 263], [298, 264], [298, 265], [298, 266], [298, 267], [298, 268], [298, 269], [298, 270], [298, 271], [298, 272], [298, 273], [298, 274], [298, 275], [298, 276], [298, 277], [298, 278], [298, 279], [298, 280], [298, 281], [298, 282], [298, 283], [298, 284], [298, 285], [298, 286], [298, 287], [298, 288], [298, 289], [298, 290], [298, 291], [298, 292], [298, 293], [298, 294], [298, 295], [298, 296], [298, 297], [298, 487], [298, 488], [298, 489], [298, 491], [298, 492], [299, 8], [299, 9], [299, 10], [299, 11], [299, 12], [299, 13], [299, 14], [299, 15], [299, 16], [299, 17], [299, 206], [299, 207], [299, 208], [299, 209], [299, 210], [299, 211], [299, 212], [299, 213], [299, 214], [299, 215], [299, 216], [299, 217], [299, 218], [299, 219], [299, 220], [299, 221], [299, 222], [299, 223], [299, 224], [299, 225], [299, 226], [299, 227], [299, 228], [299, 229], [299, 230], [299, 231], [299, 232], [299, 233], [299, 234], [299, 235], [299, 236], [299, 237], [299, 238], [299, 239], [299, 240], [299, 241], [299, 242], [299, 243], [299, 244], [299, 245], [299, 246], [299, 247], [299, 248], [299, 249], [299, 250], [299, 251], [299, 252], [299, 253], [299, 254], [299, 255], [299, 256], [299, 257], [299, 258], [299, 259], [299, 260], [299, 261], [299, 262], [299, 263], [299, 264], [299, 265], [299, 266], [299, 267], [299, 268], [299, 269], [299, 270], [299, 271], [299, 272], [299, 273], [299, 274], [299, 275], [299, 276], [299, 277], [299, 278], [299, 279], [299, 280], [299, 281], [299, 282], [299, 283], [299, 284], [299, 285], [299, 286], [299, 287], [299, 288], [299, 289], [299, 290], [299, 291], [299, 292], [299, 293], [299, 294], [299, 295], [299, 296], [299, 297], [299, 485], [299, 489], [299, 490], [300, 8], [300, 9], [300, 10], [300, 11], [300, 12], [300, 13], [300, 14], [300, 15], [300, 16], [300, 17], [300, 206], [300, 207], [300, 208], [300, 209], [300, 210], [300, 211], [300, 212], [300, 213], [300, 214], [300, 215], [300, 216], [300, 217], [300, 218], [300, 219], [300, 220], [300, 221], [300, 222], [300, 223], [300, 224], [300, 225], [300, 226], [300, 227], [300, 228], [300, 229], [300, 230], [300, 231], [300, 232], [300, 233], [300, 234], [300, 235], [300, 236], [300, 237], [300, 238], [300, 239], [300, 240], [300, 241], [300, 242], [300, 243], [300, 244], [300, 245], [300, 246], [300, 247], [300, 248], [300, 249], [300, 250], [300, 251], [300, 252], [300, 253], [300, 254], [300, 255], [300, 256], [300, 257], [300, 258], [300, 259], [300, 260], [300, 261], [300, 262], [300, 263], [300, 264], [300, 265], [300, 266], [300, 267], [300, 268], [300, 269], [300, 270], [300, 271], [300, 272], [300, 273], [300, 274], [300, 275], [300, 276], [300, 277], [300, 278], [300, 279], [300, 280], [300, 281], [300, 282], [300, 283], [300, 284], [300, 285], [300, 286], [300, 287], [300, 288], [300, 289], [300, 290], [300, 291], [300, 292], [300, 293], [300, 294], [300, 295], [300, 296], [300, 297], [300, 487], [300, 488], [300, 491], [300, 492], [300, 493], [301, 8], [301, 9], [301, 10], [301, 11], [301, 12], [301, 13], [301, 14], [301, 15], [301, 16], [301, 17], [301, 206], [301, 207], [301, 208], [301, 209], [301, 210], [301, 211], [301, 212], [301, 213], [301, 214], [301, 215], [301, 216], [301, 217], [301, 218], [301, 219], [301, 220], [301, 221], [301, 222], [301, 223], [301, 224], [301, 225], [301, 226], [301, 227], [301, 228], [301, 229], [301, 230], [301, 231], [301, 232], [301, 233], [301, 234], [301, 235], [301, 236], [301, 237], [301, 238], [301, 239], [301, 240], [301, 241], [301, 242], [301, 243], [301, 244], [301, 245], [301, 246], [301, 247], [301, 248], [301, 249], [301, 250], [301, 251], [301, 252], [301, 253], [301, 254], [301, 255], [301, 256], [301, 257], [301, 258], [301, 259], [301, 260], [301, 261], [301, 262], [301, 263], [301, 264], [301, 265], [301, 266], [301, 267], [301, 268], [301, 269], [301, 270], [301, 271], [301, 272], [301, 273], [301, 274], [301, 275], [301, 276], [301, 277], [301, 278], [301, 279], [301, 280], [301, 281], [301, 282], [301, 283], [301, 284], [301, 285], [301, 286], [301, 287], [301, 288], [301, 289], [301, 290], [301, 291], [301, 292], [301, 293], [301, 294], [301, 295], [301, 296], [301, 297], [301, 486], [301, 489], [301, 490], [301, 494], [302, 8], [302, 9], [302, 10], [302, 11], [302, 12], [302, 13], [302, 14], [302, 15], [302, 16], [302, 17], [302, 18], [302, 206], [302, 207], [302, 208], [302, 209], [302, 210], [302, 211], [302, 212], [302, 213], [302, 214], [302, 215], [302, 216], [302, 217], [302, 218], [302, 219], [302, 220], [302, 221], [302, 222], [302, 223], [302, 224], [302, 225], [302, 226], [302, 227], [302, 228], [302, 229], [302, 230], [302, 231], [302, 232], [302, 233], [302, 234], [302, 235], [302, 236], [302, 237], [302, 238], [302, 239], [302, 240], [302, 241], [302, 242], [302, 243], [302, 244], [302, 245], [302, 246], [302, 247], [302, 248], [302, 249], [302, 250], [302, 251], [302, 252], [302, 253], [302, 254], [302, 255], [302, 256], [302, 257], [302, 258], [302, 259], [302, 260], [302, 261], [302, 262], [302, 263], [302, 264], [302, 265], [302, 266], [302, 267], [302, 268], [302, 269], [302, 270], [302, 271], [302, 272], [302, 273], [302, 274], [302, 275], [302, 276], [302, 277], [302, 278], [302, 279], [302, 280], [302, 281], [302, 282], [302, 283], [302, 284], [302, 285], [302, 286], [302, 287], [302, 288], [302, 289], [302, 290], [302, 291], [302, 292], [302, 293], [302, 294], [302, 295], [302, 296], [302, 297], [302, 487], [302, 488], [302, 491], [302, 492], [302, 493], [303, 8], [303, 9], [303, 10], [303, 11], [303, 12], [303, 13], [303, 14], [303, 15], [303, 16], [303, 17], [303, 206], [303, 207], [303, 208], [303, 209], [303, 210], [303, 211], [303, 212], [303, 213], [303, 214], [303, 215], [303, 216], [303, 217], [303, 218], [303, 219], [303, 220], [303, 221], [303, 222], [303, 223], [303, 224], [303, 225], [303, 226], [303, 227], [303, 228], [303, 229], [303, 230], [303, 231], [303, 232], [303, 233], [303, 234], [303, 235], [303, 236], [303, 237], [303, 238], [303, 239], [303, 240], [303, 241], [303, 242], [303, 243], [303, 244], [303, 245], [303, 246], [303, 247], [303, 248], [303, 249], [303, 250], [303, 251], [303, 252], [303, 253], [303, 254], [303, 255], [303, 256], [303, 257], [303, 258], [303, 259], [303, 260], [303, 261], [303, 262], [303, 263], [303, 264], [303, 265], [303, 266], [303, 267], [303, 268], [303, 269], [303, 270], [303, 271], [303, 272], [303, 273], [303, 274], [303, 275], [303, 276], [303, 277], [303, 278], [303, 279], [303, 280], [303, 281], [303, 282], [303, 283], [303, 284], [303, 285], [303, 286], [303, 287], [303, 288], [303, 289], [303, 290], [303, 291], [303, 292], [303, 293], [303, 294], [303, 295], [303, 296], [303, 297], [303, 485], [303, 486], [303, 489], [303, 490], [303, 494], [303, 495], [304, 8], [304, 9], [304, 10], [304, 11], [304, 12], [304, 13], [304, 14], [304, 15], [304, 16], [304, 17], [304, 206], [304, 207], [304, 208], [304, 209], [304, 210], [304, 211], [304, 212], [304, 213], [304, 214], [304, 215], [304, 216], [304, 217], [304, 218], [304, 219], [304, 220], [304, 221], [304, 222], [304, 223], [304, 224], [304, 225], [304, 226], [304, 227], [304, 228], [304, 229], [304, 230], [304, 231], [304, 232], [304, 233], [304, 234], [304, 235], [304, 236], [304, 237], [304, 238], [304, 239], [304, 240], [304, 241], [304, 242], [304, 243], [304, 244], [304, 245], [304, 246], [304, 247], [304, 248], [304, 249], [304, 250], [304, 251], [304, 252], [304, 253], [304, 254], [304, 255], [304, 256], [304, 257], [304, 258], [304, 259], [304, 260], [304, 261], [304, 262], [304, 263], [304, 264], [304, 265], [304, 266], [304, 267], [304, 268], [304, 269], [304, 270], [304, 271], [304, 272], [304, 273], [304, 274], [304, 275], [304, 276], [304, 277], [304, 278], [304, 279], [304, 280], [304, 281], [304, 282], [304, 283], [304, 284], [304, 285], [304, 286], [304, 287], [304, 288], [304, 289], [304, 290], [304, 291], [304, 292], [304, 293], [304, 294], [304, 295], [304, 296], [304, 297], [304, 487], [304, 488], [304, 491], [304, 492], [305, 8], [305, 9], [305, 10], [305, 11], [305, 12], [305, 13], [305, 14], [305, 15], [305, 16], [305, 17], [305, 206], [305, 207], [305, 208], [305, 209], [305, 210], [305, 211], [305, 212], [305, 213], [305, 214], [305, 215], [305, 216], [305, 217], [305, 218], [305, 219], [305, 220], [305, 221], [305, 222], [305, 223], [305, 224], [305, 225], [305, 226], [305, 227], [305, 228], [305, 229], [305, 230], [305, 231], [305, 232], [305, 233], [305, 234], [305, 235], [305, 236], [305, 237], [305, 238], [305, 239], [305, 240], [305, 241], [305, 242], [305, 243], [305, 244], [305, 245], [305, 246], [305, 247], [305, 248], [305, 249], [305, 250], [305, 251], [305, 252], [305, 253], [305, 254], [305, 255], [305, 256], [305, 257], [305, 258], [305, 259], [305, 260], [305, 261], [305, 262], [305, 263], [305, 264], [305, 265], [305, 266], [305, 267], [305, 268], [305, 269], [305, 270], [305, 271], [305, 272], [305, 273], [305, 274], [305, 275], [305, 276], [305, 277], [305, 278], [305, 279], [305, 280], [305, 281], [305, 282], [305, 283], [305, 284], [305, 285], [305, 286], [305, 287], [305, 288], [305, 289], [305, 290], [305, 291], [305, 292], [305, 293], [305, 294], [305, 295], [305, 296], [305, 297], [305, 489], [305, 490], [305, 493], [305, 494], [305, 495], [306, 8], [306, 9], [306, 10], [306, 11], [306, 12], [306, 13], [306, 14], [306, 15], [306, 16], [306, 17], [306, 206], [306, 207], [306, 208], [306, 209], [306, 210], [306, 211], [306, 212], [306, 213], [306, 214], [306, 215], [306, 216], [306, 217], [306, 218], [306, 219], [306, 220], [306, 221], [306, 222], [306, 223], [306, 224], [306, 225], [306, 226], [306, 227], [306, 228], [306, 229], [306, 230], [306, 231], [306, 232], [306, 233], [306, 234], [306, 235], [306, 236], [306, 237], [306, 238], [306, 239], [306, 240], [306, 241], [306, 242], [306, 243], [306, 244], [306, 245], [306, 246], [306, 247], [306, 248], [306, 249], [306, 250], [306, 251], [306, 252], [306, 253], [306, 254], [306, 255], [306, 256], [306, 257], [306, 258], [306, 259], [306, 260], [306, 261], [306, 262], [306, 263], [306, 264], [306, 265], [306, 266], [306, 267], [306, 268], [306, 269], [306, 270], [306, 271], [306, 272], [306, 273], [306, 274], [306, 275], [306, 276], [306, 277], [306, 278], [306, 279], [306, 280], [306, 281], [306, 282], [306, 283], [306, 284], [306, 285], [306, 286], [306, 287], [306, 288], [306, 289], [306, 290], [306, 291], [306, 292], [306, 293], [306, 294], [306, 295], [306, 296], [306, 297], [306, 487], [306, 488], [306, 491], [306, 492], [306, 496], [307, 9], [307, 10], [307, 11], [307, 12], [307, 13], [307, 14], [307, 15], [307, 16], [307, 17], [307, 206], [307, 207], [307, 208], [307, 209], [307, 210], [307, 211], [307, 212], [307, 213], [307, 214], [307, 215], [307, 216], [307, 217], [307, 218], [307, 219], [307, 220], [307, 221], [307, 222], [307, 223], [307, 224], [307, 225], [307, 226], [307, 227], [307, 228], [307, 229], [307, 230], [307, 231], [307, 232], [307, 233], [307, 234], [307, 235], [307, 236], [307, 237], [307, 238], [307, 239], [307, 240], [307, 241], [307, 242], [307, 243], [307, 244], [307, 245], [307, 246], [307, 247], [307, 248], [307, 249], [307, 250], [307, 251], [307, 252], [307, 253], [307, 254], [307, 255], [307, 256], [307, 257], [307, 258], [307, 259], [307, 260], [307, 261], [307, 262], [307, 263], [307, 264], [307, 265], [307, 266], [307, 267], [307, 268], [307, 269], [307, 270], [307, 271], [307, 272], [307, 273], [307, 274], [307, 275], [307, 276], [307, 277], [307, 278], [307, 279], [307, 280], [307, 281], [307, 282], [307, 283], [307, 284], [307, 285], [307, 286], [307, 287], [307, 288], [307, 289], [307, 290], [307, 291], [307, 292], [307, 293], [307, 294], [307, 295], [307, 296], [307, 297], [307, 488], [307, 489], [307, 490], [307, 493], [307, 494], [307, 495], [308, 8], [308, 9], [308, 10], [308, 11], [308, 12], [308, 13], [308, 14], [308, 15], [308, 16], [308, 17], [308, 206], [308, 207], [308, 208], [308, 209], [308, 210], [308, 211], [308, 212], [308, 213], [308, 214], [308, 215], [308, 216], [308, 217], [308, 218], [308, 219], [308, 220], [308, 221], [308, 222], [308, 223], [308, 224], [308, 225], [308, 226], [308, 227], [308, 228], [308, 229], [308, 230], [308, 231], [308, 232], [308, 233], [308, 234], [308, 235], [308, 236], [308, 237], [308, 238], [308, 239], [308, 240], [308, 241], [308, 242], [308, 243], [308, 244], [308, 245], [308, 246], [308, 247], [308, 248], [308, 249], [308, 250], [308, 251], [308, 252], [308, 253], [308, 254], [308, 255], [308, 256], [308, 257], [308, 258], [308, 259], [308, 260], [308, 261], [308, 262], [308, 263], [308, 264], [308, 265], [308, 266], [308, 267], [308, 268], [308, 269], [308, 270], [308, 271], [308, 272], [308, 273], [308, 274], [308, 275], [308, 276], [308, 277], [308, 278], [308, 279], [308, 280], [308, 281], [308, 282], [308, 283], [308, 284], [308, 285], [308, 286], [308, 287], [308, 288], [308, 289], [308, 290], [308, 291], [308, 292], [308, 293], [308, 294], [308, 295], [308, 296], [308, 297], [308, 486], [308, 490], [308, 491], [308, 492], [308, 496], [309, 8], [309, 10], [309, 11], [309, 12], [309, 13], [309, 14], [309, 15], [309, 16], [309, 17], [309, 206], [309, 207], [309, 208], [309, 209], [309, 210], [309, 211], [309, 212], [309, 213], [309, 214], [309, 215], [309, 216], [309, 217], [309, 218], [309, 219], [309, 220], [309, 221], [309, 222], [309, 223], [309, 224], [309, 225], [309, 226], [309, 227], [309, 228], [309, 229], [309, 230], [309, 231], [309, 232], [309, 233], [309, 234], [309, 235], [309, 236], [309, 237], [309, 238], [309, 239], [309, 240], [309, 241], [309, 242], [309, 243], [309, 244], [309, 245], [309, 246], [309, 247], [309, 248], [309, 249], [309, 250], [309, 251], [309, 252], [309, 253], [309, 254], [309, 255], [309, 256], [309, 257], [309, 258], [309, 259], [309, 260], [309, 261], [309, 262], [309, 263], [309, 264], [309, 265], [309, 266], [309, 267], [309, 268], [309, 269], [309, 270], [309, 271], [309, 272], [309, 273], [309, 274], [309, 275], [309, 276], [309, 277], [309, 278], [309, 279], [309, 280], [309, 281], [309, 282], [309, 283], [309, 284], [309, 285], [309, 286], [309, 287], [309, 288], [309, 289], [309, 290], [309, 291], [309, 292], [309, 293], [309, 294], [309, 295], [309, 296], [309, 297], [309, 488], [309, 489], [309, 492], [309, 493], [309, 494], [310, 8], [310, 9], [310, 10], [310, 11], [310, 12], [310, 13], [310, 14], [310, 15], [310, 16], [310, 17], [310, 206], [310, 207], [310, 208], [310, 209], [310, 210], [310, 211], [310, 212], [310, 213], [310, 214], [310, 215], [310, 216], [310, 217], [310, 218], [310, 219], [310, 220], [310, 221], [310, 222], [310, 223], [310, 224], [310, 225], [310, 226], [310, 227], [310, 228], [310, 229], [310, 230], [310, 231], [310, 232], [310, 233], [310, 234], [310, 235], [310, 236], [310, 237], [310, 238], [310, 239], [310, 240], [310, 241], [310, 242], [310, 243], [310, 244], [310, 245], [310, 246], [310, 247], [310, 248], [310, 249], [310, 250], [310, 251], [310, 252], [310, 253], [310, 254], [310, 255], [310, 256], [310, 257], [310, 258], [310, 259], [310, 260], [310, 261], [310, 262], [310, 263], [310, 264], [310, 265], [310, 266], [310, 267], [310, 268], [310, 269], [310, 270], [310, 271], [310, 272], [310, 273], [310, 274], [310, 275], [310, 276], [310, 277], [310, 278], [310, 279], [310, 280], [310, 281], [310, 282], [310, 283], [310, 284], [310, 285], [310, 286], [310, 287], [310, 288], [310, 289], [310, 290], [310, 291], [310, 292], [310, 293], [310, 294], [310, 295], [310, 296], [310, 297], [310, 490], [310, 491], [310, 492], [310, 495], [310, 496], [310, 497], [311, 9], [311, 10], [311, 11], [311, 12], [311, 13], [311, 14], [311, 15], [311, 16], [311, 17], [311, 18], [311, 206], [311, 207], [311, 208], [311, 209], [311, 210], [311, 211], [311, 212], [311, 213], [311, 214], [311, 215], [311, 216], [311, 217], [311, 218], [311, 219], [311, 220], [311, 221], [311, 222], [311, 223], [311, 224], [311, 225], [311, 226], [311, 227], [311, 228], [311, 229], [311, 230], [311, 231], [311, 232], [311, 233], [311, 234], [311, 235], [311, 236], [311, 237], [311, 238], [311, 239], [311, 240], [311, 241], [311, 242], [311, 243], [311, 244], [311, 245], [311, 246], [311, 247], [311, 248], [311, 249], [311, 250], [311, 251], [311, 252], [311, 253], [311, 254], [311, 255], [311, 256], [311, 257], [311, 258], [311, 259], [311, 260], [311, 261], [311, 262], [311, 263], [311, 264], [311, 265], [311, 266], [311, 267], [311, 268], [311, 269], [311, 270], [311, 271], [311, 272], [311, 273], [311, 274], [311, 275], [311, 276], [311, 277], [311, 278], [311, 279], [311, 280], [311, 281], [311, 282], [311, 283], [311, 284], [311, 285], [311, 286], [311, 287], [311, 288], [311, 289], [311, 290], [311, 291], [311, 292], [311, 293], [311, 294], [311, 295], [311, 296], [311, 297], [311, 488], [311, 489], [311, 492], [311, 493], [311, 494], [312, 8], [312, 9], [312, 10], [312, 11], [312, 12], [312, 13], [312, 14], [312, 15], [312, 16], [312, 17], [312, 206], [312, 207], [312, 208], [312, 209], [312, 210], [312, 211], [312, 212], [312, 213], [312, 214], [312, 215], [312, 216], [312, 217], [312, 218], [312, 219], [312, 220], [312, 221], [312, 222], [312, 223], [312, 224], [312, 225], [312, 226], [312, 227], [312, 228], [312, 229], [312, 230], [312, 231], [312, 232], [312, 233], [312, 234], [312, 235], [312, 236], [312, 237], [312, 238], [312, 239], [312, 240], [312, 241], [312, 242], [312, 243], [312, 244], [312, 245], [312, 246], [312, 247], [312, 248], [312, 249], [312, 250], [312, 251], [312, 252], [312, 253], [312, 254], [312, 255], [312, 256], [312, 257], [312, 258], [312, 259], [312, 260], [312, 261], [312, 262], [312, 263], [312, 264], [312, 265], [312, 266], [312, 267], [312, 268], [312, 269], [312, 270], [312, 271], [312, 272], [312, 273], [312, 274], [312, 275], [312, 276], [312, 277], [312, 278], [312, 279], [312, 280], [312, 281], [312, 282], [312, 283], [312, 284], [312, 285], [312, 286], [312, 287], [312, 288], [312, 289], [312, 290], [312, 291], [312, 292], [312, 293], [312, 294], [312, 295], [312, 296], [312, 297], [312, 490], [312, 491], [312, 495], [312, 496], [312, 497], [313, 9], [313, 10], [313, 11], [313, 12], [313, 13], [313, 14], [313, 15], [313, 16], [313, 17], [313, 206], [313, 207], [313, 208], [313, 209], [313, 210], [313, 211], [313, 212], [313, 213], [313, 214], [313, 215], [313, 216], [313, 217], [313, 218], [313, 219], [313, 220], [313, 221], [313, 222], [313, 223], [313, 224], [313, 225], [313, 226], [313, 227], [313, 228], [313, 229], [313, 230], [313, 231], [313, 232], [313, 233], [313, 234], [313, 235], [313, 236], [313, 237], [313, 238], [313, 239], [313, 240], [313, 241], [313, 242], [313, 243], [313, 244], [313, 245], [313, 246], [313, 247], [313, 248], [313, 249], [313, 250], [313, 251], [313, 252], [313, 253], [313, 254], [313, 255], [313, 256], [313, 257], [313, 258], [313, 259], [313, 260], [313, 261], [313, 262], [313, 263], [313, 264], [313, 265], [313, 266], [313, 267], [313, 268], [313, 269], [313, 270], [313, 271], [313, 272], [313, 273], [313, 274], [313, 275], [313, 276], [313, 277], [313, 278], [313, 279], [313, 280], [313, 281], [313, 282], [313, 283], [313, 284], [313, 285], [313, 286], [313, 287], [313, 288], [313, 289], [313, 290], [313, 291], [313, 292], [313, 293], [313, 294], [313, 295], [313, 296], [313, 297], [313, 489], [313, 491], [313, 492], [313, 493], [313, 494], [313, 498], [314, 9], [314, 11], [314, 12], [314, 13], [314, 14], [314, 15], [314, 16], [314, 17], [314, 19], [314, 20], [314, 206], [314, 207], [314, 208], [314, 209], [314, 210], [314, 211], [314, 212], [314, 213], [314, 214], [314, 215], [314, 216], [314, 217], [314, 218], [314, 219], [314, 220], [314, 221], [314, 222], [314, 223], [314, 224], [314, 225], [314, 226], [314, 227], [314, 228], [314, 229], [314, 230], [314, 231], [314, 232], [314, 233], [314, 234], [314, 235], [314, 236], [314, 237], [314, 238], [314, 239], [314, 240], [314, 241], [314, 242], [314, 243], [314, 244], [314, 245], [314, 246], [314, 247], [314, 248], [314, 249], [314, 250], [314, 251], [314, 252], [314, 253], [314, 254], [314, 255], [314, 256], [314, 257], [314, 258], [314, 259], [314, 260], [314, 261], [314, 262], [314, 263], [314, 264], [314, 265], [314, 266], [314, 267], [314, 268], [314, 269], [314, 270], [314, 271], [314, 272], [314, 273], [314, 274], [314, 275], [314, 276], [314, 277], [314, 278], [314, 279], [314, 280], [314, 281], [314, 282], [314, 283], [314, 284], [314, 285], [314, 286], [314, 287], [314, 288], [314, 289], [314, 290], [314, 291], [314, 292], [314, 293], [314, 294], [314, 295], [314, 296], [314, 297], [314, 489], [314, 490], [314, 491], [314, 494], [314, 495], [314, 496], [314, 497], [315, 11], [315, 12], [315, 13], [315, 14], [315, 15], [315, 16], [315, 17], [315, 18], [315, 19], [315, 206], [315, 207], [315, 208], [315, 209], [315, 210], [315, 211], [315, 212], [315, 213], [315, 214], [315, 215], [315, 216], [315, 217], [315, 218], [315, 219], [315, 220], [315, 221], [315, 222], [315, 223], [315, 224], [315, 225], [315, 226], [315, 227], [315, 228], [315, 229], [315, 230], [315, 231], [315, 232], [315, 233], [315, 234], [315, 235], [315, 236], [315, 237], [315, 238], [315, 239], [315, 240], [315, 241], [315, 242], [315, 243], [315, 244], [315, 245], [315, 246], [315, 247], [315, 248], [315, 249], [315, 250], [315, 251], [315, 252], [315, 253], [315, 254], [315, 255], [315, 256], [315, 257], [315, 258], [315, 259], [315, 260], [315, 261], [315, 262], [315, 263], [315, 264], [315, 265], [315, 266], [315, 267], [315, 268], [315, 269], [315, 270], [315, 271], [315, 272], [315, 273], [315, 274], [315, 275], [315, 276], [315, 277], [315, 278], [315, 279], [315, 280], [315, 281], [315, 282], [315, 283], [315, 284], [315, 285], [315, 286], [315, 287], [315, 288], [315, 289], [315, 290], [315, 291], [315, 292], [315, 293], [315, 294], [315, 295], [315, 296], [315, 297], [315, 488], [315, 491], [315, 492], [315, 493], [315, 494], [315, 498], [315, 499], [316, 10], [316, 11], [316, 12], [316, 13], [316, 14], [316, 15], [316, 16], [316, 17], [316, 18], [316, 206], [316, 207], [316, 208], [316, 209], [316, 210], [316, 211], [316, 212], [316, 213], [316, 214], [316, 215], [316, 216], [316, 217], [316, 218], [316, 219], [316, 220], [316, 221], [316, 222], [316, 223], [316, 224], [316, 225], [316, 226], [316, 227], [316, 228], [316, 229], [316, 230], [316, 231], [316, 232], [316, 233], [316, 234], [316, 235], [316, 236], [316, 237], [316, 238], [316, 239], [316, 240], [316, 241], [316, 242], [316, 243], [316, 244], [316, 245], [316, 246], [316, 247], [316, 248], [316, 249], [316, 250], [316, 251], [316, 252], [316, 253], [316, 254], [316, 255], [316, 256], [316, 257], [316, 258], [316, 259], [316, 260], [316, 261], [316, 262], [316, 263], [316, 264], [316, 265], [316, 266], [316, 267], [316, 268], [316, 269], [316, 270], [316, 271], [316, 272], [316, 273], [316, 274], [316, 275], [316, 276], [316, 277], [316, 278], [316, 279], [316, 280], [316, 281], [316, 282], [316, 283], [316, 284], [316, 285], [316, 286], [316, 287], [316, 288], [316, 289], [316, 290], [316, 291], [316, 292], [316, 293], [316, 294], [316, 295], [316, 296], [316, 297], [316, 489], [316, 490], [316, 494], [316, 495], [316, 496], [316, 497], [317, 10], [317, 11], [317, 12], [317, 13], [317, 14], [317, 15], [317, 16], [317, 17], [317, 18], [317, 206], [317, 207], [317, 208], [317, 209], [317, 210], [317, 211], [317, 212], [317, 213], [317, 214], [317, 215], [317, 216], [317, 217], [317, 218], [317, 219], [317, 220], [317, 221], [317, 222], [317, 223], [317, 224], [317, 225], [317, 226], [317, 227], [317, 228], [317, 229], [317, 230], [317, 231], [317, 232], [317, 233], [317, 234], [317, 235], [317, 236], [317, 237], [317, 238], [317, 239], [317, 240], [317, 241], [317, 242], [317, 243], [317, 244], [317, 245], [317, 246], [317, 247], [317, 248], [317, 249], [317, 250], [317, 251], [317, 252], [317, 253], [317, 254], [317, 255], [317, 256], [317, 257], [317, 258], [317, 259], [317, 260], [317, 261], [317, 262], [317, 263], [317, 264], [317, 265], [317, 266], [317, 267], [317, 268], [317, 269], [317, 270], [317, 271], [317, 272], [317, 273], [317, 274], [317, 275], [317, 276], [317, 277], [317, 278], [317, 279], [317, 280], [317, 281], [317, 282], [317, 283], [317, 284], [317, 285], [317, 286], [317, 287], [317, 288], [317, 289], [317, 290], [317, 291], [317, 292], [317, 293], [317, 294], [317, 295], [317, 296], [317, 297], [317, 488], [317, 491], [317, 492], [317, 493], [317, 497], [317, 498], [317, 499], [318, 10], [318, 11], [318, 13], [318, 14], [318, 15], [318, 16], [318, 17], [318, 18], [318, 206], [318, 207], [318, 208], [318, 209], [318, 210], [318, 211], [318, 212], [318, 213], [318, 214], [318, 215], [318, 216], [318, 217], [318, 218], [318, 219], [318, 220], [318, 221], [318, 222], [318, 223], [318, 224], [318, 225], [318, 226], [318, 227], [318, 228], [318, 229], [318, 230], [318, 231], [318, 232], [318, 233], [318, 234], [318, 235], [318, 236], [318, 237], [318, 238], [318, 239], [318, 240], [318, 241], [318, 242], [318, 243], [318, 244], [318, 245], [318, 246], [318, 247], [318, 248], [318, 249], [318, 250], [318, 251], [318, 252], [318, 253], [318, 254], [318, 255], [318, 256], [318, 257], [318, 258], [318, 259], [318, 260], [318, 261], [318, 262], [318, 263], [318, 264], [318, 265], [318, 266], [318, 267], [318, 268], [318, 269], [318, 270], [318, 271], [318, 272], [318, 273], [318, 274], [318, 275], [318, 276], [318, 277], [318, 278], [318, 279], [318, 280], [318, 281], [318, 282], [318, 283], [318, 284], [318, 285], [318, 286], [318, 287], [318, 288], [318, 289], [318, 290], [318, 291], [318, 292], [318, 293], [318, 294], [318, 295], [318, 296], [318, 297], [318, 489], [318, 490], [318, 493], [318, 494], [318, 495], [318, 496], [319, 10], [319, 12], [319, 13], [319, 14], [319, 15], [319, 16], [319, 17], [319, 18], [319, 19], [319, 206], [319, 207], [319, 208], [319, 209], [319, 210], [319, 211], [319, 212], [319, 213], [319, 214], [319, 215], [319, 216], [319, 217], [319, 218], [319, 219], [319, 220], [319, 221], [319, 222], [319, 223], [319, 224], [319, 225], [319, 226], [319, 227], [319, 228], [319, 229], [319, 230], [319, 231], [319, 232], [319, 233], [319, 234], [319, 235], [319, 236], [319, 237], [319, 238], [319, 239], [319, 240], [319, 241], [319, 242], [319, 243], [319, 244], [319, 245], [319, 246], [319, 247], [319, 248], [319, 249], [319, 250], [319, 251], [319, 252], [319, 253], [319, 254], [319, 255], [319, 256], [319, 257], [319, 258], [319, 259], [319, 260], [319, 261], [319, 262], [319, 263], [319, 264], [319, 265], [319, 266], [319, 267], [319, 268], [319, 269], [319, 270], [319, 271], [319, 272], [319, 273], [319, 274], [319, 275], [319, 276], [319, 277], [319, 278], [319, 279], [319, 280], [319, 281], [319, 282], [319, 283], [319, 284], [319, 285], [319, 286], [319, 287], [319, 288], [319, 289], [319, 290], [319, 291], [319, 292], [319, 293], [319, 294], [319, 295], [319, 296], [319, 297], [319, 488], [319, 491], [319, 492], [319, 493], [319, 496], [319, 497], [319, 498], [319, 499], [320, 10], [320, 12], [320, 13], [320, 14], [320, 15], [320, 16], [320, 17], [320, 18], [320, 206], [320, 207], [320, 208], [320, 209], [320, 210], [320, 211], [320, 212], [320, 213], [320, 214], [320, 215], [320, 216], [320, 217], [320, 218], [320, 219], [320, 220], [320, 221], [320, 222], [320, 223], [320, 224], [320, 225], [320, 226], [320, 227], [320, 228], [320, 229], [320, 230], [320, 231], [320, 232], [320, 233], [320, 234], [320, 235], [320, 236], [320, 237], [320, 238], [320, 239], [320, 240], [320, 241], [320, 242], [320, 243], [320, 244], [320, 245], [320, 246], [320, 247], [320, 248], [320, 249], [320, 250], [320, 251], [320, 252], [320, 253], [320, 254], [320, 255], [320, 256], [320, 257], [320, 258], [320, 259], [320, 260], [320, 261], [320, 262], [320, 263], [320, 264], [320, 265], [320, 266], [320, 267], [320, 268], [320, 269], [320, 270], [320, 271], [320, 272], [320, 273], [320, 274], [320, 275], [320, 276], [320, 277], [320, 278], [320, 279], [320, 280], [320, 281], [320, 282], [320, 283], [320, 284], [320, 285], [320, 286], [320, 287], [320, 288], [320, 289], [320, 290], [320, 291], [320, 292], [320, 293], [320, 294], [320, 295], [320, 296], [320, 297], [320, 489], [320, 490], [320, 493], [320, 494], [320, 495], [320, 496], [321, 11], [321, 12], [321, 13], [321, 14], [321, 15], [321, 16], [321, 17], [321, 18], [321, 20], [321, 206], [321, 207], [321, 208], [321, 209], [321, 210], [321, 211], [321, 212], [321, 213], [321, 214], [321, 215], [321, 216], [321, 217], [321, 218], [321, 219], [321, 220], [321, 221], [321, 222], [321, 223], [321, 224], [321, 225], [321, 226], [321, 227], [321, 228], [321, 229], [321, 230], [321, 231], [321, 232], [321, 233], [321, 234], [321, 235], [321, 236], [321, 237], [321, 238], [321, 239], [321, 240], [321, 241], [321, 242], [321, 243], [321, 244], [321, 245], [321, 246], [321, 247], [321, 248], [321, 249], [321, 250], [321, 251], [321, 252], [321, 253], [321, 254], [321, 255], [321, 256], [321, 257], [321, 258], [321, 259], [321, 260], [321, 261], [321, 262], [321, 263], [321, 264], [321, 265], [321, 266], [321, 267], [321, 268], [321, 269], [321, 270], [321, 271], [321, 272], [321, 273], [321, 274], [321, 275], [321, 276], [321, 277], [321, 278], [321, 279], [321, 280], [321, 281], [321, 282], [321, 283], [321, 284], [321, 285], [321, 286], [321, 287], [321, 288], [321, 289], [321, 290], [321, 291], [321, 292], [321, 293], [321, 294], [321, 295], [321, 296], [321, 297], [321, 491], [321, 492], [321, 493], [321, 495], [321, 496], [321, 497], [321, 498], [321, 499], [322, 12], [322, 14], [322, 15], [322, 16], [322, 17], [322, 18], [322, 19], [322, 206], [322, 207], [322, 208], [322, 209], [322, 210], [322, 211], [322, 212], [322, 213], [322, 214], [322, 215], [322, 216], [322, 217], [322, 218], [322, 219], [322, 220], [322, 221], [322, 222], [322, 223], [322, 224], [322, 225], [322, 226], [322, 227], [322, 228], [322, 229], [322, 230], [322, 231], [322, 232], [322, 233], [322, 234], [322, 235], [322, 236], [322, 237], [322, 238], [322, 239], [322, 240], [322, 241], [322, 242], [322, 243], [322, 244], [322, 245], [322, 246], [322, 247], [322, 248], [322, 249], [322, 250], [322, 251], [322, 252], [322, 253], [322, 254], [322, 255], [322, 256], [322, 257], [322, 258], [322, 259], [322, 260], [322, 261], [322, 262], [322, 263], [322, 264], [322, 265], [322, 266], [322, 267], [322, 268], [322, 269], [322, 270], [322, 271], [322, 272], [322, 273], [322, 274], [322, 275], [322, 276], [322, 277], [322, 278], [322, 279], [322, 280], [322, 281], [322, 282], [322, 283], [322, 284], [322, 285], [322, 286], [322, 287], [322, 288], [322, 289], [322, 290], [322, 291], [322, 292], [322, 293], [322, 294], [322, 295], [322, 296], [322, 297], [322, 489], [322, 490], [322, 493], [322, 494], [322, 495], [322, 499], [323, 11], [323, 12], [323, 13], [323, 14], [323, 15], [323, 16], [323, 17], [323, 18], [323, 19], [323, 20], [323, 206], [323, 207], [323, 208], [323, 209], [323, 210], [323, 211], [323, 212], [323, 213], [323, 214], [323, 215], [323, 216], [323, 217], [323, 218], [323, 219], [323, 220], [323, 221], [323, 222], [323, 223], [323, 224], [323, 225], [323, 226], [323, 227], [323, 228], [323, 229], [323, 230], [323, 231], [323, 232], [323, 233], [323, 234], [323, 235], [323, 236], [323, 237], [323, 238], [323, 239], [323, 240], [323, 241], [323, 242], [323, 243], [323, 244], [323, 245], [323, 246], [323, 247], [323, 248], [323, 249], [323, 250], [323, 251], [323, 252], [323, 253], [323, 254], [323, 255], [323, 256], [323, 257], [323, 258], [323, 259], [323, 260], [323, 261], [323, 262], [323, 263], [323, 264], [323, 265], [323, 266], [323, 267], [323, 268], [323, 269], [323, 270], [323, 271], [323, 272], [323, 273], [323, 274], [323, 275], [323, 276], [323, 277], [323, 278], [323, 279], [323, 280], [323, 281], [323, 282], [323, 283], [323, 284], [323, 285], [323, 286], [323, 287], [323, 288], [323, 289], [323, 290], [323, 291], [323, 292], [323, 293], [323, 294], [323, 295], [323, 296], [323, 297], [323, 490], [323, 491], [323, 492], [323, 494], [323, 495], [323, 496], [323, 497], [323, 498], [324, 10], [324, 11], [324, 12], [324, 13], [324, 14], [324, 15], [324, 16], [324, 17], [324, 18], [324, 19], [324, 20], [324, 206], [324, 207], [324, 208], [324, 209], [324, 210], [324, 211], [324, 212], [324, 213], [324, 214], [324, 215], [324, 216], [324, 217], [324, 218], [324, 219], [324, 220], [324, 221], [324, 222], [324, 223], [324, 224], [324, 225], [324, 226], [324, 227], [324, 228], [324, 229], [324, 230], [324, 231], [324, 232], [324, 233], [324, 234], [324, 235], [324, 236], [324, 237], [324, 238], [324, 239], [324, 240], [324, 241], [324, 242], [324, 243], [324, 244], [324, 245], [324, 246], [324, 247], [324, 248], [324, 249], [324, 250], [324, 251], [324, 252], [324, 253], [324, 254], [324, 255], [324, 256], [324, 257], [324, 258], [324, 259], [324, 260], [324, 261], [324, 262], [324, 263], [324, 264], [324, 265], [324, 266], [324, 267], [324, 268], [324, 269], [324, 270], [324, 271], [324, 272], [324, 273], [324, 274], [324, 275], [324, 276], [324, 277], [324, 278], [324, 279], [324, 280], [324, 281], [324, 282], [324, 283], [324, 284], [324, 285], [324, 286], [324, 287], [324, 288], [324, 289], [324, 290], [324, 291], [324, 292], [324, 293], [324, 294], [324, 295], [324, 296], [324, 297], [324, 489], [324, 492], [324, 493], [324, 494], [324, 495], [324, 499], [325, 14], [325, 15], [325, 16], [325, 17], [325, 18], [325, 19], [325, 21], [325, 206], [325, 207], [325, 208], [325, 209], [325, 210], [325, 211], [325, 212], [325, 213], [325, 214], [325, 215], [325, 216], [325, 217], [325, 218], [325, 219], [325, 220], [325, 221], [325, 222], [325, 223], [325, 224], [325, 225], [325, 226], [325, 227], [325, 228], [325, 229], [325, 230], [325, 231], [325, 232], [325, 233], [325, 234], [325, 235], [325, 236], [325, 237], [325, 238], [325, 239], [325, 240], [325, 241], [325, 242], [325, 243], [325, 244], [325, 245], [325, 246], [325, 247], [325, 248], [325, 249], [325, 250], [325, 251], [325, 252], [325, 253], [325, 254], [325, 255], [325, 256], [325, 257], [325, 258], [325, 259], [325, 260], [325, 261], [325, 262], [325, 263], [325, 264], [325, 265], [325, 266], [325, 267], [325, 268], [325, 269], [325, 270], [325, 271], [325, 272], [325, 273], [325, 274], [325, 275], [325, 276], [325, 277], [325, 278], [325, 279], [325, 280], [325, 281], [325, 282], [325, 283], [325, 284], [325, 285], [325, 286], [325, 287], [325, 288], [325, 289], [325, 290], [325, 291], [325, 292], [325, 293], [325, 294], [325, 295], [325, 296], [325, 297], [325, 491], [325, 492], [325, 494], [325, 495], [325, 496], [325, 497], [325, 498], [326, 13], [326, 14], [326, 15], [326, 16], [326, 17], [326, 18], [326, 19], [326, 21], [326, 206], [326, 207], [326, 208], [326, 209], [326, 210], [326, 211], [326, 212], [326, 213], [326, 214], [326, 215], [326, 216], [326, 217], [326, 218], [326, 219], [326, 220], [326, 221], [326, 222], [326, 223], [326, 224], [326, 225], [326, 226], [326, 227], [326, 228], [326, 229], [326, 230], [326, 231], [326, 232], [326, 233], [326, 234], [326, 235], [326, 236], [326, 237], [326, 238], [326, 239], [326, 240], [326, 241], [326, 242], [326, 243], [326, 244], [326, 245], [326, 246], [326, 247], [326, 248], [326, 249], [326, 250], [326, 251], [326, 252], [326, 253], [326, 254], [326, 255], [326, 256], [326, 257], [326, 258], [326, 259], [326, 260], [326, 261], [326, 262], [326, 263], [326, 264], [326, 265], [326, 266], [326, 267], [326, 268], [326, 269], [326, 270], [326, 271], [326, 272], [326, 273], [326, 274], [326, 275], [326, 276], [326, 277], [326, 278], [326, 279], [326, 280], [326, 281], [326, 282], [326, 283], [326, 284], [326, 285], [326, 286], [326, 287], [326, 288], [326, 289], [326, 290], [326, 291], [326, 292], [326, 293], [326, 294], [326, 295], [326, 296], [326, 297], [326, 492], [326, 493], [326, 494], [326, 495], [326, 497], [326, 498], [326, 499], [327, 13], [327, 14], [327, 15], [327, 16], [327, 17], [327, 18], [327, 19], [327, 20], [327, 22], [327, 206], [327, 207], [327, 208], [327, 209], [327, 210], [327, 211], [327, 212], [327, 213], [327, 214], [327, 215], [327, 216], [327, 217], [327, 218], [327, 219], [327, 220], [327, 221], [327, 222], [327, 223], [327, 224], [327, 225], [327, 226], [327, 227], [327, 228], [327, 229], [327, 230], [327, 231], [327, 232], [327, 233], [327, 234], [327, 235], [327, 236], [327, 237], [327, 238], [327, 239], [327, 240], [327, 241], [327, 242], [327, 243], [327, 244], [327, 245], [327, 246], [327, 247], [327, 248], [327, 249], [327, 250], [327, 251], [327, 252], [327, 253], [327, 254], [327, 255], [327, 256], [327, 257], [327, 258], [327, 259], [327, 260], [327, 261], [327, 262], [327, 263], [327, 264], [327, 265], [327, 266], [327, 267], [327, 268], [327, 269], [327, 270], [327, 271], [327, 272], [327, 273], [327, 274], [327, 275], [327, 276], [327, 277], [327, 278], [327, 279], [327, 280], [327, 281], [327, 282], [327, 283], [327, 284], [327, 285], [327, 286], [327, 287], [327, 288], [327, 289], [327, 290], [327, 291], [327, 292], [327, 293], [327, 294], [327, 295], [327, 296], [327, 297], [327, 490], [327, 491], [327, 493], [327, 494], [327, 495], [327, 496], [327, 497], [327, 498], [328, 13], [328, 15], [328, 16], [328, 17], [328, 18], [328, 19], [328, 21], [328, 206], [328, 207], [328, 208], [328, 209], [328, 210], [328, 211], [328, 212], [328, 213], [328, 214], [328, 215], [328, 216], [328, 217], [328, 218], [328, 219], [328, 220], [328, 221], [328, 222], [328, 223], [328, 224], [328, 225], [328, 226], [328, 227], [328, 228], [328, 229], [328, 230], [328, 231], [328, 232], [328, 233], [328, 234], [328, 235], [328, 236], [328, 237], [328, 238], [328, 239], [328, 240], [328, 241], [328, 242], [328, 243], [328, 244], [328, 245], [328, 246], [328, 247], [328, 248], [328, 249], [328, 250], [328, 251], [328, 252], [328, 253], [328, 254], [328, 255], [328, 256], [328, 257], [328, 258], [328, 259], [328, 260], [328, 261], [328, 262], [328, 263], [328, 264], [328, 265], [328, 266], [328, 267], [328, 268], [328, 269], [328, 270], [328, 271], [328, 272], [328, 273], [328, 274], [328, 275], [328, 276], [328, 277], [328, 278], [328, 279], [328, 280], [328, 281], [328, 282], [328, 283], [328, 284], [328, 285], [328, 286], [328, 287], [328, 288], [328, 289], [328, 290], [328, 291], [328, 292], [328, 293], [328, 294], [328, 295], [328, 296], [328, 297], [328, 492], [328, 493], [328, 494], [328, 495], [328, 496], [328, 497], [328, 498], [328, 499], [329, 14], [329, 15], [329, 16], [329, 17], [329, 18], [329, 19], [329, 20], [329, 206], [329, 207], [329, 208], [329, 209], [329, 210], [329, 211], [329, 212], [329, 213], [329, 214], [329, 215], [329, 216], [329, 217], [329, 218], [329, 219], [329, 220], [329, 221], [329, 222], [329, 223], [329, 224], [329, 225], [329, 226], [329, 227], [329, 228], [329, 229], [329, 230], [329, 231], [329, 232], [329, 233], [329, 234], [329, 235], [329, 236], [329, 237], [329, 238], [329, 239], [329, 240], [329, 241], [329, 242], [329, 243], [329, 244], [329, 245], [329, 246], [329, 247], [329, 248], [329, 249], [329, 250], [329, 251], [329, 252], [329, 253], [329, 254], [329, 255], [329, 256], [329, 257], [329, 258], [329, 259], [329, 260], [329, 261], [329, 262], [329, 263], [329, 264], [329, 265], [329, 266], [329, 267], [329, 268], [329, 269], [329, 270], [329, 271], [329, 272], [329, 273], [329, 274], [329, 275], [329, 276], [329, 277], [329, 278], [329, 279], [329, 280], [329, 281], [329, 282], [329, 283], [329, 284], [329, 285], [329, 286], [329, 287], [329, 288], [329, 289], [329, 290], [329, 291], [329, 292], [329, 293], [329, 294], [329, 295], [329, 296], [329, 297], [329, 490], [329, 491], [329, 493], [329, 494], [329, 495], [329, 496], [329, 497], [330, 15], [330, 17], [330, 18], [330, 19], [330, 21], [330, 206], [330, 207], [330, 208], [330, 209], [330, 210], [330, 211], [330, 212], [330, 213], [330, 214], [330, 215], [330, 216], [330, 217], [330, 218], [330, 219], [330, 220], [330, 221], [330, 222], [330, 223], [330, 224], [330, 225], [330, 226], [330, 227], [330, 228], [330, 229], [330, 230], [330, 231], [330, 232], [330, 233], [330, 234], [330, 235], [330, 236], [330, 237], [330, 238], [330, 239], [330, 240], [330, 241], [330, 242], [330, 243], [330, 244], [330, 245], [330, 246], [330, 247], [330, 248], [330, 249], [330, 250], [330, 251], [330, 252], [330, 253], [330, 254], [330, 255], [330, 256], [330, 257], [330, 258], [330, 259], [330, 260], [330, 261], [330, 262], [330, 263], [330, 264], [330, 265], [330, 266], [330, 267], [330, 268], [330, 269], [330, 270], [330, 271], [330, 272], [330, 273], [330, 274], [330, 275], [330, 276], [330, 277], [330, 278], [330, 279], [330, 280], [330, 281], [330, 282], [330, 283], [330, 284], [330, 285], [330, 286], [330, 287], [330, 288], [330, 289], [330, 290], [330, 291], [330, 292], [330, 293], [330, 294], [330, 295], [330, 296], [330, 297], [330, 492], [330, 493], [330, 494], [330, 496], [330, 497], [330, 498], [330, 499], [331, 16], [331, 17], [331, 18], [331, 19], [331, 20], [331, 23], [331, 206], [331, 207], [331, 208], [331, 209], [331, 210], [331, 211], [331, 212], [331, 213], [331, 214], [331, 215], [331, 216], [331, 217], [331, 218], [331, 219], [331, 220], [331, 221], [331, 222], [331, 223], [331, 224], [331, 225], [331, 226], [331, 227], [331, 228], [331, 229], [331, 230], [331, 231], [331, 232], [331, 233], [331, 234], [331, 235], [331, 236], [331, 237], [331, 238], [331, 239], [331, 240], [331, 241], [331, 242], [331, 243], [331, 244], [331, 245], [331, 246], [331, 247], [331, 248], [331, 249], [331, 250], [331, 251], [331, 252], [331, 253], [331, 254], [331, 255], [331, 256], [331, 257], [331, 258], [331, 259], [331, 260], [331, 261], [331, 262], [331, 263], [331, 264], [331, 265], [331, 266], [331, 267], [331, 268], [331, 269], [331, 270], [331, 271], [331, 272], [331, 273], [331, 274], [331, 275], [331, 276], [331, 277], [331, 278], [331, 279], [331, 280], [331, 281], [331, 282], [331, 283], [331, 284], [331, 285], [331, 286], [331, 287], [331, 288], [331, 289], [331, 290], [331, 291], [331, 292], [331, 293], [331, 294], [331, 295], [331, 296], [331, 297], [331, 490], [331, 494], [331, 495], [331, 496], [331, 497], [331, 498], [331, 499], [332, 15], [332, 16], [332, 17], [332, 18], [332, 19], [332, 21], [332, 206], [332, 207], [332, 208], [332, 209], [332, 210], [332, 211], [332, 212], [332, 213], [332, 214], [332, 215], [332, 216], [332, 217], [332, 218], [332, 219], [332, 220], [332, 221], [332, 222], [332, 223], [332, 224], [332, 225], [332, 226], [332, 227], [332, 228], [332, 229], [332, 230], [332, 231], [332, 232], [332, 233], [332, 234], [332, 235], [332, 236], [332, 237], [332, 238], [332, 239], [332, 240], [332, 241], [332, 242], [332, 243], [332, 244], [332, 245], [332, 246], [332, 247], [332, 248], [332, 249], [332, 250], [332, 251], [332, 252], [332, 253], [332, 254], [332, 255], [332, 256], [332, 257], [332, 258], [332, 259], [332, 260], [332, 261], [332, 262], [332, 263], [332, 264], [332, 265], [332, 266], [332, 267], [332, 268], [332, 269], [332, 270], [332, 271], [332, 272], [332, 273], [332, 274], [332, 275], [332, 276], [332, 277], [332, 278], [332, 279], [332, 280], [332, 281], [332, 282], [332, 283], [332, 284], [332, 285], [332, 286], [332, 287], [332, 288], [332, 289], [332, 290], [332, 291], [332, 292], [332, 293], [332, 294], [332, 295], [332, 296], [332, 297], [332, 491], [332, 492], [332, 493], [332, 494], [332, 495], [332, 496], [332, 497], [332, 498], [332, 499], [333, 15], [333, 16], [333, 18], [333, 19], [333, 20], [333, 206], [333, 207], [333, 208], [333, 209], [333, 210], [333, 211], [333, 212], [333, 213], [333, 214], [333, 215], [333, 216], [333, 217], [333, 218], [333, 219], [333, 220], [333, 221], [333, 222], [333, 223], [333, 224], [333, 225], [333, 226], [333, 227], [333, 228], [333, 229], [333, 230], [333, 231], [333, 232], [333, 233], [333, 234], [333, 235], [333, 236], [333, 237], [333, 238], [333, 239], [333, 240], [333, 241], [333, 242], [333, 243], [333, 244], [333, 245], [333, 246], [333, 247], [333, 248], [333, 249], [333, 250], [333, 251], [333, 252], [333, 253], [333, 254], [333, 255], [333, 256], [333, 257], [333, 258], [333, 259], [333, 260], [333, 261], [333, 262], [333, 263], [333, 264], [333, 265], [333, 266], [333, 267], [333, 268], [333, 269], [333, 270], [333, 271], [333, 272], [333, 273], [333, 274], [333, 275], [333, 276], [333, 277], [333, 278], [333, 279], [333, 280], [333, 281], [333, 282], [333, 283], [333, 284], [333, 285], [333, 286], [333, 287], [333, 288], [333, 289], [333, 290], [333, 291], [333, 292], [333, 293], [333, 294], [333, 295], [333, 296], [333, 297], [333, 493], [333, 494], [333, 495], [333, 496], [333, 498], [333, 499], [334, 14], [334, 17], [334, 18], [334, 19], [334, 20], [334, 206], [334, 207], [334, 208], [334, 209], [334, 210], [334, 211], [334, 212], [334, 213], [334, 214], [334, 215], [334, 216], [334, 217], [334, 218], [334, 219], [334, 220], [334, 221], [334, 222], [334, 223], [334, 224], [334, 225], [334, 226], [334, 227], [334, 228], [334, 229], [334, 230], [334, 231], [334, 232], [334, 233], [334, 234], [334, 235], [334, 236], [334, 237], [334, 238], [334, 239], [334, 240], [334, 241], [334, 242], [334, 243], [334, 244], [334, 245], [334, 246], [334, 247], [334, 248], [334, 249], [334, 250], [334, 251], [334, 252], [334, 253], [334, 254], [334, 255], [334, 256], [334, 257], [334, 258], [334, 259], [334, 260], [334, 261], [334, 262], [334, 263], [334, 264], [334, 265], [334, 266], [334, 267], [334, 268], [334, 269], [334, 270], [334, 271], [334, 272], [334, 273], [334, 274], [334, 275], [334, 276], [334, 277], [334, 278], [334, 279], [334, 280], [334, 281], [334, 282], [334, 283], [334, 284], [334, 285], [334, 286], [334, 287], [334, 288], [334, 289], [334, 290], [334, 291], [334, 292], [334, 293], [334, 294], [334, 295], [334, 296], [334, 297], [334, 492], [334, 493], [334, 494], [334, 495], [334, 496], [334, 497], [334, 498], [334, 499], [335, 13], [335, 16], [335, 17], [335, 18], [335, 19], [335, 22], [335, 206], [335, 207], [335, 208], [335, 209], [335, 210], [335, 211], [335, 212], [335, 213], [335, 214], [335, 215], [335, 216], [335, 217], [335, 218], [335, 219], [335, 220], [335, 221], [335, 222], [335, 223], [335, 224], [335, 225], [335, 226], [335, 227], [335, 228], [335, 229], [335, 230], [335, 231], [335, 232], [335, 233], [335, 234], [335, 235], [335, 236], [335, 237], [335, 238], [335, 239], [335, 240], [335, 241], [335, 242], [335, 243], [335, 244], [335, 245], [335, 246], [335, 247], [335, 248], [335, 249], [335, 250], [335, 251], [335, 252], [335, 253], [335, 254], [335, 255], [335, 256], [335, 257], [335, 258], [335, 259], [335, 260], [335, 261], [335, 262], [335, 263], [335, 264], [335, 265], [335, 266], [335, 267], [335, 268], [335, 269], [335, 270], [335, 271], [335, 272], [335, 273], [335, 274], [335, 275], [335, 276], [335, 277], [335, 278], [335, 279], [335, 280], [335, 281], [335, 282], [335, 283], [335, 284], [335, 285], [335, 286], [335, 287], [335, 288], [335, 289], [335, 290], [335, 291], [335, 292], [335, 293], [335, 294], [335, 295], [335, 296], [335, 297], [335, 493], [335, 494], [335, 495], [335, 496], [335, 497], [335, 498], [335, 499], [336, 15], [336, 17], [336, 18], [336, 21], [336, 206], [336, 207], [336, 208], [336, 209], [336, 210], [336, 211], [336, 212], [336, 213], [336, 214], [336, 215], [336, 216], [336, 217], [336, 218], [336, 219], [336, 220], [336, 221], [336, 222], [336, 223], [336, 224], [336, 225], [336, 226], [336, 227], [336, 228], [336, 229], [336, 230], [336, 231], [336, 232], [336, 233], [336, 234], [336, 235], [336, 236], [336, 237], [336, 238], [336, 239], [336, 240], [336, 241], [336, 242], [336, 243], [336, 244], [336, 245], [336, 246], [336, 247], [336, 248], [336, 249], [336, 250], [336, 251], [336, 252], [336, 253], [336, 254], [336, 255], [336, 256], [336, 257], [336, 258], [336, 259], [336, 260], [336, 261], [336, 262], [336, 263], [336, 264], [336, 265], [336, 266], [336, 267], [336, 268], [336, 269], [336, 270], [336, 271], [336, 272], [336, 273], [336, 274], [336, 275], [336, 276], [336, 277], [336, 278], [336, 279], [336, 280], [336, 281], [336, 282], [336, 283], [336, 284], [336, 285], [336, 286], [336, 287], [336, 288], [336, 289], [336, 290], [336, 291], [336, 292], [336, 293], [336, 294], [336, 295], [336, 296], [336, 297], [336, 491], [336, 492], [336, 493], [336, 494], [336, 495], [336, 496], [336, 497], [336, 498], [336, 499], [337, 18], [337, 19], [337, 20], [337, 21], [337, 206], [337, 207], [337, 208], [337, 209], [337, 210], [337, 211], [337, 212], [337, 213], [337, 214], [337, 215], [337, 216], [337, 217], [337, 218], [337, 219], [337, 220], [337, 221], [337, 222], [337, 223], [337, 224], [337, 225], [337, 226], [337, 227], [337, 228], [337, 229], [337, 230], [337, 231], [337, 232], [337, 233], [337, 234], [337, 235], [337, 236], [337, 237], [337, 238], [337, 239], [337, 240], [337, 241], [337, 242], [337, 243], [337, 244], [337, 245], [337, 246], [337, 247], [337, 248], [337, 249], [337, 250], [337, 251], [337, 252], [337, 253], [337, 254], [337, 255], [337, 256], [337, 257], [337, 258], [337, 259], [337, 260], [337, 261], [337, 262], [337, 263], [337, 264], [337, 265], [337, 266], [337, 267], [337, 268], [337, 269], [337, 270], [337, 271], [337, 272], [337, 273], [337, 274], [337, 275], [337, 276], [337, 277], [337, 278], [337, 279], [337, 280], [337, 281], [337, 282], [337, 283], [337, 284], [337, 285], [337, 286], [337, 287], [337, 288], [337, 289], [337, 290], [337, 291], [337, 292], [337, 293], [337, 294], [337, 295], [337, 296], [337, 297], [337, 493], [337, 494], [337, 495], [337, 496], [337, 497], [337, 498], [337, 499], [338, 14], [338, 17], [338, 20], [338, 21], [338, 206], [338, 207], [338, 208], [338, 209], [338, 210], [338, 211], [338, 212], [338, 213], [338, 214], [338, 215], [338, 216], [338, 217], [338, 218], [338, 219], [338, 220], [338, 221], [338, 222], [338, 223], [338, 224], [338, 225], [338, 226], [338, 227], [338, 228], [338, 229], [338, 230], [338, 231], [338, 232], [338, 233], [338, 234], [338, 235], [338, 236], [338, 237], [338, 238], [338, 239], [338, 240], [338, 241], [338, 242], [338, 243], [338, 244], [338, 245], [338, 246], [338, 247], [338, 248], [338, 249], [338, 250], [338, 251], [338, 252], [338, 253], [338, 254], [338, 255], [338, 256], [338, 257], [338, 258], [338, 259], [338, 260], [338, 261], [338, 262], [338, 263], [338, 264], [338, 265], [338, 266], [338, 267], [338, 268], [338, 269], [338, 270], [338, 271], [338, 272], [338, 273], [338, 274], [338, 275], [338, 276], [338, 277], [338, 278], [338, 279], [338, 280], [338, 281], [338, 282], [338, 283], [338, 284], [338, 285], [338, 286], [338, 287], [338, 288], [338, 289], [338, 290], [338, 291], [338, 292], [338, 293], [338, 294], [338, 295], [338, 296], [338, 297], [338, 491], [338, 492], [338, 493], [338, 494], [338, 495], [338, 496], [338, 497], [338, 498], [338, 499], [339, 18], [339, 20], [339, 21], [339, 22], [339, 206], [339, 207], [339, 208], [339, 209], [339, 210], [339, 211], [339, 212], [339, 213], [339, 214], [339, 215], [339, 216], [339, 217], [339, 218], [339, 219], [339, 220], [339, 221], [339, 222], [339, 223], [339, 224], [339, 225], [339, 226], [339, 227], [339, 228], [339, 229], [339, 230], [339, 231], [339, 232], [339, 233], [339, 234], [339, 235], [339, 236], [339, 237], [339, 238], [339, 239], [339, 240], [339, 241], [339, 242], [339, 243], [339, 244], [339, 245], [339, 246], [339, 247], [339, 248], [339, 249], [339, 250], [339, 251], [339, 252], [339, 253], [339, 254], [339, 255], [339, 256], [339, 257], [339, 258], [339, 259], [339, 260], [339, 261], [339, 262], [339, 263], [339, 264], [339, 265], [339, 266], [339, 267], [339, 268], [339, 269], [339, 270], [339, 271], [339, 272], [339, 273], [339, 274], [339, 275], [339, 276], [339, 277], [339, 278], [339, 279], [339, 280], [339, 281], [339, 282], [339, 283], [339, 284], [339, 285], [339, 286], [339, 287], [339, 288], [339, 289], [339, 290], [339, 291], [339, 292], [339, 293], [339, 294], [339, 295], [339, 296], [339, 297], [339, 493], [339, 494], [339, 495], [339, 496], [339, 497], [339, 498], [339, 499], [340, 19], [340, 20], [340, 21], [340, 206], [340, 207], [340, 208], [340, 209], [340, 210], [340, 211], [340, 212], [340, 213], [340, 214], [340, 215], [340, 216], [340, 217], [340, 218], [340, 219], [340, 220], [340, 221], [340, 222], [340, 223], [340, 224], [340, 225], [340, 226], [340, 227], [340, 228], [340, 229], [340, 230], [340, 231], [340, 232], [340, 233], [340, 234], [340, 235], [340, 236], [340, 237], [340, 238], [340, 239], [340, 240], [340, 241], [340, 242], [340, 243], [340, 244], [340, 245], [340, 246], [340, 247], [340, 248], [340, 249], [340, 250], [340, 251], [340, 252], [340, 253], [340, 254], [340, 255], [340, 256], [340, 257], [340, 258], [340, 259], [340, 260], [340, 261], [340, 262], [340, 263], [340, 264], [340, 265], [340, 266], [340, 267], [340, 268], [340, 269], [340, 270], [340, 271], [340, 272], [340, 273], [340, 274], [340, 275], [340, 276], [340, 277], [340, 278], [340, 279], [340, 280], [340, 281], [340, 282], [340, 283], [340, 284], [340, 285], [340, 286], [340, 287], [340, 288], [340, 289], [340, 290], [340, 291], [340, 292], [340, 293], [340, 294], [340, 295], [340, 296], [340, 297], [340, 491], [340, 492], [340, 493], [340, 494], [340, 495], [340, 496], [340, 497], [340, 498], [340, 499], [341, 19], [341, 20], [341, 21], [341, 23], [341, 206], [341, 207], [341, 208], [341, 209], [341, 210], [341, 211], [341, 212], [341, 213], [341, 214], [341, 215], [341, 216], [341, 217], [341, 218], [341, 219], [341, 220], [341, 221], [341, 222], [341, 223], [341, 224], [341, 225], [341, 226], [341, 227], [341, 228], [341, 229], [341, 230], [341, 231], [341, 232], [341, 233], [341, 234], [341, 235], [341, 236], [341, 237], [341, 238], [341, 239], [341, 240], [341, 241], [341, 242], [341, 243], [341, 244], [341, 245], [341, 246], [341, 247], [341, 248], [341, 249], [341, 250], [341, 251], [341, 252], [341, 253], [341, 254], [341, 255], [341, 256], [341, 257], [341, 258], [341, 259], [341, 260], [341, 261], [341, 262], [341, 263], [341, 264], [341, 265], [341, 266], [341, 267], [341, 268], [341, 269], [341, 270], [341, 271], [341, 272], [341, 273], [341, 274], [341, 275], [341, 276], [341, 277], [341, 278], [341, 279], [341, 280], [341, 281], [341, 282], [341, 283], [341, 284], [341, 285], [341, 286], [341, 287], [341, 288], [341, 289], [341, 290], [341, 291], [341, 292], [341, 293], [341, 294], [341, 295], [341, 296], [341, 297], [341, 493], [341, 494], [341, 495], [341, 496], [341, 497], [341, 498], [341, 499], [342, 20], [342, 22], [342, 23], [342, 206], [342, 207], [342, 208], [342, 209], [342, 210], [342, 211], [342, 212], [342, 213], [342, 214], [342, 215], [342, 216], [342, 217], [342, 218], [342, 219], [342, 220], [342, 221], [342, 222], [342, 223], [342, 224], [342, 225], [342, 226], [342, 227], [342, 228], [342, 229], [342, 230], [342, 231], [342, 232], [342, 233], [342, 234], [342, 235], [342, 236], [342, 237], [342, 238], [342, 239], [342, 240], [342, 241], [342, 242], [342, 243], [342, 244], [342, 245], [342, 246], [342, 247], [342, 248], [342, 249], [342, 250], [342, 251], [342, 252], [342, 253], [342, 254], [342, 255], [342, 256], [342, 257], [342, 258], [342, 259], [342, 260], [342, 261], [342, 262], [342, 263], [342, 264], [342, 265], [342, 266], [342, 267], [342, 268], [342, 269], [342, 270], [342, 271], [342, 272], [342, 273], [342, 274], [342, 275], [342, 276], [342, 277], [342, 278], [342, 279], [342, 280], [342, 281], [342, 282], [342, 283], [342, 284], [342, 285], [342, 286], [342, 287], [342, 288], [342, 289], [342, 290], [342, 291], [342, 292], [342, 293], [342, 294], [342, 295], [342, 296], [342, 297], [342, 493], [342, 494], [342, 495], [342, 496], [342, 497], [342, 498], [342, 499], [343, 18], [343, 21], [343, 22], [343, 206], [343, 207], [343, 208], [343, 209], [343, 210], [343, 211], [343, 212], [343, 213], [343, 214], [343, 215], [343, 216], [343, 217], [343, 218], [343, 219], [343, 220], [343, 221], [343, 222], [343, 223], [343, 224], [343, 225], [343, 226], [343, 227], [343, 228], [343, 229], [343, 230], [343, 231], [343, 232], [343, 233], [343, 234], [343, 235], [343, 236], [343, 237], [343, 238], [343, 239], [343, 240], [343, 241], [343, 242], [343, 243], [343, 244], [343, 245], [343, 246], [343, 247], [343, 248], [343, 249], [343, 250], [343, 251], [343, 252], [343, 253], [343, 254], [343, 255], [343, 256], [343, 257], [343, 258], [343, 259], [343, 260], [343, 261], [343, 262], [343, 263], [343, 264], [343, 265], [343, 266], [343, 267], [343, 268], [343, 269], [343, 270], [343, 271], [343, 272], [343, 273], [343, 274], [343, 275], [343, 276], [343, 277], [343, 278], [343, 279], [343, 280], [343, 281], [343, 282], [343, 283], [343, 284], [343, 285], [343, 286], [343, 287], [343, 288], [343, 289], [343, 290], [343, 291], [343, 292], [343, 293], [343, 294], [343, 295], [343, 296], [343, 297], [343, 492], [343, 493], [343, 494], [343, 495], [343, 496], [343, 497], [343, 498], [343, 499], [344, 14], [344, 16], [344, 19], [344, 20], [344, 206], [344, 207], [344, 208], [344, 209], [344, 210], [344, 211], [344, 212], [344, 213], [344, 214], [344, 215], [344, 216], [344, 217], [344, 218], [344, 219], [344, 220], [344, 221], [344, 222], [344, 223], [344, 224], [344, 225], [344, 226], [344, 227], [344, 228], [344, 229], [344, 230], [344, 231], [344, 232], [344, 233], [344, 234], [344, 235], [344, 236], [344, 237], [344, 238], [344, 239], [344, 240], [344, 241], [344, 242], [344, 243], [344, 244], [344, 245], [344, 246], [344, 247], [344, 248], [344, 249], [344, 250], [344, 251], [344, 252], [344, 253], [344, 254], [344, 255], [344, 256], [344, 257], [344, 258], [344, 259], [344, 260], [344, 261], [344, 262], [344, 263], [344, 264], [344, 265], [344, 266], [344, 267], [344, 268], [344, 269], [344, 270], [344, 271], [344, 272], [344, 273], [344, 274], [344, 275], [344, 276], [344, 277], [344, 278], [344, 279], [344, 280], [344, 281], [344, 282], [344, 283], [344, 284], [344, 285], [344, 286], [344, 287], [344, 288], [344, 289], [344, 290], [344, 291], [344, 292], [344, 293], [344, 294], [344, 295], [344, 296], [344, 297], [344, 491], [344, 494], [344, 495], [344, 496], [344, 497], [344, 498], [344, 499], [345, 17], [345, 19], [345, 21], [345, 206], [345, 207], [345, 208], [345, 209], [345, 210], [345, 211], [345, 212], [345, 213], [345, 214], [345, 215], [345, 216], [345, 217], [345, 218], [345, 219], [345, 220], [345, 221], [345, 222], [345, 223], [345, 224], [345, 225], [345, 226], [345, 227], [345, 228], [345, 229], [345, 230], [345, 231], [345, 232], [345, 233], [345, 234], [345, 235], [345, 236], [345, 237], [345, 238], [345, 239], [345, 240], [345, 241], [345, 242], [345, 243], [345, 244], [345, 245], [345, 246], [345, 247], [345, 248], [345, 249], [345, 250], [345, 251], [345, 252], [345, 253], [345, 254], [345, 255], [345, 256], [345, 257], [345, 258], [345, 259], [345, 260], [345, 261], [345, 262], [345, 263], [345, 264], [345, 265], [345, 266], [345, 267], [345, 268], [345, 269], [345, 270], [345, 271], [345, 272], [345, 273], [345, 274], [345, 275], [345, 276], [345, 277], [345, 278], [345, 279], [345, 280], [345, 281], [345, 282], [345, 283], [345, 284], [345, 285], [345, 286], [345, 287], [345, 288], [345, 289], [345, 290], [345, 291], [345, 292], [345, 293], [345, 294], [345, 295], [345, 296], [345, 297], [345, 492], [345, 493], [345, 494], [345, 495], [345, 496], [345, 497], [345, 498], [345, 499], [346, 17], [346, 20], [346, 206], [346, 207], [346, 208], [346, 209], [346, 210], [346, 211], [346, 212], [346, 213], [346, 214], [346, 215], [346, 216], [346, 217], [346, 218], [346, 219], [346, 220], [346, 221], [346, 222], [346, 223], [346, 224], [346, 225], [346, 226], [346, 227], [346, 228], [346, 229], [346, 230], [346, 231], [346, 232], [346, 233], [346, 234], [346, 235], [346, 236], [346, 237], [346, 238], [346, 239], [346, 240], [346, 241], [346, 242], [346, 243], [346, 244], [346, 245], [346, 246], [346, 247], [346, 248], [346, 249], [346, 250], [346, 251], [346, 252], [346, 253], [346, 254], [346, 255], [346, 256], [346, 257], [346, 258], [346, 259], [346, 260], [346, 261], [346, 262], [346, 263], [346, 264], [346, 265], [346, 266], [346, 267], [346, 268], [346, 269], [346, 270], [346, 271], [346, 272], [346, 273], [346, 274], [346, 275], [346, 276], [346, 277], [346, 278], [346, 279], [346, 280], [346, 281], [346, 282], [346, 283], [346, 284], [346, 285], [346, 286], [346, 287], [346, 288], [346, 289], [346, 290], [346, 291], [346, 292], [346, 293], [346, 294], [346, 295], [346, 296], [346, 297], [346, 493], [346, 494], [346, 495], [346, 496], [346, 497], [346, 498], [346, 499], [347, 15], [347, 18], [347, 21], [347, 22], [347, 206], [347, 207], [347, 208], [347, 209], [347, 210], [347, 211], [347, 212], [347, 213], [347, 214], [347, 215], [347, 216], [347, 217], [347, 218], [347, 219], [347, 220], [347, 221], [347, 222], [347, 223], [347, 224], [347, 225], [347, 226], [347, 227], [347, 228], [347, 229], [347, 230], [347, 231], [347, 232], [347, 233], [347, 234], [347, 235], [347, 236], [347, 237], [347, 238], [347, 239], [347, 240], [347, 241], [347, 242], [347, 243], [347, 244], [347, 245], [347, 246], [347, 247], [347, 248], [347, 249], [347, 250], [347, 251], [347, 252], [347, 253], [347, 254], [347, 255], [347, 256], [347, 257], [347, 258], [347, 259], [347, 260], [347, 261], [347, 262], [347, 263], [347, 264], [347, 265], [347, 266], [347, 267], [347, 268], [347, 269], [347, 270], [347, 271], [347, 272], [347, 273], [347, 274], [347, 275], [347, 276], [347, 277], [347, 278], [347, 279], [347, 280], [347, 281], [347, 282], [347, 283], [347, 284], [347, 285], [347, 286], [347, 287], [347, 288], [347, 289], [347, 290], [347, 291], [347, 292], [347, 293], [347, 294], [347, 295], [347, 296], [347, 297], [347, 492], [347, 493], [347, 494], [347, 495], [347, 496], [347, 497], [347, 498], [347, 499], [348, 20], [348, 21], [348, 206], [348, 207], [348, 208], [348, 209], [348, 210], [348, 211], [348, 212], [348, 213], [348, 214], [348, 215], [348, 216], [348, 217], [348, 218], [348, 219], [348, 220], [348, 221], [348, 222], [348, 223], [348, 224], [348, 225], [348, 226], [348, 227], [348, 228], [348, 229], [348, 230], [348, 231], [348, 232], [348, 233], [348, 234], [348, 235], [348, 236], [348, 237], [348, 238], [348, 239], [348, 240], [348, 241], [348, 242], [348, 243], [348, 244], [348, 245], [348, 246], [348, 247], [348, 248], [348, 249], [348, 250], [348, 251], [348, 252], [348, 253], [348, 254], [348, 255], [348, 256], [348, 257], [348, 258], [348, 259], [348, 260], [348, 261], [348, 262], [348, 263], [348, 264], [348, 265], [348, 266], [348, 267], [348, 268], [348, 269], [348, 270], [348, 271], [348, 272], [348, 273], [348, 274], [348, 275], [348, 276], [348, 277], [348, 278], [348, 279], [348, 280], [348, 281], [348, 282], [348, 283], [348, 284], [348, 285], [348, 286], [348, 287], [348, 288], [348, 289], [348, 290], [348, 291], [348, 292], [348, 293], [348, 294], [348, 295], [348, 296], [348, 297], [348, 493], [348, 494], [348, 495], [348, 496], [348, 497], [348, 498], [348, 499], [349, 20], [349, 206], [349, 207], [349, 208], [349, 209], [349, 210], [349, 211], [349, 212], [349, 213], [349, 214], [349, 215], [349, 216], [349, 217], [349, 218], [349, 219], [349, 220], [349, 221], [349, 222], [349, 223], [349, 224], [349, 225], [349, 226], [349, 227], [349, 228], [349, 229], [349, 230], [349, 231], [349, 232], [349, 233], [349, 234], [349, 235], [349, 236], [349, 237], [349, 238], [349, 239], [349, 240], [349, 241], [349, 242], [349, 243], [349, 244], [349, 245], [349, 246], [349, 247], [349, 248], [349, 249], [349, 250], [349, 251], [349, 252], [349, 253], [349, 254], [349, 255], [349, 256], [349, 257], [349, 258], [349, 259], [349, 260], [349, 261], [349, 262], [349, 263], [349, 264], [349, 265], [349, 266], [349, 267], [349, 268], [349, 269], [349, 270], [349, 271], [349, 272], [349, 273], [349, 274], [349, 275], [349, 276], [349, 277], [349, 278], [349, 279], [349, 280], [349, 281], [349, 282], [349, 283], [349, 284], [349, 285], [349, 286], [349, 287], [349, 288], [349, 289], [349, 290], [349, 291], [349, 292], [349, 293], [349, 294], [349, 295], [349, 296], [349, 297], [349, 492], [349, 493], [349, 494], [349, 495], [349, 496], [349, 497], [349, 498], [349, 499], [350, 17], [350, 19], [350, 22], [350, 206], [350, 207], [350, 208], [350, 209], [350, 210], [350, 211], [350, 212], [350, 213], [350, 214], [350, 215], [350, 216], [350, 217], [350, 218], [350, 219], [350, 220], [350, 221], [350, 222], [350, 223], [350, 224], [350, 225], [350, 226], [350, 227], [350, 228], [350, 229], [350, 230], [350, 231], [350, 232], [350, 233], [350, 234], [350, 235], [350, 236], [350, 237], [350, 238], [350, 239], [350, 240], [350, 241], [350, 242], [350, 243], [350, 244], [350, 245], [350, 246], [350, 247], [350, 248], [350, 249], [350, 250], [350, 251], [350, 252], [350, 253], [350, 254], [350, 255], [350, 256], [350, 257], [350, 258], [350, 259], [350, 260], [350, 261], [350, 262], [350, 263], [350, 264], [350, 265], [350, 266], [350, 267], [350, 268], [350, 269], [350, 270], [350, 271], [350, 272], [350, 273], [350, 274], [350, 275], [350, 276], [350, 277], [350, 278], [350, 279], [350, 280], [350, 281], [350, 282], [350, 283], [350, 284], [350, 285], [350, 286], [350, 287], [350, 288], [350, 289], [350, 290], [350, 291], [350, 292], [350, 293], [350, 294], [350, 295], [350, 296], [350, 297], [350, 493], [350, 494], [350, 495], [350, 496], [350, 497], [350, 498], [350, 499], [351, 21], [351, 24], [351, 206], [351, 207], [351, 208], [351, 209], [351, 210], [351, 211], [351, 212], [351, 213], [351, 214], [351, 215], [351, 216], [351, 217], [351, 218], [351, 219], [351, 220], [351, 221], [351, 222], [351, 223], [351, 224], [351, 225], [351, 226], [351, 227], [351, 228], [351, 229], [351, 230], [351, 231], [351, 232], [351, 233], [351, 234], [351, 235], [351, 236], [351, 237], [351, 238], [351, 239], [351, 240], [351, 241], [351, 242], [351, 243], [351, 244], [351, 245], [351, 246], [351, 247], [351, 248], [351, 249], [351, 250], [351, 251], [351, 252], [351, 253], [351, 254], [351, 255], [351, 256], [351, 257], [351, 258], [351, 259], [351, 260], [351, 261], [351, 262], [351, 263], [351, 264], [351, 265], [351, 266], [351, 267], [351, 268], [351, 269], [351, 270], [351, 271], [351, 272], [351, 273], [351, 274], [351, 275], [351, 276], [351, 277], [351, 278], [351, 279], [351, 280], [351, 281], [351, 282], [351, 283], [351, 284], [351, 285], [351, 286], [351, 287], [351, 288], [351, 289], [351, 290], [351, 291], [351, 292], [351, 293], [351, 294], [351, 295], [351, 296], [351, 297], [351, 493], [351, 494], [351, 495], [351, 496], [351, 497], [351, 498], [351, 499], [352, 15], [352, 17], [352, 19], [352, 20], [352, 206], [352, 207], [352, 208], [352, 209], [352, 210], [352, 211], [352, 212], [352, 213], [352, 214], [352, 215], [352, 216], [352, 217], [352, 218], [352, 219], [352, 220], [352, 221], [352, 222], [352, 223], [352, 224], [352, 225], [352, 226], [352, 227], [352, 228], [352, 229], [352, 230], [352, 231], [352, 232], [352, 233], [352, 234], [352, 235], [352, 236], [352, 237], [352, 238], [352, 239], [352, 240], [352, 241], [352, 242], [352, 243], [352, 244], [352, 245], [352, 246], [352, 247], [352, 248], [352, 249], [352, 250], [352, 251], [352, 252], [352, 253], [352, 254], [352, 255], [352, 256], [352, 257], [352, 258], [352, 259], [352, 260], [352, 261], [352, 262], [352, 263], [352, 264], [352, 265], [352, 266], [352, 267], [352, 268], [352, 269], [352, 270], [352, 271], [352, 272], [352, 273], [352, 274], [352, 275], [352, 276], [352, 277], [352, 278], [352, 279], [352, 280], [352, 281], [352, 282], [352, 283], [352, 284], [352, 285], [352, 286], [352, 287], [352, 288], [352, 289], [352, 290], [352, 291], [352, 292], [352, 293], [352, 294], [352, 295], [352, 296], [352, 297], [352, 493], [352, 494], [352, 495], [352, 496], [352, 497], [352, 498], [352, 499], [353, 14], [353, 17], [353, 18], [353, 19], [353, 20], [353, 198], [353, 206], [353, 207], [353, 208], [353, 209], [353, 210], [353, 211], [353, 212], [353, 213], [353, 214], [353, 215], [353, 216], [353, 217], [353, 218], [353, 219], [353, 220], [353, 221], [353, 222], [353, 223], [353, 224], [353, 225], [353, 226], [353, 227], [353, 228], [353, 229], [353, 230], [353, 231], [353, 232], [353, 233], [353, 234], [353, 235], [353, 236], [353, 237], [353, 238], [353, 239], [353, 240], [353, 241], [353, 242], [353, 243], [353, 244], [353, 245], [353, 246], [353, 247], [353, 248], [353, 249], [353, 250], [353, 251], [353, 252], [353, 253], [353, 254], [353, 255], [353, 256], [353, 257], [353, 258], [353, 259], [353, 260], [353, 261], [353, 262], [353, 263], [353, 264], [353, 265], [353, 266], [353, 267], [353, 268], [353, 269], [353, 270], [353, 271], [353, 272], [353, 273], [353, 274], [353, 275], [353, 276], [353, 277], [353, 278], [353, 279], [353, 280], [353, 281], [353, 282], [353, 283], [353, 284], [353, 285], [353, 286], [353, 287], [353, 288], [353, 289], [353, 290], [353, 291], [353, 292], [353, 293], [353, 294], [353, 295], [353, 296], [353, 297], [353, 492], [353, 493], [353, 494], [353, 495], [353, 496], [353, 497], [353, 498], [353, 499], [354, 18], [354, 19], [354, 22], [354, 493], [354, 494], [354, 495], [354, 496], [354, 497], [354, 498], [354, 499], [355, 19], [355, 20], [355, 21], [355, 194], [355, 492], [355, 493], [355, 494], [355, 495], [355, 496], [355, 497], [355, 498], [355, 499], [356, 17], [356, 19], [356, 21], [356, 493], [356, 494], [356, 495], [356, 496], [356, 497], [356, 498], [356, 499], [357, 20], [357, 194], [357, 493], [357, 494], [357, 495], [357, 496], [357, 497], [357, 498], [357, 499], [358, 21], [358, 493], [358, 494], [358, 495], [358, 496], [358, 497], [358, 498], [358, 499], [359, 17], [359, 20], [359, 194], [359, 493], [359, 494], [359, 495], [359, 496], [359, 497], [359, 498], [359, 499], [360, 19], [360, 21], [360, 492], [360, 493], [360, 494], [360, 495], [360, 496], [360, 497], [360, 498], [360, 499], [361, 20], [361, 23], [361, 493], [361, 494], [361, 495], [361, 496], [361, 497], [361, 498], [361, 499], [362, 21], [362, 22], [362, 492], [362, 493], [362, 494], [362, 495], [362, 496], [362, 497], [362, 498], [362, 499], [363, 19], [363, 493], [363, 494], [363, 495], [363, 496], [363, 497], [363, 498], [363, 499], [364, 21], [364, 192], [364, 492], [364, 493], [364, 494], [364, 495], [364, 496], [364, 497], [364, 498], [364, 499], [365, 22], [365, 493], [365, 494], [365, 495], [365, 496], [365, 497], [365, 498], [365, 499], [366, 492], [366, 493], [366, 494], [366, 495], [366, 496], [366, 497], [366, 498], [366, 499], [367, 493], [367, 494], [367, 495], [367, 496], [367, 497], [367, 498], [367, 499], [368, 492], [368, 493], [368, 494], [368, 495], [368, 496], [368, 497], [368, 498], [368, 499], [369, 493], [369, 494], [369, 495], [369, 496], [369, 497], [369, 498], [369, 499], [370, 492], [370, 493], [370, 494], [370, 495], [370, 496], [370, 497], [370, 498], [370, 499], [371, 492], [371, 493], [371, 494], [371, 495], [371, 496], [371, 497], [371, 498], [371, 499], [372, 493], [372, 494], [372, 495], [372, 496], [372, 497], [372, 498], [372, 499], [373, 492], [373, 493], [373, 494], [373, 495], [373, 496], [373, 497], [373, 498], [373, 499], [374, 493], [374, 494], [374, 495], [374, 496], [374, 497], [374, 498], [374, 499], [375, 492], [375, 493], [375, 494], [375, 495], [375, 496], [375, 497], [375, 498], [375, 499], [376, 493], [376, 494], [376, 495], [376, 496], [376, 497], [376, 498], [376, 499], [377, 492], [377, 493], [377, 494], [377, 495], [377, 496], [377, 497], [377, 498], [377, 499], [378, 9], [378, 10], [378, 11], [378, 12], [378, 13], [378, 14], [378, 15], [378, 16], [378, 17], [378, 18], [378, 493], [378, 494], [378, 495], [378, 496], [378, 497], [378, 498], [378, 499], [379, 8], [379, 9], [379, 10], [379, 11], [379, 12], [379, 13], [379, 14], [379, 15], [379, 16], [379, 17], [379, 492], [379, 493], [379, 494], [379, 495], [379, 496], [379, 497], [379, 498], [379, 499], [380, 8], [380, 9], [380, 10], [380, 11], [380, 12], [380, 13], [380, 14], [380, 15], [380, 16], [380, 17], [380, 18], [380, 493], [380, 494], [380, 495], [380, 496], [380, 497], [380, 498], [380, 499], [381, 9], [381, 10], [381, 11], [381, 12], [381, 13], [381, 14], [381, 15], [381, 16], [381, 17], [381, 492], [381, 493], [381, 494], [381, 495], [381, 496], [381, 497], [381, 498], [381, 499], [382, 9], [382, 10], [382, 11], [382, 12], [382, 13], [382, 14], [382, 15], [382, 16], [382, 17], [382, 18], [382, 493], [382, 494], [382, 495], [382, 496], [382, 497], [382, 498], [382, 499], [383, 8], [383, 9], [383, 10], [383, 11], [383, 12], [383, 13], [383, 14], [383, 15], [383, 16], [383, 17], [383, 492], [383, 493], [383, 494], [383, 495], [383, 496], [383, 497], [383, 498], [383, 499], [384, 9], [384, 10], [384, 11], [384, 12], [384, 13], [384, 14], [384, 15], [384, 16], [384, 17], [384, 18], [384, 493], [384, 494], [384, 495], [384, 496], [384, 497], [384, 498], [384, 499], [385, 9], [385, 10], [385, 11], [385, 12], [385, 13], [385, 14], [385, 15], [385, 16], [385, 17], [385, 493], [385, 494], [385, 495], [385, 496], [385, 497], [385, 498], [385, 499], [386, 9], [386, 10], [386, 11], [386, 12], [386, 13], [386, 14], [386, 15], [386, 16], [386, 17], [386, 492], [386, 493], [386, 494], [386, 495], [386, 496], [386, 497], [386, 498], [386, 499], [387, 8], [387, 9], [387, 10], [387, 11], [387, 12], [387, 13], [387, 14], [387, 15], [387, 16], [387, 17], [387, 493], [387, 494], [387, 495], [387, 496], [387, 497], [387, 498], [387, 499], [388, 9], [388, 10], [388, 11], [388, 12], [388, 13], [388, 14], [388, 15], [388, 16], [388, 17], [388, 18], [388, 493], [388, 494], [388, 495], [388, 496], [388, 497], [388, 498], [388, 499], [389, 9], [389, 10], [389, 11], [389, 12], [389, 13], [389, 14], [389, 15], [389, 16], [389, 17], [389, 493], [389, 494], [389, 495], [389, 496], [389, 497], [389, 498], [389, 499], [390, 8], [390, 9], [390, 10], [390, 11], [390, 12], [390, 13], [390, 14], [390, 15], [390, 16], [390, 17], [390, 493], [390, 494], [390, 495], [390, 496], [390, 497], [390, 498], [390, 499], [391, 8], [391, 9], [391, 10], [391, 11], [391, 12], [391, 13], [391, 14], [391, 15], [391, 16], [391, 17], [391, 493], [391, 494], [391, 495], [391, 496], [391, 497], [391, 498], [391, 499], [392, 9], [392, 10], [392, 11], [392, 12], [392, 13], [392, 14], [392, 15], [392, 16], [392, 17], [392, 493], [392, 494], [392, 495], [392, 496], [392, 497], [392, 498], [392, 499], [393, 10], [393, 11], [393, 12], [393, 13], [393, 14], [393, 15], [393, 16], [393, 17], [393, 493], [393, 494], [393, 495], [393, 496], [393, 497], [393, 498], [393, 499], [394, 9], [394, 10], [394, 11], [394, 12], [394, 13], [394, 14], [394, 15], [394, 16], [394, 17], [394, 492], [394, 493], [394, 494], [394, 495], [394, 496], [394, 497], [394, 498], [394, 499], [395, 8], [395, 9], [395, 10], [395, 11], [395, 12], [395, 13], [395, 14], [395, 15], [395, 16], [395, 17], [395, 494], [395, 495], [395, 496], [395, 497], [395, 498], [395, 499], [396, 9], [396, 10], [396, 11], [396, 12], [396, 13], [396, 14], [396, 15], [396, 16], [396, 17], [396, 492], [396, 493], [396, 494], [396, 495], [396, 496], [396, 497], [396, 498], [396, 499], [397, 8], [397, 9], [397, 10], [397, 11], [397, 12], [397, 13], [397, 14], [397, 15], [397, 16], [397, 17], [397, 493], [397, 494], [397, 495], [397, 496], [397, 497], [397, 498], [397, 499], [398, 8], [398, 9], [398, 10], [398, 11], [398, 12], [398, 13], [398, 14], [398, 15], [398, 16], [398, 17], [398, 492], [398, 493], [398, 494], [398, 495], [398, 496], [398, 497], [398, 498], [398, 499], [399, 10], [399, 11], [399, 12], [399, 13], [399, 14], [399, 15], [399, 16], [399, 17], [399, 494], [399, 495], [399, 496], [399, 497], [399, 498], [399, 499], [400, 10], [400, 11], [400, 12], [400, 13], [400, 14], [400, 15], [400, 16], [400, 17], [400, 492], [400, 493], [400, 494], [400, 495], [400, 496], [400, 497], [400, 498], [400, 499], [401, 10], [401, 12], [401, 13], [401, 14], [401, 15], [401, 16], [401, 17], [401, 491], [401, 492], [401, 494], [401, 495], [401, 496], [401, 497], [401, 498], [402, 8], [402, 9], [402, 10], [402, 11], [402, 12], [402, 13], [402, 14], [402, 15], [402, 16], [402, 17], [402, 493], [402, 494], [402, 495], [402, 496], [402, 497], [402, 498], [402, 499], [403, 10], [403, 11], [403, 12], [403, 13], [403, 14], [403, 15], [403, 16], [403, 17], [403, 491], [403, 492], [403, 494], [403, 495], [403, 496], [403, 497], [403, 498], [403, 499], [404, 9], [404, 10], [404, 11], [404, 12], [404, 13], [404, 14], [404, 15], [404, 16], [404, 17], [404, 489], [404, 493], [404, 494], [404, 495], [404, 496], [404, 497], [404, 498], [404, 499], [405, 8], [405, 9], [405, 10], [405, 11], [405, 12], [405, 13], [405, 14], [405, 15], [405, 16], [405, 17], [405, 491], [405, 492], [405, 493], [405, 494], [405, 495], [405, 496], [405, 497], [405, 498], [405, 499], [406, 10], [406, 11], [406, 12], [406, 13], [406, 14], [406, 15], [406, 16], [406, 17], [406, 489], [406, 490], [406, 493], [406, 494], [406, 495], [406, 496], [406, 498], [406, 499], [407, 11], [407, 12], [407, 13], [407, 14], [407, 15], [407, 16], [407, 17], [407, 491], [407, 492], [407, 493], [407, 494], [407, 495], [407, 496], [407, 497], [407, 498], [407, 499], [408, 10], [408, 11], [408, 12], [408, 13], [408, 14], [408, 15], [408, 16], [408, 17], [408, 490], [408, 493], [408, 494], [408, 495], [408, 496], [409, 11], [409, 12], [409, 13], [409, 14], [409, 15], [409, 16], [409, 17], [409, 18], [409, 492], [409, 493], [409, 494], [409, 495], [409, 496], [409, 497], [409, 498], [409, 499], [410, 10], [410, 12], [410, 13], [410, 14], [410, 15], [410, 16], [410, 17], [410, 490], [410, 493], [410, 494], [410, 495], [410, 496], [410, 497], [411, 11], [411, 13], [411, 14], [411, 15], [411, 16], [411, 17], [411, 491], [411, 492], [411, 493], [411, 494], [411, 496], [411, 497], [411, 498], [411, 499], [412, 11], [412, 13], [412, 14], [412, 15], [412, 16], [412, 17], [412, 18], [412, 490], [412, 493], [412, 494], [412, 495], [412, 496], [412, 497], [413, 11], [413, 12], [413, 13], [413, 14], [413, 15], [413, 16], [413, 17], [413, 492], [413, 493], [413, 494], [413, 497], [413, 498], [413, 499], [414, 14], [414, 15], [414, 16], [414, 17], [414, 18], [414, 490], [414, 491], [414, 494], [414, 495], [414, 496], [414, 497], [414, 498], [415, 12], [415, 14], [415, 15], [415, 16], [415, 17], [415, 492], [415, 493], [415, 494], [415, 498], [415, 499], [416, 12], [416, 15], [416, 16], [416, 17], [416, 18], [416, 19], [416, 490], [416, 491], [416, 492], [416, 494], [416, 495], [416, 496], [416, 497], [417, 11], [417, 13], [417, 15], [417, 16], [417, 17], [417, 18], [417, 489], [417, 492], [417, 493], [417, 494], [417, 495], [417, 498], [417, 499], [418, 14], [418, 15], [418, 16], [418, 17], [418, 18], [418, 490], [418, 491], [418, 492], [418, 495], [418, 496], [418, 497], [418, 498], [419, 13], [419, 14], [419, 16], [419, 17], [419, 18], [419, 19], [419, 20], [419, 489], [419, 490], [419, 492], [419, 493], [419, 494], [419, 495], [419, 499], [420, 14], [420, 15], [420, 16], [420, 17], [420, 18], [420, 491], [420, 492], [420, 496], [420, 497], [420, 498], [421, 13], [421, 16], [421, 17], [421, 19], [421, 489], [421, 490], [421, 492], [421, 493], [421, 494], [421, 495], [421, 496], [422, 15], [422, 17], [422, 18], [422, 20], [422, 487], [422, 491], [422, 492], [422, 493], [422, 497], [422, 498], [422, 499], [423, 15], [423, 16], [423, 18], [423, 19], [423, 486], [423, 489], [423, 490], [423, 493], [423, 494], [423, 495], [423, 496], [424, 14], [424, 17], [424, 18], [424, 19], [424, 20], [424, 488], [424, 491], [424, 492], [424, 493], [424, 497], [425, 16], [425, 18], [425, 19], [425, 490], [425, 494], [425, 495], [425, 496], [426, 15], [426, 17], [426, 21], [426, 488], [426, 491], [426, 492], [426, 493], [426, 497], [427, 15], [427, 18], [427, 19], [427, 486], [427, 489], [427, 490], [427, 491], [427, 494], [427, 495], [427, 496], [428, 17], [428, 18], [428, 20], [428, 488], [428, 492], [428, 493], [428, 497], [429, 16], [429, 18], [429, 21], [429, 22], [429, 490], [429, 491], [429, 494], [429, 495], [430, 16], [430, 20], [430, 488], [430, 489], [430, 492], [430, 493], [430, 494], [431, 19], [431, 21], [431, 486], [431, 489], [431, 490], [431, 491], [431, 495], [432, 17], [432, 20], [432, 488], [432, 489], [432, 490], [432, 492], [432, 493], [432, 494], [433, 15], [433, 18], [433, 21], [433, 486], [433, 487], [433, 489], [433, 490], [433, 491], [434, 19], [434, 20], [434, 21], [434, 488], [434, 489], [434, 490], [434, 492], [434, 493], [435, 20], [435, 22], [435, 486], [435, 487], [435, 491], [435, 492], [435, 495], [436, 22], [436, 488], [436, 489], [436, 490], [436, 492], [437, 21], [437, 486], [437, 487], [437, 490], [437, 491], [437, 492], [438, 485], [438, 488], [438, 489], [439, 21], [439, 23], [439, 486], [439, 487], [439, 488], [439, 491], [440, 22], [440, 485], [440, 487], [440, 489], [441, 24], [441, 486], [441, 487], [441, 488], [441, 490], [442, 485], [442, 486], [442, 489], [443, 20], [443, 486], [443, 487], [444, 21], [444, 485], [444, 488], [446, 486], [451, 486], [482, 436], [483, 427], [483, 433], [484, 422], [484, 430], [485, 426], [485, 430], [485, 432], [485, 434], [485, 436], [486, 421], [486, 423], [486, 425], [486, 427], [486, 429], [486, 431], [486, 438], [487, 412], [487, 414], [487, 416], [487, 417], [487, 418], [487, 420], [487, 422], [487, 424], [487, 426], [487, 427], [487, 429], [487, 431], [487, 433], [487, 435], [488, 409], [488, 411], [488, 413], [488, 414], [488, 416], [488, 417], [488, 418], [488, 420], [488, 421], [488, 422], [488, 424], [488, 426], [488, 428], [488, 430], [488, 432], [489, 400], [489, 402], [489, 405], [489, 409], [489, 411], [489, 413], [489, 414], [489, 415], [489, 417], [489, 418], [489, 419], [489, 420], [489, 421], [489, 423], [489, 425], [489, 426], [489, 427], [489, 428], [489, 430], [489, 432], [489, 434], [490, 391], [490, 396], [490, 402], [490, 404], [490, 405], [490, 406], [490, 408], [490, 409], [490, 410], [490, 411], [490, 412], [490, 413], [490, 414], [490, 415], [490, 416], [490, 417], [490, 418], [490, 419], [490, 420], [490, 421], [490, 423], [490, 425], [490, 427], [490, 429], [490, 431], [491, 346], [491, 353], [491, 357], [491, 359], [491, 374], [491, 389], [491, 391], [491, 395], [491, 397], [491, 399], [491, 400], [491, 401], [491, 402], [491, 403], [491, 404], [491, 405], [491, 406], [491, 407], [491, 408], [491, 409], [491, 410], [491, 411], [491, 412], [491, 413], [491, 414], [491, 415], [491, 416], [491, 418], [491, 420], [491, 422], [491, 424], [491, 426], [491, 429], [492, 329], [492, 338], [492, 340], [492, 342], [492, 344], [492, 346], [492, 348], [492, 349], [492, 351], [492, 353], [492, 354], [492, 355], [492, 357], [492, 358], [492, 359], [492, 360], [492, 361], [492, 362], [492, 363], [492, 365], [492, 366], [492, 367], [492, 368], [492, 369], [492, 370], [492, 371], [492, 372], [492, 373], [492, 374], [492, 375], [492, 376], [492, 377], [492, 378], [492, 379], [492, 380], [492, 381], [492, 382], [492, 383], [492, 384], [492, 385], [492, 386], [492, 387], [492, 388], [492, 389], [492, 390], [492, 391], [492, 392], [492, 393], [492, 394], [492, 395], [492, 396], [492, 397], [492, 398], [492, 399], [492, 400], [492, 401], [492, 402], [492, 403], [492, 404], [492, 405], [492, 406], [492, 407], [492, 408], [492, 409], [492, 411], [492, 412], [492, 413], [492, 414], [492, 415], [492, 416], [492, 417], [492, 418], [492, 419], [492, 420], [492, 421], [492, 422], [492, 424], [492, 426], [492, 428], [493, 301], [493, 308], [493, 310], [493, 312], [493, 314], [493, 316], [493, 320], [493, 323], [493, 325], [493, 327], [493, 329], [493, 331], [493, 332], [493, 333], [493, 334], [493, 335], [493, 336], [493, 337], [493, 338], [493, 339], [493, 340], [493, 341], [493, 342], [493, 343], [493, 344], [493, 345], [493, 346], [493, 347], [493, 348], [493, 349], [493, 350], [493, 351], [493, 352], [493, 353], [493, 354], [493, 355], [493, 356], [493, 357], [493, 358], [493, 359], [493, 360], [493, 361], [493, 362], [493, 363], [493, 364], [493, 365], [493, 366], [493, 367], [493, 368], [493, 369], [493, 370], [493, 371], [493, 372], [493, 373], [493, 374], [493, 375], [493, 376], [493, 377], [493, 378], [493, 379], [493, 380], [493, 381], [493, 382], [493, 383], [493, 384], [493, 385], [493, 386], [493, 387], [493, 388], [493, 389], [493, 390], [493, 391], [493, 392], [493, 393], [493, 394], [493, 395], [493, 396], [493, 397], [493, 398], [493, 399], [493, 400], [493, 401], [493, 402], [493, 403], [493, 404], [493, 405], [493, 406], [493, 407], [493, 408], [493, 409], [493, 410], [493, 411], [493, 412], [493, 413], [493, 414], [493, 415], [493, 416], [493, 417], [493, 419], [493, 421], [493, 423], [493, 425], [494, 64], [494, 276], [494, 282], [494, 286], [494, 288], [494, 293], [494, 295], [494, 297], [494, 299], [494, 301], [494, 303], [494, 305], [494, 306], [494, 308], [494, 309], [494, 310], [494, 311], [494, 312], [494, 313], [494, 314], [494, 315], [494, 316], [494, 317], [494, 318], [494, 319], [494, 320], [494, 321], [494, 322], [494, 323], [494, 324], [494, 325], [494, 326], [494, 327], [494, 328], [494, 329], [494, 330], [494, 331], [494, 332], [494, 333], [494, 334], [494, 335], [494, 336], [494, 337], [494, 338], [494, 339], [494, 340], [494, 341], [494, 342], [494, 343], [494, 344], [494, 345], [494, 346], [494, 347], [494, 348], [494, 349], [494, 350], [494, 351], [494, 352], [494, 353], [494, 354], [494, 355], [494, 356], [494, 357], [494, 358], [494, 359], [494, 360], [494, 361], [494, 362], [494, 363], [494, 364], [494, 365], [494, 366], [494, 367], [494, 368], [494, 369], [494, 370], [494, 371], [494, 372], [494, 373], [494, 374], [494, 375], [494, 376], [494, 377], [494, 378], [494, 379], [494, 380], [494, 381], [494, 382], [494, 383], [494, 384], [494, 385], [494, 386], [494, 387], [494, 388], [494, 389], [494, 390], [494, 391], [494, 392], [494, 393], [494, 394], [494, 395], [494, 396], [494, 397], [494, 398], [494, 399], [494, 400], [494, 401], [494, 402], [494, 403], [494, 404], [494, 405], [494, 406], [494, 408], [494, 409], [494, 410], [494, 412], [494, 413], [494, 414], [494, 416], [494, 423], [495, 63], [495, 64], [495, 66], [495, 67], [495, 69], [495, 258], [495, 265], [495, 267], [495, 269], [495, 271], [495, 273], [495, 275], [495, 277], [495, 278], [495, 280], [495, 282], [495, 284], [495, 286], [495, 287], [495, 288], [495, 289], [495, 290], [495, 291], [495, 292], [495, 293], [495, 294], [495, 295], [495, 296], [495, 297], [495, 298], [495, 299], [495, 300], [495, 301], [495, 302], [495, 303], [495, 304], [495, 305], [495, 306], [495, 307], [495, 308], [495, 309], [495, 310], [495, 311], [495, 312], [495, 313], [495, 314], [495, 315], [495, 316], [495, 317], [495, 318], [495, 319], [495, 320], [495, 321], [495, 322], [495, 323], [495, 324], [495, 325], [495, 326], [495, 327], [495, 328], [495, 329], [495, 330], [495, 331], [495, 332], [495, 333], [495, 334], [495, 335], [495, 336], [495, 337], [495, 338], [495, 339], [495, 340], [495, 341], [495, 342], [495, 343], [495, 344], [495, 345], [495, 346], [495, 347], [495, 348], [495, 349], [495, 350], [495, 351], [495, 352], [495, 353], [495, 354], [495, 355], [495, 356], [495, 357], [495, 358], [495, 359], [495, 360], [495, 361], [495, 362], [495, 363], [495, 364], [495, 365], [495, 366], [495, 367], [495, 368], [495, 369], [495, 370], [495, 371], [495, 372], [495, 373], [495, 374], [495, 375], [495, 376], [495, 377], [495, 378], [495, 379], [495, 380], [495, 381], [495, 382], [495, 383], [495, 384], [495, 385], [495, 386], [495, 387], [495, 388], [495, 389], [495, 390], [495, 391], [495, 392], [495, 393], [495, 394], [495, 395], [495, 396], [495, 397], [495, 398], [495, 399], [495, 400], [495, 401], [495, 402], [495, 403], [495, 404], [495, 405], [495, 406], [495, 407], [495, 408], [495, 409], [495, 410], [495, 411], [495, 413], [495, 414], [495, 416], [495, 418], [495, 420], [496, 61], [496, 63], [496, 65], [496, 69], [496, 70], [496, 72], [496, 74], [496, 80], [496, 82], [496, 89], [496, 237], [496, 239], [496, 241], [496, 243], [496, 245], [496, 246], [496, 249], [496, 250], [496, 252], [496, 254], [496, 256], [496, 258], [496, 260], [496, 261], [496, 262], [496, 263], [496, 264], [496, 265], [496, 266], [496, 267], [496, 268], [496, 269], [496, 270], [496, 271], [496, 272], [496, 273], [496, 274], [496, 275], [496, 276], [496, 277], [496, 278], [496, 279], [496, 280], [496, 281], [496, 282], [496, 283], [496, 284], [496, 285], [496, 286], [496, 287], [496, 288], [496, 289], [496, 290], [496, 291], [496, 292], [496, 293], [496, 294], [496, 295], [496, 296], [496, 297], [496, 298], [496, 299], [496, 300], [496, 301], [496, 302], [496, 303], [496, 304], [496, 305], [496, 306], [496, 307], [496, 308], [496, 309], [496, 310], [496, 311], [496, 312], [496, 313], [496, 314], [496, 315], [496, 316], [496, 317], [496, 318], [496, 319], [496, 320], [496, 321], [496, 322], [496, 323], [496, 324], [496, 325], [496, 326], [496, 327], [496, 328], [496, 329], [496, 330], [496, 331], [496, 332], [496, 333], [496, 334], [496, 335], [496, 336], [496, 337], [496, 338], [496, 339], [496, 340], [496, 341], [496, 342], [496, 343], [496, 344], [496, 345], [496, 346], [496, 347], [496, 348], [496, 349], [496, 350], [496, 351], [496, 352], [496, 353], [496, 354], [496, 355], [496, 356], [496, 357], [496, 358], [496, 359], [496, 360], [496, 361], [496, 362], [496, 363], [496, 364], [496, 365], [496, 366], [496, 367], [496, 368], [496, 369], [496, 370], [496, 371], [496, 372], [496, 373], [496, 374], [496, 375], [496, 376], [496, 377], [496, 378], [496, 379], [496, 380], [496, 381], [496, 382], [496, 383], [496, 384], [496, 385], [496, 386], [496, 387], [496, 388], [496, 389], [496, 390], [496, 391], [496, 392], [496, 393], [496, 394], [496, 395], [496, 396], [496, 397], [496, 398], [496, 399], [496, 400], [496, 401], [496, 402], [496, 403], [496, 404], [496, 405], [496, 406], [496, 407], [496, 408], [496, 409], [496, 411], [496, 413], [496, 415], [497, 62], [497, 64], [497, 66], [497, 68], [497, 69], [497, 70], [497, 72], [497, 74], [497, 76], [497, 77], [497, 79], [497, 81], [497, 83], [497, 85], [497, 92], [497, 205], [497, 211], [497, 215], [497, 217], [497, 222], [497, 224], [497, 226], [497, 228], [497, 230], [497, 233], [497, 234], [497, 235], [497, 237], [497, 238], [497, 239], [497, 240], [497, 241], [497, 242], [497, 243], [497, 244], [497, 245], [497, 246], [497, 247], [497, 248], [497, 249], [497, 250], [497, 251], [497, 252], [497, 253], [497, 254], [497, 255], [497, 256], [497, 257], [497, 258], [497, 259], [497, 260], [497, 261], [497, 262], [497, 263], [497, 264], [497, 265], [497, 266], [497, 267], [497, 268], [497, 269], [497, 270], [497, 271], [497, 272], [497, 273], [497, 274], [497, 275], [497, 276], [497, 277], [497, 278], [497, 279], [497, 280], [497, 281], [497, 282], [497, 283], [497, 284], [497, 285], [497, 286], [497, 287], [497, 288], [497, 289], [497, 290], [497, 291], [497, 292], [497, 293], [497, 294], [497, 295], [497, 296], [497, 297], [497, 298], [497, 299], [497, 300], [497, 301], [497, 302], [497, 303], [497, 304], [497, 305], [497, 306], [497, 307], [497, 308], [497, 309], [497, 310], [497, 311], [497, 312], [497, 313], [497, 314], [497, 315], [497, 316], [497, 317], [497, 318], [497, 319], [497, 320], [497, 321], [497, 322], [497, 323], [497, 324], [497, 325], [497, 326], [497, 327], [497, 328], [497, 329], [497, 330], [497, 331], [497, 332], [497, 333], [497, 334], [497, 335], [497, 336], [497, 337], [497, 338], [497, 339], [497, 340], [497, 341], [497, 342], [497, 343], [497, 344], [497, 345], [497, 346], [497, 347], [497, 348], [497, 349], [497, 350], [497, 351], [497, 352], [497, 353], [497, 354], [497, 355], [497, 356], [497, 357], [497, 358], [497, 359], [497, 360], [497, 361], [497, 362], [497, 363], [497, 364], [497, 365], [497, 366], [497, 367], [497, 368], [497, 369], [497, 370], [497, 371], [497, 372], [497, 373], [497, 374], [497, 375], [497, 376], [497, 377], [497, 378], [497, 379], [497, 380], [497, 381], [497, 382], [497, 383], [497, 384], [497, 385], [497, 386], [497, 387], [497, 388], [497, 389], [497, 390], [497, 391], [497, 392], [497, 393], [497, 394], [497, 395], [497, 396], [497, 397], [497, 398], [497, 399], [497, 400], [497, 401], [497, 402], [497, 403], [497, 404], [497, 405], [497, 406], [497, 407], [497, 410], [497, 415], [498, 64], [498, 67], [498, 68], [498, 70], [498, 71], [498, 73], [498, 75], [498, 77], [498, 79], [498, 82], [498, 84], [498, 86], [498, 160], [498, 181], [498, 183], [498, 185], [498, 187], [498, 191], [498, 192], [498, 194], [498, 196], [498, 198], [498, 200], [498, 202], [498, 204], [498, 207], [498, 209], [498, 211], [498, 212], [498, 213], [498, 215], [498, 216], [498, 217], [498, 218], [498, 219], [498, 220], [498, 221], [498, 222], [498, 223], [498, 224], [498, 225], [498, 226], [498, 227], [498, 228], [498, 229], [498, 230], [498, 231], [498, 232], [498, 233], [498, 234], [498, 235], [498, 236], [498, 237], [498, 238], [498, 239], [498, 240], [498, 241], [498, 242], [498, 243], [498, 244], [498, 245], [498, 246], [498, 247], [498, 248], [498, 249], [498, 250], [498, 251], [498, 252], [498, 253], [498, 254], [498, 255], [498, 256], [498, 257], [498, 258], [498, 259], [498, 260], [498, 261], [498, 262], [498, 263], [498, 264], [498, 265], [498, 266], [498, 267], [498, 268], [498, 269], [498, 270], [498, 271], [498, 272], [498, 273], [498, 274], [498, 275], [498, 276], [498, 277], [498, 278], [498, 279], [498, 280], [498, 281], [498, 282], [498, 283], [498, 284], [498, 285], [498, 286], [498, 287], [498, 288], [498, 289], [498, 290], [498, 291], [498, 292], [498, 293], [498, 294], [498, 295], [498, 296], [498, 297], [498, 298], [498, 299], [498, 300], [498, 301], [498, 302], [498, 303], [498, 304], [498, 305], [498, 306], [498, 307], [498, 308], [498, 309], [498, 310], [498, 311], [498, 312], [498, 313], [498, 314], [498, 315], [498, 316], [498, 317], [498, 318], [498, 319], [498, 320], [498, 321], [498, 322], [498, 323], [498, 324], [498, 325], [498, 326], [498, 327], [498, 328], [498, 329], [498, 330], [498, 331], [498, 332], [498, 333], [498, 334], [498, 335], [498, 336], [498, 337], [498, 338], [498, 339], [498, 340], [498, 341], [498, 342], [498, 343], [498, 344], [498, 345], [498, 346], [498, 347], [498, 348], [498, 349], [498, 350], [498, 351], [498, 352], [498, 353], [498, 354], [498, 355], [498, 356], [498, 357], [498, 358], [498, 359], [498, 360], [498, 361], [498, 362], [498, 363], [498, 364], [498, 365], [498, 366], [498, 367], [498, 368], [498, 369], [498, 370], [498, 371], [498, 372], [498, 373], [498, 374], [498, 375], [498, 376], [498, 377], [498, 378], [498, 379], [498, 380], [498, 381], [498, 382], [498, 383], [498, 384], [498, 385], [498, 386], [498, 387], [498, 388], [498, 389], [498, 390], [498, 391], [498, 392], [498, 393], [498, 394], [498, 395], [498, 396], [498, 397], [498, 398], [498, 399], [498, 400], [498, 401], [498, 402], [498, 403], [498, 405], [498, 408], [498, 410]]
from collections import defaultdict 
####matrix to save the distances from the robot position 
dist_dijkstra=[] 
#####
####matrix to save the path from robot postition to each cell
path_dijkstra=[]
copy=[]
dijkstra_cells=[]
average=0
map_scanned=0
appropriate_cell=0
appropriate_path=[]

list_obstacles=[[20, 249], [21, 238], [21, 249], [22, 221], [22, 225], [22, 249], [23, 249], [24, 249], [25, 249], [26, 249], [27, 249], [259, 244], [259, 245], [259, 253], [259, 254], [260, 245], [260, 247], [260, 248], [260, 249], [260, 250], [260, 251], [260, 253], [260, 254], [261, 206], [261, 207], [261, 208], [261, 209], [261, 210], [261, 211], [261, 212], [261, 213], [261, 214], [261, 215], [261, 216], [261, 217], [261, 218], [261, 219], [261, 220], [261, 221], [261, 222], [261, 223], [261, 224], [261, 225], [261, 226], [261, 227], [261, 228], [261, 229], [261, 230], [261, 231], [261, 232], [261, 233], [261, 234], [261, 235], [261, 236], [261, 237], [261, 238], [261, 239], [261, 240], [261, 241], [261, 242], [261, 243], [261, 244], [261, 245], [261, 246], [261, 247], [261, 248], [261, 249], [261, 250], [261, 251], [261, 252], [261, 253], [261, 254], [261, 255], [261, 256], [261, 257], [261, 258], [261, 259], [261, 260], [261, 261], [261, 262], [261, 263], [261, 264], [261, 265], [261, 266], [261, 267], [261, 268], [261, 269], [261, 270], [261, 271], [261, 272], [261, 273], [261, 274], [261, 275], [261, 276], [261, 277], [261, 278], [261, 279], [261, 280], [261, 281], [261, 282], [261, 283], [261, 284], [261, 285], [261, 286], [261, 287], [261, 288], [261, 289], [261, 290], [261, 291], [261, 292], [261, 293], [261, 294], [261, 295], [261, 296], [261, 297], [262, 206], [262, 207], [262, 208], [262, 209], [262, 210], [262, 211], [262, 212], [262, 213], [262, 214], [262, 215], [262, 216], [262, 217], [262, 218], [262, 219], [262, 220], [262, 221], [262, 222], [262, 223], [262, 224], [262, 225], [262, 226], [262, 227], [262, 228], [262, 229], [262, 230], [262, 231], [262, 232], [262, 233], [262, 234], [262, 235], [262, 236], [262, 237], [262, 238], [262, 239], [262, 240], [262, 241], [262, 242], [262, 243], [262, 244], [262, 245], [262, 246], [262, 247], [262, 248], [262, 249], [262, 250], [262, 251], [262, 252], [262, 253], [262, 254], [262, 255], [262, 256], [262, 257], [262, 258], [262, 259], [262, 260], [262, 261], [262, 262], [262, 263], [262, 264], [262, 265], [262, 266], [262, 267], [262, 268], [262, 269], [262, 270], [262, 271], [262, 272], [262, 273], [262, 274], [262, 275], [262, 276], [262, 277], [262, 278], [262, 279], [262, 280], [262, 281], [262, 282], [262, 283], [262, 284], [262, 285], [262, 286], [262, 287], [262, 288], [262, 289], [262, 290], [262, 291], [262, 292], [262, 293], [262, 294], [262, 295], [262, 296], [262, 297], [263, 206], [263, 207], [263, 208], [263, 209], [263, 210], [263, 211], [263, 212], [263, 213], [263, 214], [263, 215], [263, 216], [263, 217], [263, 218], [263, 219], [263, 220], [263, 221], [263, 222], [263, 223], [263, 224], [263, 225], [263, 226], [263, 227], [263, 228], [263, 229], [263, 230], [263, 231], [263, 232], [263, 233], [263, 234], [263, 235], [263, 236], [263, 237], [263, 238], [263, 239], [263, 240], [263, 241], [263, 242], [263, 243], [263, 244], [263, 245], [263, 246], [263, 247], [263, 248], [263, 249], [263, 250], [263, 251], [263, 252], [263, 253], [263, 254], [263, 255], [263, 256], [263, 257], [263, 258], [263, 259], [263, 260], [263, 261], [263, 262], [263, 263], [263, 264], [263, 265], [263, 266], [263, 267], [263, 268], [263, 269], [263, 270], [263, 271], [263, 272], [263, 273], [263, 274], [263, 275], [263, 276], [263, 277], [263, 278], [263, 279], [263, 280], [263, 281], [263, 282], [263, 283], [263, 284], [263, 285], [263, 286], [263, 287], [263, 288], [263, 289], [263, 290], [263, 291], [263, 292], [263, 293], [263, 294], [263, 295], [263, 296], [263, 297], [264, 206], [264, 207], [264, 208], [264, 209], [264, 210], [264, 211], [264, 212], [264, 213], [264, 214], [264, 215], [264, 216], [264, 217], [264, 218], [264, 219], [264, 220], [264, 221], [264, 222], [264, 223], [264, 224], [264, 225], [264, 226], [264, 227], [264, 228], [264, 229], [264, 230], [264, 231], [264, 232], [264, 233], [264, 234], [264, 235], [264, 236], [264, 237], [264, 238], [264, 239], [264, 240], [264, 241], [264, 242], [264, 243], [264, 244], [264, 245], [264, 246], [264, 247], [264, 248], [264, 249], [264, 250], [264, 251], [264, 252], [264, 253], [264, 254], [264, 255], [264, 256], [264, 257], [264, 258], [264, 259], [264, 260], [264, 261], [264, 262], [264, 263], [264, 264], [264, 265], [264, 266], [264, 267], [264, 268], [264, 269], [264, 270], [264, 271], [264, 272], [264, 273], [264, 274], [264, 275], [264, 276], [264, 277], [264, 278], [264, 279], [264, 280], [264, 281], [264, 282], [264, 283], [264, 284], [264, 285], [264, 286], [264, 287], [264, 288], [264, 289], [264, 290], [264, 291], [264, 292], [264, 293], [264, 294], [264, 295], [264, 296], [264, 297], [265, 206], [265, 207], [265, 208], [265, 209], [265, 210], [265, 211], [265, 212], [265, 213], [265, 214], [265, 215], [265, 216], [265, 217], [265, 218], [265, 219], [265, 220], [265, 221], [265, 222], [265, 223], [265, 224], [265, 225], [265, 226], [265, 227], [265, 228], [265, 229], [265, 230], [265, 231], [265, 232], [265, 233], [265, 234], [265, 235], [265, 236], [265, 237], [265, 238], [265, 239], [265, 240], [265, 241], [265, 242], [265, 243], [265, 244], [265, 245], [265, 246], [265, 247], [265, 248], [265, 249], [265, 250], [265, 251], [265, 252], [265, 253], [265, 254], [265, 255], [265, 256], [265, 257], [265, 258], [265, 259], [265, 260], [265, 261], [265, 262], [265, 263], [265, 264], [265, 265], [265, 266], [265, 267], [265, 268], [265, 269], [265, 270], [265, 271], [265, 272], [265, 273], [265, 274], [265, 275], [265, 276], [265, 277], [265, 278], [265, 279], [265, 280], [265, 281], [265, 282], [265, 283], [265, 284], [265, 285], [265, 286], [265, 287], [265, 288], [265, 289], [265, 290], [265, 291], [265, 292], [265, 293], [265, 294], [265, 295], [265, 296], [265, 297], [266, 206], [266, 207], [266, 208], [266, 209], [266, 210], [266, 211], [266, 212], [266, 213], [266, 214], [266, 215], [266, 216], [266, 217], [266, 218], [266, 219], [266, 220], [266, 221], [266, 222], [266, 223], [266, 224], [266, 225], [266, 226], [266, 227], [266, 228], [266, 229], [266, 230], [266, 231], [266, 232], [266, 233], [266, 234], [266, 235], [266, 236], [266, 237], [266, 238], [266, 239], [266, 240], [266, 241], [266, 242], [266, 243], [266, 244], [266, 245], [266, 246], [266, 247], [266, 248], [266, 249], [266, 250], [266, 251], [266, 252], [266, 253], [266, 254], [266, 255], [266, 256], [266, 257], [266, 258], [266, 259], [266, 260], [266, 261], [266, 262], [266, 263], [266, 264], [266, 265], [266, 266], [266, 267], [266, 268], [266, 269], [266, 270], [266, 271], [266, 272], [266, 273], [266, 274], [266, 275], [266, 276], [266, 277], [266, 278], [266, 279], [266, 280], [266, 281], [266, 282], [266, 283], [266, 284], [266, 285], [266, 286], [266, 287], [266, 288], [266, 289], [266, 290], [266, 291], [266, 292], [266, 293], [266, 294], [266, 295], [266, 296], [266, 297], [267, 206], [267, 207], [267, 208], [267, 209], [267, 210], [267, 211], [267, 212], [267, 213], [267, 214], [267, 215], [267, 216], [267, 217], [267, 218], [267, 219], [267, 220], [267, 221], [267, 222], [267, 223], [267, 224], [267, 225], [267, 226], [267, 227], [267, 228], [267, 229], [267, 230], [267, 231], [267, 232], [267, 233], [267, 234], [267, 235], [267, 236], [267, 237], [267, 238], [267, 239], [267, 240], [267, 241], [267, 242], [267, 243], [267, 244], [267, 245], [267, 246], [267, 247], [267, 248], [267, 249], [267, 250], [267, 251], [267, 252], [267, 253], [267, 254], [267, 255], [267, 256], [267, 257], [267, 258], [267, 259], [267, 260], [267, 261], [267, 262], [267, 263], [267, 264], [267, 265], [267, 266], [267, 267], [267, 268], [267, 269], [267, 270], [267, 271], [267, 272], [267, 273], [267, 274], [267, 275], [267, 276], [267, 277], [267, 278], [267, 279], [267, 280], [267, 281], [267, 282], [267, 283], [267, 284], [267, 285], [267, 286], [267, 287], [267, 288], [267, 289], [267, 290], [267, 291], [267, 292], [267, 293], [267, 294], [267, 295], [267, 296], [267, 297], [268, 206], [268, 207], [268, 208], [268, 209], [268, 210], [268, 211], [268, 212], [268, 213], [268, 214], [268, 215], [268, 216], [268, 217], [268, 218], [268, 219], [268, 220], [268, 221], [268, 222], [268, 223], [268, 224], [268, 225], [268, 226], [268, 227], [268, 228], [268, 229], [268, 230], [268, 231], [268, 232], [268, 233], [268, 234], [268, 235], [268, 236], [268, 237], [268, 238], [268, 239], [268, 240], [268, 241], [268, 242], [268, 243], [268, 244], [268, 245], [268, 246], [268, 247], [268, 248], [268, 249], [268, 250], [268, 251], [268, 252], [268, 253], [268, 254], [268, 255], [268, 256], [268, 257], [268, 258], [268, 259], [268, 260], [268, 261], [268, 262], [268, 263], [268, 264], [268, 265], [268, 266], [268, 267], [268, 268], [268, 269], [268, 270], [268, 271], [268, 272], [268, 273], [268, 274], [268, 275], [268, 276], [268, 277], [268, 278], [268, 279], [268, 280], [268, 281], [268, 282], [268, 283], [268, 284], [268, 285], [268, 286], [268, 287], [268, 288], [268, 289], [268, 290], [268, 291], [268, 292], [268, 293], [268, 294], [268, 295], [268, 296], [268, 297], [269, 206], [269, 207], [269, 208], [269, 209], [269, 210], [269, 211], [269, 212], [269, 213], [269, 214], [269, 215], [269, 216], [269, 217], [269, 218], [269, 219], [269, 220], [269, 221], [269, 222], [269, 223], [269, 224], [269, 225], [269, 226], [269, 227], [269, 228], [269, 229], [269, 230], [269, 231], [269, 232], [269, 233], [269, 234], [269, 235], [269, 236], [269, 237], [269, 238], [269, 239], [269, 240], [269, 241], [269, 242], [269, 243], [269, 244], [269, 245], [269, 246], [269, 247], [269, 248], [269, 249], [269, 250], [269, 251], [269, 252], [269, 253], [269, 254], [269, 255], [269, 256], [269, 257], [269, 258], [269, 259], [269, 260], [269, 261], [269, 262], [269, 263], [269, 264], [269, 265], [269, 266], [269, 267], [269, 268], [269, 269], [269, 270], [269, 271], [269, 272], [269, 273], [269, 274], [269, 275], [269, 276], [269, 277], [269, 278], [269, 279], [269, 280], [269, 281], [269, 282], [269, 283], [269, 284], [269, 285], [269, 286], [269, 287], [269, 288], [269, 289], [269, 290], [269, 291], [269, 292], [269, 293], [269, 294], [269, 295], [269, 296], [269, 297], [270, 206], [270, 207], [270, 208], [270, 209], [270, 210], [270, 211], [270, 212], [270, 213], [270, 214], [270, 215], [270, 216], [270, 217], [270, 218], [270, 219], [270, 220], [270, 221], [270, 222], [270, 223], [270, 224], [270, 225], [270, 226], [270, 227], [270, 228], [270, 229], [270, 230], [270, 231], [270, 232], [270, 233], [270, 234], [270, 235], [270, 236], [270, 237], [270, 238], [270, 239], [270, 240], [270, 241], [270, 242], [270, 243], [270, 244], [270, 245], [270, 246], [270, 247], [270, 248], [270, 249], [270, 250], [270, 251], [270, 252], [270, 253], [270, 254], [270, 255], [270, 256], [270, 257], [270, 258], [270, 259], [270, 260], [270, 261], [270, 262], [270, 263], [270, 264], [270, 265], [270, 266], [270, 267], [270, 268], [270, 269], [270, 270], [270, 271], [270, 272], [270, 273], [270, 274], [270, 275], [270, 276], [270, 277], [270, 278], [270, 279], [270, 280], [270, 281], [270, 282], [270, 283], [270, 284], [270, 285], [270, 286], [270, 287], [270, 288], [270, 289], [270, 290], [270, 291], [270, 292], [270, 293], [270, 294], [270, 295], [270, 296], [270, 297], [271, 206], [271, 207], [271, 208], [271, 209], [271, 210], [271, 211], [271, 212], [271, 213], [271, 214], [271, 215], [271, 216], [271, 217], [271, 218], [271, 219], [271, 220], [271, 221], [271, 222], [271, 223], [271, 224], [271, 225], [271, 226], [271, 227], [271, 228], [271, 229], [271, 230], [271, 231], [271, 232], [271, 233], [271, 234], [271, 235], [271, 236], [271, 237], [271, 238], [271, 239], [271, 240], [271, 241], [271, 242], [271, 243], [271, 244], [271, 245], [271, 246], [271, 247], [271, 248], [271, 249], [271, 250], [271, 251], [271, 252], [271, 253], [271, 254], [271, 255], [271, 256], [271, 257], [271, 258], [271, 259], [271, 260], [271, 261], [271, 262], [271, 263], [271, 264], [271, 265], [271, 266], [271, 267], [271, 268], [271, 269], [271, 270], [271, 271], [271, 272], [271, 273], [271, 274], [271, 275], [271, 276], [271, 277], [271, 278], [271, 279], [271, 280], [271, 281], [271, 282], [271, 283], [271, 284], [271, 285], [271, 286], [271, 287], [271, 288], [271, 289], [271, 290], [271, 291], [271, 292], [271, 293], [271, 294], [271, 295], [271, 296], [271, 297], [272, 206], [272, 207], [272, 208], [272, 209], [272, 210], [272, 211], [272, 212], [272, 213], [272, 214], [272, 215], [272, 216], [272, 217], [272, 218], [272, 219], [272, 220], [272, 221], [272, 222], [272, 223], [272, 224], [272, 225], [272, 226], [272, 227], [272, 228], [272, 229], [272, 230], [272, 231], [272, 232], [272, 233], [272, 234], [272, 235], [272, 236], [272, 237], [272, 238], [272, 239], [272, 240], [272, 241], [272, 242], [272, 243], [272, 244], [272, 245], [272, 246], [272, 247], [272, 248], [272, 249], [272, 250], [272, 251], [272, 252], [272, 253], [272, 254], [272, 255], [272, 256], [272, 257], [272, 258], [272, 259], [272, 260], [272, 261], [272, 262], [272, 263], [272, 264], [272, 265], [272, 266], [272, 267], [272, 268], [272, 269], [272, 270], [272, 271], [272, 272], [272, 273], [272, 274], [272, 275], [272, 276], [272, 277], [272, 278], [272, 279], [272, 280], [272, 281], [272, 282], [272, 283], [272, 284], [272, 285], [272, 286], [272, 287], [272, 288], [272, 289], [272, 290], [272, 291], [272, 292], [272, 293], [272, 294], [272, 295], [272, 296], [272, 297], [273, 206], [273, 207], [273, 208], [273, 209], [273, 210], [273, 211], [273, 212], [273, 213], [273, 214], [273, 215], [273, 216], [273, 217], [273, 218], [273, 219], [273, 220], [273, 221], [273, 222], [273, 223], [273, 224], [273, 225], [273, 226], [273, 227], [273, 228], [273, 229], [273, 230], [273, 231], [273, 232], [273, 233], [273, 234], [273, 235], [273, 236], [273, 237], [273, 238], [273, 239], [273, 240], [273, 241], [273, 242], [273, 243], [273, 244], [273, 245], [273, 246], [273, 247], [273, 248], [273, 249], [273, 250], [273, 251], [273, 252], [273, 253], [273, 254], [273, 255], [273, 256], [273, 257], [273, 258], [273, 259], [273, 260], [273, 261], [273, 262], [273, 263], [273, 264], [273, 265], [273, 266], [273, 267], [273, 268], [273, 269], [273, 270], [273, 271], [273, 272], [273, 273], [273, 274], [273, 275], [273, 276], [273, 277], [273, 278], [273, 279], [273, 280], [273, 281], [273, 282], [273, 283], [273, 284], [273, 285], [273, 286], [273, 287], [273, 288], [273, 289], [273, 290], [273, 291], [273, 292], [273, 293], [273, 294], [273, 295], [273, 296], [273, 297], [274, 206], [274, 207], [274, 208], [274, 209], [274, 210], [274, 211], [274, 212], [274, 213], [274, 214], [274, 215], [274, 216], [274, 217], [274, 218], [274, 219], [274, 220], [274, 221], [274, 222], [274, 223], [274, 224], [274, 225], [274, 226], [274, 227], [274, 228], [274, 229], [274, 230], [274, 231], [274, 232], [274, 233], [274, 234], [274, 235], [274, 236], [274, 237], [274, 238], [274, 239], [274, 240], [274, 241], [274, 242], [274, 243], [274, 244], [274, 245], [274, 246], [274, 247], [274, 248], [274, 249], [274, 250], [274, 251], [274, 252], [274, 253], [274, 254], [274, 255], [274, 256], [274, 257], [274, 258], [274, 259], [274, 260], [274, 261], [274, 262], [274, 263], [274, 264], [274, 265], [274, 266], [274, 267], [274, 268], [274, 269], [274, 270], [274, 271], [274, 272], [274, 273], [274, 274], [274, 275], [274, 276], [274, 277], [274, 278], [274, 279], [274, 280], [274, 281], [274, 282], [274, 283], [274, 284], [274, 285], [274, 286], [274, 287], [274, 288], [274, 289], [274, 290], [274, 291], [274, 292], [274, 293], [274, 294], [274, 295], [274, 296], [274, 297], [275, 206], [275, 207], [275, 208], [275, 209], [275, 210], [275, 211], [275, 212], [275, 213], [275, 214], [275, 215], [275, 216], [275, 217], [275, 218], [275, 219], [275, 220], [275, 221], [275, 222], [275, 223], [275, 224], [275, 225], [275, 226], [275, 227], [275, 228], [275, 229], [275, 230], [275, 231], [275, 232], [275, 233], [275, 234], [275, 235], [275, 236], [275, 237], [275, 238], [275, 239], [275, 240], [275, 241], [275, 242], [275, 243], [275, 244], [275, 245], [275, 246], [275, 247], [275, 248], [275, 249], [275, 250], [275, 251], [275, 252], [275, 253], [275, 254], [275, 255], [275, 256], [275, 257], [275, 258], [275, 259], [275, 260], [275, 261], [275, 262], [275, 263], [275, 264], [275, 265], [275, 266], [275, 267], [275, 268], [275, 269], [275, 270], [275, 271], [275, 272], [275, 273], [275, 274], [275, 275], [275, 276], [275, 277], [275, 278], [275, 279], [275, 280], [275, 281], [275, 282], [275, 283], [275, 284], [275, 285], [275, 286], [275, 287], [275, 288], [275, 289], [275, 290], [275, 291], [275, 292], [275, 293], [275, 294], [275, 295], [275, 296], [275, 297], [276, 206], [276, 207], [276, 208], [276, 209], [276, 210], [276, 211], [276, 212], [276, 213], [276, 214], [276, 215], [276, 216], [276, 217], [276, 218], [276, 219], [276, 220], [276, 221], [276, 222], [276, 223], [276, 224], [276, 225], [276, 226], [276, 227], [276, 228], [276, 229], [276, 230], [276, 231], [276, 232], [276, 233], [276, 234], [276, 235], [276, 236], [276, 237], [276, 238], [276, 239], [276, 240], [276, 241], [276, 242], [276, 243], [276, 244], [276, 245], [276, 246], [276, 247], [276, 248], [276, 249], [276, 250], [276, 251], [276, 252], [276, 253], [276, 254], [276, 255], [276, 256], [276, 257], [276, 258], [276, 259], [276, 260], [276, 261], [276, 262], [276, 263], [276, 264], [276, 265], [276, 266], [276, 267], [276, 268], [276, 269], [276, 270], [276, 271], [276, 272], [276, 273], [276, 274], [276, 275], [276, 276], [276, 277], [276, 278], [276, 279], [276, 280], [276, 281], [276, 282], [276, 283], [276, 284], [276, 285], [276, 286], [276, 287], [276, 288], [276, 289], [276, 290], [276, 291], [276, 292], [276, 293], [276, 294], [276, 295], [276, 296], [276, 297], [277, 206], [277, 207], [277, 208], [277, 209], [277, 210], [277, 211], [277, 212], [277, 213], [277, 214], [277, 215], [277, 216], [277, 217], [277, 218], [277, 219], [277, 220], [277, 221], [277, 222], [277, 223], [277, 224], [277, 225], [277, 226], [277, 227], [277, 228], [277, 229], [277, 230], [277, 231], [277, 232], [277, 233], [277, 234], [277, 235], [277, 236], [277, 237], [277, 238], [277, 239], [277, 240], [277, 241], [277, 242], [277, 243], [277, 244], [277, 245], [277, 246], [277, 247], [277, 248], [277, 249], [277, 250], [277, 251], [277, 252], [277, 253], [277, 254], [277, 255], [277, 256], [277, 257], [277, 258], [277, 259], [277, 260], [277, 261], [277, 262], [277, 263], [277, 264], [277, 265], [277, 266], [277, 267], [277, 268], [277, 269], [277, 270], [277, 271], [277, 272], [277, 273], [277, 274], [277, 275], [277, 276], [277, 277], [277, 278], [277, 279], [277, 280], [277, 281], [277, 282], [277, 283], [277, 284], [277, 285], [277, 286], [277, 287], [277, 288], [277, 289], [277, 290], [277, 291], [277, 292], [277, 293], [277, 294], [277, 295], [277, 296], [277, 297], [278, 206], [278, 207], [278, 208], [278, 209], [278, 210], [278, 211], [278, 212], [278, 213], [278, 214], [278, 215], [278, 216], [278, 217], [278, 218], [278, 219], [278, 220], [278, 221], [278, 222], [278, 223], [278, 224], [278, 225], [278, 226], [278, 227], [278, 228], [278, 229], [278, 230], [278, 231], [278, 232], [278, 233], [278, 234], [278, 235], [278, 236], [278, 237], [278, 238], [278, 239], [278, 240], [278, 241], [278, 242], [278, 243], [278, 244], [278, 245], [278, 246], [278, 247], [278, 248], [278, 249], [278, 250], [278, 251], [278, 252], [278, 253], [278, 254], [278, 255], [278, 256], [278, 257], [278, 258], [278, 259], [278, 260], [278, 261], [278, 262], [278, 263], [278, 264], [278, 265], [278, 266], [278, 267], [278, 268], [278, 269], [278, 270], [278, 271], [278, 272], [278, 273], [278, 274], [278, 275], [278, 276], [278, 277], [278, 278], [278, 279], [278, 280], [278, 281], [278, 282], [278, 283], [278, 284], [278, 285], [278, 286], [278, 287], [278, 288], [278, 289], [278, 290], [278, 291], [278, 292], [278, 293], [278, 294], [278, 295], [278, 296], [278, 297], [279, 206], [279, 207], [279, 208], [279, 209], [279, 210], [279, 211], [279, 212], [279, 213], [279, 214], [279, 215], [279, 216], [279, 217], [279, 218], [279, 219], [279, 220], [279, 221], [279, 222], [279, 223], [279, 224], [279, 225], [279, 226], [279, 227], [279, 228], [279, 229], [279, 230], [279, 231], [279, 232], [279, 233], [279, 234], [279, 235], [279, 236], [279, 237], [279, 238], [279, 239], [279, 240], [279, 241], [279, 242], [279, 243], [279, 244], [279, 245], [279, 246], [279, 247], [279, 248], [279, 249], [279, 250], [279, 251], [279, 252], [279, 253], [279, 254], [279, 255], [279, 256], [279, 257], [279, 258], [279, 259], [279, 260], [279, 261], [279, 262], [279, 263], [279, 264], [279, 265], [279, 266], [279, 267], [279, 268], [279, 269], [279, 270], [279, 271], [279, 272], [279, 273], [279, 274], [279, 275], [279, 276], [279, 277], [279, 278], [279, 279], [279, 280], [279, 281], [279, 282], [279, 283], [279, 284], [279, 285], [279, 286], [279, 287], [279, 288], [279, 289], [279, 290], [279, 291], [279, 292], [279, 293], [279, 294], [279, 295], [279, 296], [279, 297], [280, 206], [280, 207], [280, 208], [280, 209], [280, 210], [280, 211], [280, 212], [280, 213], [280, 214], [280, 215], [280, 216], [280, 217], [280, 218], [280, 219], [280, 220], [280, 221], [280, 222], [280, 223], [280, 224], [280, 225], [280, 226], [280, 227], [280, 228], [280, 229], [280, 230], [280, 231], [280, 232], [280, 233], [280, 234], [280, 235], [280, 236], [280, 237], [280, 238], [280, 239], [280, 240], [280, 241], [280, 242], [280, 243], [280, 244], [280, 245], [280, 246], [280, 247], [280, 248], [280, 249], [280, 250], [280, 251], [280, 252], [280, 253], [280, 254], [280, 255], [280, 256], [280, 257], [280, 258], [280, 259], [280, 260], [280, 261], [280, 262], [280, 263], [280, 264], [280, 265], [280, 266], [280, 267], [280, 268], [280, 269], [280, 270], [280, 271], [280, 272], [280, 273], [280, 274], [280, 275], [280, 276], [280, 277], [280, 278], [280, 279], [280, 280], [280, 281], [280, 282], [280, 283], [280, 284], [280, 285], [280, 286], [280, 287], [280, 288], [280, 289], [280, 290], [280, 291], [280, 292], [280, 293], [280, 294], [280, 295], [280, 296], [280, 297], [281, 206], [281, 207], [281, 208], [281, 209], [281, 210], [281, 211], [281, 212], [281, 213], [281, 214], [281, 215], [281, 216], [281, 217], [281, 218], [281, 219], [281, 220], [281, 221], [281, 222], [281, 223], [281, 224], [281, 225], [281, 226], [281, 227], [281, 228], [281, 229], [281, 230], [281, 231], [281, 232], [281, 233], [281, 234], [281, 235], [281, 236], [281, 237], [281, 238], [281, 239], [281, 240], [281, 241], [281, 242], [281, 243], [281, 244], [281, 245], [281, 246], [281, 247], [281, 248], [281, 249], [281, 250], [281, 251], [281, 252], [281, 253], [281, 254], [281, 255], [281, 256], [281, 257], [281, 258], [281, 259], [281, 260], [281, 261], [281, 262], [281, 263], [281, 264], [281, 265], [281, 266], [281, 267], [281, 268], [281, 269], [281, 270], [281, 271], [281, 272], [281, 273], [281, 274], [281, 275], [281, 276], [281, 277], [281, 278], [281, 279], [281, 280], [281, 281], [281, 282], [281, 283], [281, 284], [281, 285], [281, 286], [281, 287], [281, 288], [281, 289], [281, 290], [281, 291], [281, 292], [281, 293], [281, 294], [281, 295], [281, 296], [281, 297], [282, 206], [282, 207], [282, 208], [282, 209], [282, 210], [282, 211], [282, 212], [282, 213], [282, 214], [282, 215], [282, 216], [282, 217], [282, 218], [282, 219], [282, 220], [282, 221], [282, 222], [282, 223], [282, 224], [282, 225], [282, 226], [282, 227], [282, 228], [282, 229], [282, 230], [282, 231], [282, 232], [282, 233], [282, 234], [282, 235], [282, 236], [282, 237], [282, 238], [282, 239], [282, 240], [282, 241], [282, 242], [282, 243], [282, 244], [282, 245], [282, 246], [282, 247], [282, 248], [282, 249], [282, 250], [282, 251], [282, 252], [282, 253], [282, 254], [282, 255], [282, 256], [282, 257], [282, 258], [282, 259], [282, 260], [282, 261], [282, 262], [282, 263], [282, 264], [282, 265], [282, 266], [282, 267], [282, 268], [282, 269], [282, 270], [282, 271], [282, 272], [282, 273], [282, 274], [282, 275], [282, 276], [282, 277], [282, 278], [282, 279], [282, 280], [282, 281], [282, 282], [282, 283], [282, 284], [282, 285], [282, 286], [282, 287], [282, 288], [282, 289], [282, 290], [282, 291], [282, 292], [282, 293], [282, 294], [282, 295], [282, 296], [282, 297], [283, 206], [283, 207], [283, 208], [283, 209], [283, 210], [283, 211], [283, 212], [283, 213], [283, 214], [283, 215], [283, 216], [283, 217], [283, 218], [283, 219], [283, 220], [283, 221], [283, 222], [283, 223], [283, 224], [283, 225], [283, 226], [283, 227], [283, 228], [283, 229], [283, 230], [283, 231], [283, 232], [283, 233], [283, 234], [283, 235], [283, 236], [283, 237], [283, 238], [283, 239], [283, 240], [283, 241], [283, 242], [283, 243], [283, 244], [283, 245], [283, 246], [283, 247], [283, 248], [283, 249], [283, 250], [283, 251], [283, 252], [283, 253], [283, 254], [283, 255], [283, 256], [283, 257], [283, 258], [283, 259], [283, 260], [283, 261], [283, 262], [283, 263], [283, 264], [283, 265], [283, 266], [283, 267], [283, 268], [283, 269], [283, 270], [283, 271], [283, 272], [283, 273], [283, 274], [283, 275], [283, 276], [283, 277], [283, 278], [283, 279], [283, 280], [283, 281], [283, 282], [283, 283], [283, 284], [283, 285], [283, 286], [283, 287], [283, 288], [283, 289], [283, 290], [283, 291], [283, 292], [283, 293], [283, 294], [283, 295], [283, 296], [283, 297], [284, 206], [284, 207], [284, 208], [284, 209], [284, 210], [284, 211], [284, 212], [284, 213], [284, 214], [284, 215], [284, 216], [284, 217], [284, 218], [284, 219], [284, 220], [284, 221], [284, 222], [284, 223], [284, 224], [284, 225], [284, 226], [284, 227], [284, 228], [284, 229], [284, 230], [284, 231], [284, 232], [284, 233], [284, 234], [284, 235], [284, 236], [284, 237], [284, 238], [284, 239], [284, 240], [284, 241], [284, 242], [284, 243], [284, 244], [284, 245], [284, 246], [284, 247], [284, 248], [284, 249], [284, 250], [284, 251], [284, 252], [284, 253], [284, 254], [284, 255], [284, 256], [284, 257], [284, 258], [284, 259], [284, 260], [284, 261], [284, 262], [284, 263], [284, 264], [284, 265], [284, 266], [284, 267], [284, 268], [284, 269], [284, 270], [284, 271], [284, 272], [284, 273], [284, 274], [284, 275], [284, 276], [284, 277], [284, 278], [284, 279], [284, 280], [284, 281], [284, 282], [284, 283], [284, 284], [284, 285], [284, 286], [284, 287], [284, 288], [284, 289], [284, 290], [284, 291], [284, 292], [284, 293], [284, 294], [284, 295], [284, 296], [284, 297], [285, 206], [285, 207], [285, 208], [285, 209], [285, 210], [285, 211], [285, 212], [285, 213], [285, 214], [285, 215], [285, 216], [285, 217], [285, 218], [285, 219], [285, 220], [285, 221], [285, 222], [285, 223], [285, 224], [285, 225], [285, 226], [285, 227], [285, 228], [285, 229], [285, 230], [285, 231], [285, 232], [285, 233], [285, 234], [285, 235], [285, 236], [285, 237], [285, 238], [285, 239], [285, 240], [285, 241], [285, 242], [285, 243], [285, 244], [285, 245], [285, 246], [285, 247], [285, 248], [285, 249], [285, 250], [285, 251], [285, 252], [285, 253], [285, 254], [285, 255], [285, 256], [285, 257], [285, 258], [285, 259], [285, 260], [285, 261], [285, 262], [285, 263], [285, 264], [285, 265], [285, 266], [285, 267], [285, 268], [285, 269], [285, 270], [285, 271], [285, 272], [285, 273], [285, 274], [285, 275], [285, 276], [285, 277], [285, 278], [285, 279], [285, 280], [285, 281], [285, 282], [285, 283], [285, 284], [285, 285], [285, 286], [285, 287], [285, 288], [285, 289], [285, 290], [285, 291], [285, 292], [285, 293], [285, 294], [285, 295], [285, 296], [285, 297], [286, 206], [286, 207], [286, 208], [286, 209], [286, 210], [286, 211], [286, 212], [286, 213], [286, 214], [286, 215], [286, 216], [286, 217], [286, 218], [286, 219], [286, 220], [286, 221], [286, 222], [286, 223], [286, 224], [286, 225], [286, 226], [286, 227], [286, 228], [286, 229], [286, 230], [286, 231], [286, 232], [286, 233], [286, 234], [286, 235], [286, 236], [286, 237], [286, 238], [286, 239], [286, 240], [286, 241], [286, 242], [286, 243], [286, 244], [286, 245], [286, 246], [286, 247], [286, 248], [286, 249], [286, 250], [286, 251], [286, 252], [286, 253], [286, 254], [286, 255], [286, 256], [286, 257], [286, 258], [286, 259], [286, 260], [286, 261], [286, 262], [286, 263], [286, 264], [286, 265], [286, 266], [286, 267], [286, 268], [286, 269], [286, 270], [286, 271], [286, 272], [286, 273], [286, 274], [286, 275], [286, 276], [286, 277], [286, 278], [286, 279], [286, 280], [286, 281], [286, 282], [286, 283], [286, 284], [286, 285], [286, 286], [286, 287], [286, 288], [286, 289], [286, 290], [286, 291], [286, 292], [286, 293], [286, 294], [286, 295], [286, 296], [286, 297], [287, 206], [287, 207], [287, 208], [287, 209], [287, 210], [287, 211], [287, 212], [287, 213], [287, 214], [287, 215], [287, 216], [287, 217], [287, 218], [287, 219], [287, 220], [287, 221], [287, 222], [287, 223], [287, 224], [287, 225], [287, 226], [287, 227], [287, 228], [287, 229], [287, 230], [287, 231], [287, 232], [287, 233], [287, 234], [287, 235], [287, 236], [287, 237], [287, 238], [287, 239], [287, 240], [287, 241], [287, 242], [287, 243], [287, 244], [287, 245], [287, 246], [287, 247], [287, 248], [287, 249], [287, 250], [287, 251], [287, 252], [287, 253], [287, 254], [287, 255], [287, 256], [287, 257], [287, 258], [287, 259], [287, 260], [287, 261], [287, 262], [287, 263], [287, 264], [287, 265], [287, 266], [287, 267], [287, 268], [287, 269], [287, 270], [287, 271], [287, 272], [287, 273], [287, 274], [287, 275], [287, 276], [287, 277], [287, 278], [287, 279], [287, 280], [287, 281], [287, 282], [287, 283], [287, 284], [287, 285], [287, 286], [287, 287], [287, 288], [287, 289], [287, 290], [287, 291], [287, 292], [287, 293], [287, 294], [287, 295], [287, 296], [287, 297], [288, 206], [288, 207], [288, 208], [288, 209], [288, 210], [288, 211], [288, 212], [288, 213], [288, 214], [288, 215], [288, 216], [288, 217], [288, 218], [288, 219], [288, 220], [288, 221], [288, 222], [288, 223], [288, 224], [288, 225], [288, 226], [288, 227], [288, 228], [288, 229], [288, 230], [288, 231], [288, 232], [288, 233], [288, 234], [288, 235], [288, 236], [288, 237], [288, 238], [288, 239], [288, 240], [288, 241], [288, 242], [288, 243], [288, 244], [288, 245], [288, 246], [288, 247], [288, 248], [288, 249], [288, 250], [288, 251], [288, 252], [288, 253], [288, 254], [288, 255], [288, 256], [288, 257], [288, 258], [288, 259], [288, 260], [288, 261], [288, 262], [288, 263], [288, 264], [288, 265], [288, 266], [288, 267], [288, 268], [288, 269], [288, 270], [288, 271], [288, 272], [288, 273], [288, 274], [288, 275], [288, 276], [288, 277], [288, 278], [288, 279], [288, 280], [288, 281], [288, 282], [288, 283], [288, 284], [288, 285], [288, 286], [288, 287], [288, 288], [288, 289], [288, 290], [288, 291], [288, 292], [288, 293], [288, 294], [288, 295], [288, 296], [288, 297], [289, 206], [289, 207], [289, 208], [289, 209], [289, 210], [289, 211], [289, 212], [289, 213], [289, 214], [289, 215], [289, 216], [289, 217], [289, 218], [289, 219], [289, 220], [289, 221], [289, 222], [289, 223], [289, 224], [289, 225], [289, 226], [289, 227], [289, 228], [289, 229], [289, 230], [289, 231], [289, 232], [289, 233], [289, 234], [289, 235], [289, 236], [289, 237], [289, 238], [289, 239], [289, 240], [289, 241], [289, 242], [289, 243], [289, 244], [289, 245], [289, 246], [289, 247], [289, 248], [289, 249], [289, 250], [289, 251], [289, 252], [289, 253], [289, 254], [289, 255], [289, 256], [289, 257], [289, 258], [289, 259], [289, 260], [289, 261], [289, 262], [289, 263], [289, 264], [289, 265], [289, 266], [289, 267], [289, 268], [289, 269], [289, 270], [289, 271], [289, 272], [289, 273], [289, 274], [289, 275], [289, 276], [289, 277], [289, 278], [289, 279], [289, 280], [289, 281], [289, 282], [289, 283], [289, 284], [289, 285], [289, 286], [289, 287], [289, 288], [289, 289], [289, 290], [289, 291], [289, 292], [289, 293], [289, 294], [289, 295], [289, 296], [289, 297], [290, 206], [290, 207], [290, 208], [290, 209], [290, 210], [290, 211], [290, 212], [290, 213], [290, 214], [290, 215], [290, 216], [290, 217], [290, 218], [290, 219], [290, 220], [290, 221], [290, 222], [290, 223], [290, 224], [290, 225], [290, 226], [290, 227], [290, 228], [290, 229], [290, 230], [290, 231], [290, 232], [290, 233], [290, 234], [290, 235], [290, 236], [290, 237], [290, 238], [290, 239], [290, 240], [290, 241], [290, 242], [290, 243], [290, 244], [290, 245], [290, 246], [290, 247], [290, 248], [290, 249], [290, 250], [290, 251], [290, 252], [290, 253], [290, 254], [290, 255], [290, 256], [290, 257], [290, 258], [290, 259], [290, 260], [290, 261], [290, 262], [290, 263], [290, 264], [290, 265], [290, 266], [290, 267], [290, 268], [290, 269], [290, 270], [290, 271], [290, 272], [290, 273], [290, 274], [290, 275], [290, 276], [290, 277], [290, 278], [290, 279], [290, 280], [290, 281], [290, 282], [290, 283], [290, 284], [290, 285], [290, 286], [290, 287], [290, 288], [290, 289], [290, 290], [290, 291], [290, 292], [290, 293], [290, 294], [290, 295], [290, 296], [290, 297], [291, 206], [291, 207], [291, 208], [291, 209], [291, 210], [291, 211], [291, 212], [291, 213], [291, 214], [291, 215], [291, 216], [291, 217], [291, 218], [291, 219], [291, 220], [291, 221], [291, 222], [291, 223], [291, 224], [291, 225], [291, 226], [291, 227], [291, 228], [291, 229], [291, 230], [291, 231], [291, 232], [291, 233], [291, 234], [291, 235], [291, 236], [291, 237], [291, 238], [291, 239], [291, 240], [291, 241], [291, 242], [291, 243], [291, 244], [291, 245], [291, 246], [291, 247], [291, 248], [291, 249], [291, 250], [291, 251], [291, 252], [291, 253], [291, 254], [291, 255], [291, 256], [291, 257], [291, 258], [291, 259], [291, 260], [291, 261], [291, 262], [291, 263], [291, 264], [291, 265], [291, 266], [291, 267], [291, 268], [291, 269], [291, 270], [291, 271], [291, 272], [291, 273], [291, 274], [291, 275], [291, 276], [291, 277], [291, 278], [291, 279], [291, 280], [291, 281], [291, 282], [291, 283], [291, 284], [291, 285], [291, 286], [291, 287], [291, 288], [291, 289], [291, 290], [291, 291], [291, 292], [291, 293], [291, 294], [291, 295], [291, 296], [291, 297], [292, 206], [292, 207], [292, 208], [292, 209], [292, 210], [292, 211], [292, 212], [292, 213], [292, 214], [292, 215], [292, 216], [292, 217], [292, 218], [292, 219], [292, 220], [292, 221], [292, 222], [292, 223], [292, 224], [292, 225], [292, 226], [292, 227], [292, 228], [292, 229], [292, 230], [292, 231], [292, 232], [292, 233], [292, 234], [292, 235], [292, 236], [292, 237], [292, 238], [292, 239], [292, 240], [292, 241], [292, 242], [292, 243], [292, 244], [292, 245], [292, 246], [292, 247], [292, 248], [292, 249], [292, 250], [292, 251], [292, 252], [292, 253], [292, 254], [292, 255], [292, 256], [292, 257], [292, 258], [292, 259], [292, 260], [292, 261], [292, 262], [292, 263], [292, 264], [292, 265], [292, 266], [292, 267], [292, 268], [292, 269], [292, 270], [292, 271], [292, 272], [292, 273], [292, 274], [292, 275], [292, 276], [292, 277], [292, 278], [292, 279], [292, 280], [292, 281], [292, 282], [292, 283], [292, 284], [292, 285], [292, 286], [292, 287], [292, 288], [292, 289], [292, 290], [292, 291], [292, 292], [292, 293], [292, 294], [292, 295], [292, 296], [292, 297], [293, 206], [293, 207], [293, 208], [293, 209], [293, 210], [293, 211], [293, 212], [293, 213], [293, 214], [293, 215], [293, 216], [293, 217], [293, 218], [293, 219], [293, 220], [293, 221], [293, 222], [293, 223], [293, 224], [293, 225], [293, 226], [293, 227], [293, 228], [293, 229], [293, 230], [293, 231], [293, 232], [293, 233], [293, 234], [293, 235], [293, 236], [293, 237], [293, 238], [293, 239], [293, 240], [293, 241], [293, 242], [293, 243], [293, 244], [293, 245], [293, 246], [293, 247], [293, 248], [293, 249], [293, 250], [293, 251], [293, 252], [293, 253], [293, 254], [293, 255], [293, 256], [293, 257], [293, 258], [293, 259], [293, 260], [293, 261], [293, 262], [293, 263], [293, 264], [293, 265], [293, 266], [293, 267], [293, 268], [293, 269], [293, 270], [293, 271], [293, 272], [293, 273], [293, 274], [293, 275], [293, 276], [293, 277], [293, 278], [293, 279], [293, 280], [293, 281], [293, 282], [293, 283], [293, 284], [293, 285], [293, 286], [293, 287], [293, 288], [293, 289], [293, 290], [293, 291], [293, 292], [293, 293], [293, 294], [293, 295], [293, 296], [293, 297], [294, 206], [294, 207], [294, 208], [294, 209], [294, 210], [294, 211], [294, 212], [294, 213], [294, 214], [294, 215], [294, 216], [294, 217], [294, 218], [294, 219], [294, 220], [294, 221], [294, 222], [294, 223], [294, 224], [294, 225], [294, 226], [294, 227], [294, 228], [294, 229], [294, 230], [294, 231], [294, 232], [294, 233], [294, 234], [294, 235], [294, 236], [294, 237], [294, 238], [294, 239], [294, 240], [294, 241], [294, 242], [294, 243], [294, 244], [294, 245], [294, 246], [294, 247], [294, 248], [294, 249], [294, 250], [294, 251], [294, 252], [294, 253], [294, 254], [294, 255], [294, 256], [294, 257], [294, 258], [294, 259], [294, 260], [294, 261], [294, 262], [294, 263], [294, 264], [294, 265], [294, 266], [294, 267], [294, 268], [294, 269], [294, 270], [294, 271], [294, 272], [294, 273], [294, 274], [294, 275], [294, 276], [294, 277], [294, 278], [294, 279], [294, 280], [294, 281], [294, 282], [294, 283], [294, 284], [294, 285], [294, 286], [294, 287], [294, 288], [294, 289], [294, 290], [294, 291], [294, 292], [294, 293], [294, 294], [294, 295], [294, 296], [294, 297], [295, 206], [295, 207], [295, 208], [295, 209], [295, 210], [295, 211], [295, 212], [295, 213], [295, 214], [295, 215], [295, 216], [295, 217], [295, 218], [295, 219], [295, 220], [295, 221], [295, 222], [295, 223], [295, 224], [295, 225], [295, 226], [295, 227], [295, 228], [295, 229], [295, 230], [295, 231], [295, 232], [295, 233], [295, 234], [295, 235], [295, 236], [295, 237], [295, 238], [295, 239], [295, 240], [295, 241], [295, 242], [295, 243], [295, 244], [295, 245], [295, 246], [295, 247], [295, 248], [295, 249], [295, 250], [295, 251], [295, 252], [295, 253], [295, 254], [295, 255], [295, 256], [295, 257], [295, 258], [295, 259], [295, 260], [295, 261], [295, 262], [295, 263], [295, 264], [295, 265], [295, 266], [295, 267], [295, 268], [295, 269], [295, 270], [295, 271], [295, 272], [295, 273], [295, 274], [295, 275], [295, 276], [295, 277], [295, 278], [295, 279], [295, 280], [295, 281], [295, 282], [295, 283], [295, 284], [295, 285], [295, 286], [295, 287], [295, 288], [295, 289], [295, 290], [295, 291], [295, 292], [295, 293], [295, 294], [295, 295], [295, 296], [295, 297], [296, 206], [296, 207], [296, 208], [296, 209], [296, 210], [296, 211], [296, 212], [296, 213], [296, 214], [296, 215], [296, 216], [296, 217], [296, 218], [296, 219], [296, 220], [296, 221], [296, 222], [296, 223], [296, 224], [296, 225], [296, 226], [296, 227], [296, 228], [296, 229], [296, 230], [296, 231], [296, 232], [296, 233], [296, 234], [296, 235], [296, 236], [296, 237], [296, 238], [296, 239], [296, 240], [296, 241], [296, 242], [296, 243], [296, 244], [296, 245], [296, 246], [296, 247], [296, 248], [296, 249], [296, 250], [296, 251], [296, 252], [296, 253], [296, 254], [296, 255], [296, 256], [296, 257], [296, 258], [296, 259], [296, 260], [296, 261], [296, 262], [296, 263], [296, 264], [296, 265], [296, 266], [296, 267], [296, 268], [296, 269], [296, 270], [296, 271], [296, 272], [296, 273], [296, 274], [296, 275], [296, 276], [296, 277], [296, 278], [296, 279], [296, 280], [296, 281], [296, 282], [296, 283], [296, 284], [296, 285], [296, 286], [296, 287], [296, 288], [296, 289], [296, 290], [296, 291], [296, 292], [296, 293], [296, 294], [296, 295], [296, 296], [296, 297], [297, 206], [297, 207], [297, 208], [297, 209], [297, 210], [297, 211], [297, 212], [297, 213], [297, 214], [297, 215], [297, 216], [297, 217], [297, 218], [297, 219], [297, 220], [297, 221], [297, 222], [297, 223], [297, 224], [297, 225], [297, 226], [297, 227], [297, 228], [297, 229], [297, 230], [297, 231], [297, 232], [297, 233], [297, 234], [297, 235], [297, 236], [297, 237], [297, 238], [297, 239], [297, 240], [297, 241], [297, 242], [297, 243], [297, 244], [297, 245], [297, 246], [297, 247], [297, 248], [297, 249], [297, 250], [297, 251], [297, 252], [297, 253], [297, 254], [297, 255], [297, 256], [297, 257], [297, 258], [297, 259], [297, 260], [297, 261], [297, 262], [297, 263], [297, 264], [297, 265], [297, 266], [297, 267], [297, 268], [297, 269], [297, 270], [297, 271], [297, 272], [297, 273], [297, 274], [297, 275], [297, 276], [297, 277], [297, 278], [297, 279], [297, 280], [297, 281], [297, 282], [297, 283], [297, 284], [297, 285], [297, 286], [297, 287], [297, 288], [297, 289], [297, 290], [297, 291], [297, 292], [297, 293], [297, 294], [297, 295], [297, 296], [297, 297], [298, 206], [298, 207], [298, 208], [298, 209], [298, 210], [298, 211], [298, 212], [298, 213], [298, 214], [298, 215], [298, 216], [298, 217], [298, 218], [298, 219], [298, 220], [298, 221], [298, 222], [298, 223], [298, 224], [298, 225], [298, 226], [298, 227], [298, 228], [298, 229], [298, 230], [298, 231], [298, 232], [298, 233], [298, 234], [298, 235], [298, 236], [298, 237], [298, 238], [298, 239], [298, 240], [298, 241], [298, 242], [298, 243], [298, 244], [298, 245], [298, 246], [298, 247], [298, 248], [298, 249], [298, 250], [298, 251], [298, 252], [298, 253], [298, 254], [298, 255], [298, 256], [298, 257], [298, 258], [298, 259], [298, 260], [298, 261], [298, 262], [298, 263], [298, 264], [298, 265], [298, 266], [298, 267], [298, 268], [298, 269], [298, 270], [298, 271], [298, 272], [298, 273], [298, 274], [298, 275], [298, 276], [298, 277], [298, 278], [298, 279], [298, 280], [298, 281], [298, 282], [298, 283], [298, 284], [298, 285], [298, 286], [298, 287], [298, 288], [298, 289], [298, 290], [298, 291], [298, 292], [298, 293], [298, 294], [298, 295], [298, 296], [298, 297], [299, 206], [299, 207], [299, 208], [299, 209], [299, 210], [299, 211], [299, 212], [299, 213], [299, 214], [299, 215], [299, 216], [299, 217], [299, 218], [299, 219], [299, 220], [299, 221], [299, 222], [299, 223], [299, 224], [299, 225], [299, 226], [299, 227], [299, 228], [299, 229], [299, 230], [299, 231], [299, 232], [299, 233], [299, 234], [299, 235], [299, 236], [299, 237], [299, 238], [299, 239], [299, 240], [299, 241], [299, 242], [299, 243], [299, 244], [299, 245], [299, 246], [299, 247], [299, 248], [299, 249], [299, 250], [299, 251], [299, 252], [299, 253], [299, 254], [299, 255], [299, 256], [299, 257], [299, 258], [299, 259], [299, 260], [299, 261], [299, 262], [299, 263], [299, 264], [299, 265], [299, 266], [299, 267], [299, 268], [299, 269], [299, 270], [299, 271], [299, 272], [299, 273], [299, 274], [299, 275], [299, 276], [299, 277], [299, 278], [299, 279], [299, 280], [299, 281], [299, 282], [299, 283], [299, 284], [299, 285], [299, 286], [299, 287], [299, 288], [299, 289], [299, 290], [299, 291], [299, 292], [299, 293], [299, 294], [299, 295], [299, 296], [299, 297], [300, 206], [300, 207], [300, 208], [300, 209], [300, 210], [300, 211], [300, 212], [300, 213], [300, 214], [300, 215], [300, 216], [300, 217], [300, 218], [300, 219], [300, 220], [300, 221], [300, 222], [300, 223], [300, 224], [300, 225], [300, 226], [300, 227], [300, 228], [300, 229], [300, 230], [300, 231], [300, 232], [300, 233], [300, 234], [300, 235], [300, 236], [300, 237], [300, 238], [300, 239], [300, 240], [300, 241], [300, 242], [300, 243], [300, 244], [300, 245], [300, 246], [300, 247], [300, 248], [300, 249], [300, 250], [300, 251], [300, 252], [300, 253], [300, 254], [300, 255], [300, 256], [300, 257], [300, 258], [300, 259], [300, 260], [300, 261], [300, 262], [300, 263], [300, 264], [300, 265], [300, 266], [300, 267], [300, 268], [300, 269], [300, 270], [300, 271], [300, 272], [300, 273], [300, 274], [300, 275], [300, 276], [300, 277], [300, 278], [300, 279], [300, 280], [300, 281], [300, 282], [300, 283], [300, 284], [300, 285], [300, 286], [300, 287], [300, 288], [300, 289], [300, 290], [300, 291], [300, 292], [300, 293], [300, 294], [300, 295], [300, 296], [300, 297], [301, 206], [301, 207], [301, 208], [301, 209], [301, 210], [301, 211], [301, 212], [301, 213], [301, 214], [301, 215], [301, 216], [301, 217], [301, 218], [301, 219], [301, 220], [301, 221], [301, 222], [301, 223], [301, 224], [301, 225], [301, 226], [301, 227], [301, 228], [301, 229], [301, 230], [301, 231], [301, 232], [301, 233], [301, 234], [301, 235], [301, 236], [301, 237], [301, 238], [301, 239], [301, 240], [301, 241], [301, 242], [301, 243], [301, 244], [301, 245], [301, 246], [301, 247], [301, 248], [301, 249], [301, 250], [301, 251], [301, 252], [301, 253], [301, 254], [301, 255], [301, 256], [301, 257], [301, 258], [301, 259], [301, 260], [301, 261], [301, 262], [301, 263], [301, 264], [301, 265], [301, 266], [301, 267], [301, 268], [301, 269], [301, 270], [301, 271], [301, 272], [301, 273], [301, 274], [301, 275], [301, 276], [301, 277], [301, 278], [301, 279], [301, 280], [301, 281], [301, 282], [301, 283], [301, 284], [301, 285], [301, 286], [301, 287], [301, 288], [301, 289], [301, 290], [301, 291], [301, 292], [301, 293], [301, 294], [301, 295], [301, 296], [301, 297], [302, 206], [302, 207], [302, 208], [302, 209], [302, 210], [302, 211], [302, 212], [302, 213], [302, 214], [302, 215], [302, 216], [302, 217], [302, 218], [302, 219], [302, 220], [302, 221], [302, 222], [302, 223], [302, 224], [302, 225], [302, 226], [302, 227], [302, 228], [302, 229], [302, 230], [302, 231], [302, 232], [302, 233], [302, 234], [302, 235], [302, 236], [302, 237], [302, 238], [302, 239], [302, 240], [302, 241], [302, 242], [302, 243], [302, 244], [302, 245], [302, 246], [302, 247], [302, 248], [302, 249], [302, 250], [302, 251], [302, 252], [302, 253], [302, 254], [302, 255], [302, 256], [302, 257], [302, 258], [302, 259], [302, 260], [302, 261], [302, 262], [302, 263], [302, 264], [302, 265], [302, 266], [302, 267], [302, 268], [302, 269], [302, 270], [302, 271], [302, 272], [302, 273], [302, 274], [302, 275], [302, 276], [302, 277], [302, 278], [302, 279], [302, 280], [302, 281], [302, 282], [302, 283], [302, 284], [302, 285], [302, 286], [302, 287], [302, 288], [302, 289], [302, 290], [302, 291], [302, 292], [302, 293], [302, 294], [302, 295], [302, 296], [302, 297], [303, 206], [303, 207], [303, 208], [303, 209], [303, 210], [303, 211], [303, 212], [303, 213], [303, 214], [303, 215], [303, 216], [303, 217], [303, 218], [303, 219], [303, 220], [303, 221], [303, 222], [303, 223], [303, 224], [303, 225], [303, 226], [303, 227], [303, 228], [303, 229], [303, 230], [303, 231], [303, 232], [303, 233], [303, 234], [303, 235], [303, 236], [303, 237], [303, 238], [303, 239], [303, 240], [303, 241], [303, 242], [303, 243], [303, 244], [303, 245], [303, 246], [303, 247], [303, 248], [303, 249], [303, 250], [303, 251], [303, 252], [303, 253], [303, 254], [303, 255], [303, 256], [303, 257], [303, 258], [303, 259], [303, 260], [303, 261], [303, 262], [303, 263], [303, 264], [303, 265], [303, 266], [303, 267], [303, 268], [303, 269], [303, 270], [303, 271], [303, 272], [303, 273], [303, 274], [303, 275], [303, 276], [303, 277], [303, 278], [303, 279], [303, 280], [303, 281], [303, 282], [303, 283], [303, 284], [303, 285], [303, 286], [303, 287], [303, 288], [303, 289], [303, 290], [303, 291], [303, 292], [303, 293], [303, 294], [303, 295], [303, 296], [303, 297], [304, 206], [304, 207], [304, 208], [304, 209], [304, 210], [304, 211], [304, 212], [304, 213], [304, 214], [304, 215], [304, 216], [304, 217], [304, 218], [304, 219], [304, 220], [304, 221], [304, 222], [304, 223], [304, 224], [304, 225], [304, 226], [304, 227], [304, 228], [304, 229], [304, 230], [304, 231], [304, 232], [304, 233], [304, 234], [304, 235], [304, 236], [304, 237], [304, 238], [304, 239], [304, 240], [304, 241], [304, 242], [304, 243], [304, 244], [304, 245], [304, 246], [304, 247], [304, 248], [304, 249], [304, 250], [304, 251], [304, 252], [304, 253], [304, 254], [304, 255], [304, 256], [304, 257], [304, 258], [304, 259], [304, 260], [304, 261], [304, 262], [304, 263], [304, 264], [304, 265], [304, 266], [304, 267], [304, 268], [304, 269], [304, 270], [304, 271], [304, 272], [304, 273], [304, 274], [304, 275], [304, 276], [304, 277], [304, 278], [304, 279], [304, 280], [304, 281], [304, 282], [304, 283], [304, 284], [304, 285], [304, 286], [304, 287], [304, 288], [304, 289], [304, 290], [304, 291], [304, 292], [304, 293], [304, 294], [304, 295], [304, 296], [304, 297], [305, 206], [305, 207], [305, 208], [305, 209], [305, 210], [305, 211], [305, 212], [305, 213], [305, 214], [305, 215], [305, 216], [305, 217], [305, 218], [305, 219], [305, 220], [305, 221], [305, 222], [305, 223], [305, 224], [305, 225], [305, 226], [305, 227], [305, 228], [305, 229], [305, 230], [305, 231], [305, 232], [305, 233], [305, 234], [305, 235], [305, 236], [305, 237], [305, 238], [305, 239], [305, 240], [305, 241], [305, 242], [305, 243], [305, 244], [305, 245], [305, 246], [305, 247], [305, 248], [305, 249], [305, 250], [305, 251], [305, 252], [305, 253], [305, 254], [305, 255], [305, 256], [305, 257], [305, 258], [305, 259], [305, 260], [305, 261], [305, 262], [305, 263], [305, 264], [305, 265], [305, 266], [305, 267], [305, 268], [305, 269], [305, 270], [305, 271], [305, 272], [305, 273], [305, 274], [305, 275], [305, 276], [305, 277], [305, 278], [305, 279], [305, 280], [305, 281], [305, 282], [305, 283], [305, 284], [305, 285], [305, 286], [305, 287], [305, 288], [305, 289], [305, 290], [305, 291], [305, 292], [305, 293], [305, 294], [305, 295], [305, 296], [305, 297], [306, 206], [306, 207], [306, 208], [306, 209], [306, 210], [306, 211], [306, 212], [306, 213], [306, 214], [306, 215], [306, 216], [306, 217], [306, 218], [306, 219], [306, 220], [306, 221], [306, 222], [306, 223], [306, 224], [306, 225], [306, 226], [306, 227], [306, 228], [306, 229], [306, 230], [306, 231], [306, 232], [306, 233], [306, 234], [306, 235], [306, 236], [306, 237], [306, 238], [306, 239], [306, 240], [306, 241], [306, 242], [306, 243], [306, 244], [306, 245], [306, 246], [306, 247], [306, 248], [306, 249], [306, 250], [306, 251], [306, 252], [306, 253], [306, 254], [306, 255], [306, 256], [306, 257], [306, 258], [306, 259], [306, 260], [306, 261], [306, 262], [306, 263], [306, 264], [306, 265], [306, 266], [306, 267], [306, 268], [306, 269], [306, 270], [306, 271], [306, 272], [306, 273], [306, 274], [306, 275], [306, 276], [306, 277], [306, 278], [306, 279], [306, 280], [306, 281], [306, 282], [306, 283], [306, 284], [306, 285], [306, 286], [306, 287], [306, 288], [306, 289], [306, 290], [306, 291], [306, 292], [306, 293], [306, 294], [306, 295], [306, 296], [306, 297], [307, 206], [307, 207], [307, 208], [307, 209], [307, 210], [307, 211], [307, 212], [307, 213], [307, 214], [307, 215], [307, 216], [307, 217], [307, 218], [307, 219], [307, 220], [307, 221], [307, 222], [307, 223], [307, 224], [307, 225], [307, 226], [307, 227], [307, 228], [307, 229], [307, 230], [307, 231], [307, 232], [307, 233], [307, 234], [307, 235], [307, 236], [307, 237], [307, 238], [307, 239], [307, 240], [307, 241], [307, 242], [307, 243], [307, 244], [307, 245], [307, 246], [307, 247], [307, 248], [307, 249], [307, 250], [307, 251], [307, 252], [307, 253], [307, 254], [307, 255], [307, 256], [307, 257], [307, 258], [307, 259], [307, 260], [307, 261], [307, 262], [307, 263], [307, 264], [307, 265], [307, 266], [307, 267], [307, 268], [307, 269], [307, 270], [307, 271], [307, 272], [307, 273], [307, 274], [307, 275], [307, 276], [307, 277], [307, 278], [307, 279], [307, 280], [307, 281], [307, 282], [307, 283], [307, 284], [307, 285], [307, 286], [307, 287], [307, 288], [307, 289], [307, 290], [307, 291], [307, 292], [307, 293], [307, 294], [307, 295], [307, 296], [307, 297], [308, 206], [308, 207], [308, 208], [308, 209], [308, 210], [308, 211], [308, 212], [308, 213], [308, 214], [308, 215], [308, 216], [308, 217], [308, 218], [308, 219], [308, 220], [308, 221], [308, 222], [308, 223], [308, 224], [308, 225], [308, 226], [308, 227], [308, 228], [308, 229], [308, 230], [308, 231], [308, 232], [308, 233], [308, 234], [308, 235], [308, 236], [308, 237], [308, 238], [308, 239], [308, 240], [308, 241], [308, 242], [308, 243], [308, 244], [308, 245], [308, 246], [308, 247], [308, 248], [308, 249], [308, 250], [308, 251], [308, 252], [308, 253], [308, 254], [308, 255], [308, 256], [308, 257], [308, 258], [308, 259], [308, 260], [308, 261], [308, 262], [308, 263], [308, 264], [308, 265], [308, 266], [308, 267], [308, 268], [308, 269], [308, 270], [308, 271], [308, 272], [308, 273], [308, 274], [308, 275], [308, 276], [308, 277], [308, 278], [308, 279], [308, 280], [308, 281], [308, 282], [308, 283], [308, 284], [308, 285], [308, 286], [308, 287], [308, 288], [308, 289], [308, 290], [308, 291], [308, 292], [308, 293], [308, 294], [308, 295], [308, 296], [308, 297], [309, 206], [309, 207], [309, 208], [309, 209], [309, 210], [309, 211], [309, 212], [309, 213], [309, 214], [309, 215], [309, 216], [309, 217], [309, 218], [309, 219], [309, 220], [309, 221], [309, 222], [309, 223], [309, 224], [309, 225], [309, 226], [309, 227], [309, 228], [309, 229], [309, 230], [309, 231], [309, 232], [309, 233], [309, 234], [309, 235], [309, 236], [309, 237], [309, 238], [309, 239], [309, 240], [309, 241], [309, 242], [309, 243], [309, 244], [309, 245], [309, 246], [309, 247], [309, 248], [309, 249], [309, 250], [309, 251], [309, 252], [309, 253], [309, 254], [309, 255], [309, 256], [309, 257], [309, 258], [309, 259], [309, 260], [309, 261], [309, 262], [309, 263], [309, 264], [309, 265], [309, 266], [309, 267], [309, 268], [309, 269], [309, 270], [309, 271], [309, 272], [309, 273], [309, 274], [309, 275], [309, 276], [309, 277], [309, 278], [309, 279], [309, 280], [309, 281], [309, 282], [309, 283], [309, 284], [309, 285], [309, 286], [309, 287], [309, 288], [309, 289], [309, 290], [309, 291], [309, 292], [309, 293], [309, 294], [309, 295], [309, 296], [309, 297], [310, 206], [310, 207], [310, 208], [310, 209], [310, 210], [310, 211], [310, 212], [310, 213], [310, 214], [310, 215], [310, 216], [310, 217], [310, 218], [310, 219], [310, 220], [310, 221], [310, 222], [310, 223], [310, 224], [310, 225], [310, 226], [310, 227], [310, 228], [310, 229], [310, 230], [310, 231], [310, 232], [310, 233], [310, 234], [310, 235], [310, 236], [310, 237], [310, 238], [310, 239], [310, 240], [310, 241], [310, 242], [310, 243], [310, 244], [310, 245], [310, 246], [310, 247], [310, 248], [310, 249], [310, 250], [310, 251], [310, 252], [310, 253], [310, 254], [310, 255], [310, 256], [310, 257], [310, 258], [310, 259], [310, 260], [310, 261], [310, 262], [310, 263], [310, 264], [310, 265], [310, 266], [310, 267], [310, 268], [310, 269], [310, 270], [310, 271], [310, 272], [310, 273], [310, 274], [310, 275], [310, 276], [310, 277], [310, 278], [310, 279], [310, 280], [310, 281], [310, 282], [310, 283], [310, 284], [310, 285], [310, 286], [310, 287], [310, 288], [310, 289], [310, 290], [310, 291], [310, 292], [310, 293], [310, 294], [310, 295], [310, 296], [310, 297], [311, 206], [311, 207], [311, 208], [311, 209], [311, 210], [311, 211], [311, 212], [311, 213], [311, 214], [311, 215], [311, 216], [311, 217], [311, 218], [311, 219], [311, 220], [311, 221], [311, 222], [311, 223], [311, 224], [311, 225], [311, 226], [311, 227], [311, 228], [311, 229], [311, 230], [311, 231], [311, 232], [311, 233], [311, 234], [311, 235], [311, 236], [311, 237], [311, 238], [311, 239], [311, 240], [311, 241], [311, 242], [311, 243], [311, 244], [311, 245], [311, 246], [311, 247], [311, 248], [311, 249], [311, 250], [311, 251], [311, 252], [311, 253], [311, 254], [311, 255], [311, 256], [311, 257], [311, 258], [311, 259], [311, 260], [311, 261], [311, 262], [311, 263], [311, 264], [311, 265], [311, 266], [311, 267], [311, 268], [311, 269], [311, 270], [311, 271], [311, 272], [311, 273], [311, 274], [311, 275], [311, 276], [311, 277], [311, 278], [311, 279], [311, 280], [311, 281], [311, 282], [311, 283], [311, 284], [311, 285], [311, 286], [311, 287], [311, 288], [311, 289], [311, 290], [311, 291], [311, 292], [311, 293], [311, 294], [311, 295], [311, 296], [311, 297], [312, 206], [312, 207], [312, 208], [312, 209], [312, 210], [312, 211], [312, 212], [312, 213], [312, 214], [312, 215], [312, 216], [312, 217], [312, 218], [312, 219], [312, 220], [312, 221], [312, 222], [312, 223], [312, 224], [312, 225], [312, 226], [312, 227], [312, 228], [312, 229], [312, 230], [312, 231], [312, 232], [312, 233], [312, 234], [312, 235], [312, 236], [312, 237], [312, 238], [312, 239], [312, 240], [312, 241], [312, 242], [312, 243], [312, 244], [312, 245], [312, 246], [312, 247], [312, 248], [312, 249], [312, 250], [312, 251], [312, 252], [312, 253], [312, 254], [312, 255], [312, 256], [312, 257], [312, 258], [312, 259], [312, 260], [312, 261], [312, 262], [312, 263], [312, 264], [312, 265], [312, 266], [312, 267], [312, 268], [312, 269], [312, 270], [312, 271], [312, 272], [312, 273], [312, 274], [312, 275], [312, 276], [312, 277], [312, 278], [312, 279], [312, 280], [312, 281], [312, 282], [312, 283], [312, 284], [312, 285], [312, 286], [312, 287], [312, 288], [312, 289], [312, 290], [312, 291], [312, 292], [312, 293], [312, 294], [312, 295], [312, 296], [312, 297], [313, 206], [313, 207], [313, 208], [313, 209], [313, 210], [313, 211], [313, 212], [313, 213], [313, 214], [313, 215], [313, 216], [313, 217], [313, 218], [313, 219], [313, 220], [313, 221], [313, 222], [313, 223], [313, 224], [313, 225], [313, 226], [313, 227], [313, 228], [313, 229], [313, 230], [313, 231], [313, 232], [313, 233], [313, 234], [313, 235], [313, 236], [313, 237], [313, 238], [313, 239], [313, 240], [313, 241], [313, 242], [313, 243], [313, 244], [313, 245], [313, 246], [313, 247], [313, 248], [313, 249], [313, 250], [313, 251], [313, 252], [313, 253], [313, 254], [313, 255], [313, 256], [313, 257], [313, 258], [313, 259], [313, 260], [313, 261], [313, 262], [313, 263], [313, 264], [313, 265], [313, 266], [313, 267], [313, 268], [313, 269], [313, 270], [313, 271], [313, 272], [313, 273], [313, 274], [313, 275], [313, 276], [313, 277], [313, 278], [313, 279], [313, 280], [313, 281], [313, 282], [313, 283], [313, 284], [313, 285], [313, 286], [313, 287], [313, 288], [313, 289], [313, 290], [313, 291], [313, 292], [313, 293], [313, 294], [313, 295], [313, 296], [313, 297], [314, 206], [314, 207], [314, 208], [314, 209], [314, 210], [314, 211], [314, 212], [314, 213], [314, 214], [314, 215], [314, 216], [314, 217], [314, 218], [314, 219], [314, 220], [314, 221], [314, 222], [314, 223], [314, 224], [314, 225], [314, 226], [314, 227], [314, 228], [314, 229], [314, 230], [314, 231], [314, 232], [314, 233], [314, 234], [314, 235], [314, 236], [314, 237], [314, 238], [314, 239], [314, 240], [314, 241], [314, 242], [314, 243], [314, 244], [314, 245], [314, 246], [314, 247], [314, 248], [314, 249], [314, 250], [314, 251], [314, 252], [314, 253], [314, 254], [314, 255], [314, 256], [314, 257], [314, 258], [314, 259], [314, 260], [314, 261], [314, 262], [314, 263], [314, 264], [314, 265], [314, 266], [314, 267], [314, 268], [314, 269], [314, 270], [314, 271], [314, 272], [314, 273], [314, 274], [314, 275], [314, 276], [314, 277], [314, 278], [314, 279], [314, 280], [314, 281], [314, 282], [314, 283], [314, 284], [314, 285], [314, 286], [314, 287], [314, 288], [314, 289], [314, 290], [314, 291], [314, 292], [314, 293], [314, 294], [314, 295], [314, 296], [314, 297], [315, 206], [315, 207], [315, 208], [315, 209], [315, 210], [315, 211], [315, 212], [315, 213], [315, 214], [315, 215], [315, 216], [315, 217], [315, 218], [315, 219], [315, 220], [315, 221], [315, 222], [315, 223], [315, 224], [315, 225], [315, 226], [315, 227], [315, 228], [315, 229], [315, 230], [315, 231], [315, 232], [315, 233], [315, 234], [315, 235], [315, 236], [315, 237], [315, 238], [315, 239], [315, 240], [315, 241], [315, 242], [315, 243], [315, 244], [315, 245], [315, 246], [315, 247], [315, 248], [315, 249], [315, 250], [315, 251], [315, 252], [315, 253], [315, 254], [315, 255], [315, 256], [315, 257], [315, 258], [315, 259], [315, 260], [315, 261], [315, 262], [315, 263], [315, 264], [315, 265], [315, 266], [315, 267], [315, 268], [315, 269], [315, 270], [315, 271], [315, 272], [315, 273], [315, 274], [315, 275], [315, 276], [315, 277], [315, 278], [315, 279], [315, 280], [315, 281], [315, 282], [315, 283], [315, 284], [315, 285], [315, 286], [315, 287], [315, 288], [315, 289], [315, 290], [315, 291], [315, 292], [315, 293], [315, 294], [315, 295], [315, 296], [315, 297], [316, 206], [316, 207], [316, 208], [316, 209], [316, 210], [316, 211], [316, 212], [316, 213], [316, 214], [316, 215], [316, 216], [316, 217], [316, 218], [316, 219], [316, 220], [316, 221], [316, 222], [316, 223], [316, 224], [316, 225], [316, 226], [316, 227], [316, 228], [316, 229], [316, 230], [316, 231], [316, 232], [316, 233], [316, 234], [316, 235], [316, 236], [316, 237], [316, 238], [316, 239], [316, 240], [316, 241], [316, 242], [316, 243], [316, 244], [316, 245], [316, 246], [316, 247], [316, 248], [316, 249], [316, 250], [316, 251], [316, 252], [316, 253], [316, 254], [316, 255], [316, 256], [316, 257], [316, 258], [316, 259], [316, 260], [316, 261], [316, 262], [316, 263], [316, 264], [316, 265], [316, 266], [316, 267], [316, 268], [316, 269], [316, 270], [316, 271], [316, 272], [316, 273], [316, 274], [316, 275], [316, 276], [316, 277], [316, 278], [316, 279], [316, 280], [316, 281], [316, 282], [316, 283], [316, 284], [316, 285], [316, 286], [316, 287], [316, 288], [316, 289], [316, 290], [316, 291], [316, 292], [316, 293], [316, 294], [316, 295], [316, 296], [316, 297], [317, 206], [317, 207], [317, 208], [317, 209], [317, 210], [317, 211], [317, 212], [317, 213], [317, 214], [317, 215], [317, 216], [317, 217], [317, 218], [317, 219], [317, 220], [317, 221], [317, 222], [317, 223], [317, 224], [317, 225], [317, 226], [317, 227], [317, 228], [317, 229], [317, 230], [317, 231], [317, 232], [317, 233], [317, 234], [317, 235], [317, 236], [317, 237], [317, 238], [317, 239], [317, 240], [317, 241], [317, 242], [317, 243], [317, 244], [317, 245], [317, 246], [317, 247], [317, 248], [317, 249], [317, 250], [317, 251], [317, 252], [317, 253], [317, 254], [317, 255], [317, 256], [317, 257], [317, 258], [317, 259], [317, 260], [317, 261], [317, 262], [317, 263], [317, 264], [317, 265], [317, 266], [317, 267], [317, 268], [317, 269], [317, 270], [317, 271], [317, 272], [317, 273], [317, 274], [317, 275], [317, 276], [317, 277], [317, 278], [317, 279], [317, 280], [317, 281], [317, 282], [317, 283], [317, 284], [317, 285], [317, 286], [317, 287], [317, 288], [317, 289], [317, 290], [317, 291], [317, 292], [317, 293], [317, 294], [317, 295], [317, 296], [317, 297], [318, 206], [318, 207], [318, 208], [318, 209], [318, 210], [318, 211], [318, 212], [318, 213], [318, 214], [318, 215], [318, 216], [318, 217], [318, 218], [318, 219], [318, 220], [318, 221], [318, 222], [318, 223], [318, 224], [318, 225], [318, 226], [318, 227], [318, 228], [318, 229], [318, 230], [318, 231], [318, 232], [318, 233], [318, 234], [318, 235], [318, 236], [318, 237], [318, 238], [318, 239], [318, 240], [318, 241], [318, 242], [318, 243], [318, 244], [318, 245], [318, 246], [318, 247], [318, 248], [318, 249], [318, 250], [318, 251], [318, 252], [318, 253], [318, 254], [318, 255], [318, 256], [318, 257], [318, 258], [318, 259], [318, 260], [318, 261], [318, 262], [318, 263], [318, 264], [318, 265], [318, 266], [318, 267], [318, 268], [318, 269], [318, 270], [318, 271], [318, 272], [318, 273], [318, 274], [318, 275], [318, 276], [318, 277], [318, 278], [318, 279], [318, 280], [318, 281], [318, 282], [318, 283], [318, 284], [318, 285], [318, 286], [318, 287], [318, 288], [318, 289], [318, 290], [318, 291], [318, 292], [318, 293], [318, 294], [318, 295], [318, 296], [318, 297], [319, 206], [319, 207], [319, 208], [319, 209], [319, 210], [319, 211], [319, 212], [319, 213], [319, 214], [319, 215], [319, 216], [319, 217], [319, 218], [319, 219], [319, 220], [319, 221], [319, 222], [319, 223], [319, 224], [319, 225], [319, 226], [319, 227], [319, 228], [319, 229], [319, 230], [319, 231], [319, 232], [319, 233], [319, 234], [319, 235], [319, 236], [319, 237], [319, 238], [319, 239], [319, 240], [319, 241], [319, 242], [319, 243], [319, 244], [319, 245], [319, 246], [319, 247], [319, 248], [319, 249], [319, 250], [319, 251], [319, 252], [319, 253], [319, 254], [319, 255], [319, 256], [319, 257], [319, 258], [319, 259], [319, 260], [319, 261], [319, 262], [319, 263], [319, 264], [319, 265], [319, 266], [319, 267], [319, 268], [319, 269], [319, 270], [319, 271], [319, 272], [319, 273], [319, 274], [319, 275], [319, 276], [319, 277], [319, 278], [319, 279], [319, 280], [319, 281], [319, 282], [319, 283], [319, 284], [319, 285], [319, 286], [319, 287], [319, 288], [319, 289], [319, 290], [319, 291], [319, 292], [319, 293], [319, 294], [319, 295], [319, 296], [319, 297], [320, 206], [320, 207], [320, 208], [320, 209], [320, 210], [320, 211], [320, 212], [320, 213], [320, 214], [320, 215], [320, 216], [320, 217], [320, 218], [320, 219], [320, 220], [320, 221], [320, 222], [320, 223], [320, 224], [320, 225], [320, 226], [320, 227], [320, 228], [320, 229], [320, 230], [320, 231], [320, 232], [320, 233], [320, 234], [320, 235], [320, 236], [320, 237], [320, 238], [320, 239], [320, 240], [320, 241], [320, 242], [320, 243], [320, 244], [320, 245], [320, 246], [320, 247], [320, 248], [320, 249], [320, 250], [320, 251], [320, 252], [320, 253], [320, 254], [320, 255], [320, 256], [320, 257], [320, 258], [320, 259], [320, 260], [320, 261], [320, 262], [320, 263], [320, 264], [320, 265], [320, 266], [320, 267], [320, 268], [320, 269], [320, 270], [320, 271], [320, 272], [320, 273], [320, 274], [320, 275], [320, 276], [320, 277], [320, 278], [320, 279], [320, 280], [320, 281], [320, 282], [320, 283], [320, 284], [320, 285], [320, 286], [320, 287], [320, 288], [320, 289], [320, 290], [320, 291], [320, 292], [320, 293], [320, 294], [320, 295], [320, 296], [320, 297], [321, 206], [321, 207], [321, 208], [321, 209], [321, 210], [321, 211], [321, 212], [321, 213], [321, 214], [321, 215], [321, 216], [321, 217], [321, 218], [321, 219], [321, 220], [321, 221], [321, 222], [321, 223], [321, 224], [321, 225], [321, 226], [321, 227], [321, 228], [321, 229], [321, 230], [321, 231], [321, 232], [321, 233], [321, 234], [321, 235], [321, 236], [321, 237], [321, 238], [321, 239], [321, 240], [321, 241], [321, 242], [321, 243], [321, 244], [321, 245], [321, 246], [321, 247], [321, 248], [321, 249], [321, 250], [321, 251], [321, 252], [321, 253], [321, 254], [321, 255], [321, 256], [321, 257], [321, 258], [321, 259], [321, 260], [321, 261], [321, 262], [321, 263], [321, 264], [321, 265], [321, 266], [321, 267], [321, 268], [321, 269], [321, 270], [321, 271], [321, 272], [321, 273], [321, 274], [321, 275], [321, 276], [321, 277], [321, 278], [321, 279], [321, 280], [321, 281], [321, 282], [321, 283], [321, 284], [321, 285], [321, 286], [321, 287], [321, 288], [321, 289], [321, 290], [321, 291], [321, 292], [321, 293], [321, 294], [321, 295], [321, 296], [321, 297], [322, 206], [322, 207], [322, 208], [322, 209], [322, 210], [322, 211], [322, 212], [322, 213], [322, 214], [322, 215], [322, 216], [322, 217], [322, 218], [322, 219], [322, 220], [322, 221], [322, 222], [322, 223], [322, 224], [322, 225], [322, 226], [322, 227], [322, 228], [322, 229], [322, 230], [322, 231], [322, 232], [322, 233], [322, 234], [322, 235], [322, 236], [322, 237], [322, 238], [322, 239], [322, 240], [322, 241], [322, 242], [322, 243], [322, 244], [322, 245], [322, 246], [322, 247], [322, 248], [322, 249], [322, 250], [322, 251], [322, 252], [322, 253], [322, 254], [322, 255], [322, 256], [322, 257], [322, 258], [322, 259], [322, 260], [322, 261], [322, 262], [322, 263], [322, 264], [322, 265], [322, 266], [322, 267], [322, 268], [322, 269], [322, 270], [322, 271], [322, 272], [322, 273], [322, 274], [322, 275], [322, 276], [322, 277], [322, 278], [322, 279], [322, 280], [322, 281], [322, 282], [322, 283], [322, 284], [322, 285], [322, 286], [322, 287], [322, 288], [322, 289], [322, 290], [322, 291], [322, 292], [322, 293], [322, 294], [322, 295], [322, 296], [322, 297], [323, 206], [323, 207], [323, 208], [323, 209], [323, 210], [323, 211], [323, 212], [323, 213], [323, 214], [323, 215], [323, 216], [323, 217], [323, 218], [323, 219], [323, 220], [323, 221], [323, 222], [323, 223], [323, 224], [323, 225], [323, 226], [323, 227], [323, 228], [323, 229], [323, 230], [323, 231], [323, 232], [323, 233], [323, 234], [323, 235], [323, 236], [323, 237], [323, 238], [323, 239], [323, 240], [323, 241], [323, 242], [323, 243], [323, 244], [323, 245], [323, 246], [323, 247], [323, 248], [323, 249], [323, 250], [323, 251], [323, 252], [323, 253], [323, 254], [323, 255], [323, 256], [323, 257], [323, 258], [323, 259], [323, 260], [323, 261], [323, 262], [323, 263], [323, 264], [323, 265], [323, 266], [323, 267], [323, 268], [323, 269], [323, 270], [323, 271], [323, 272], [323, 273], [323, 274], [323, 275], [323, 276], [323, 277], [323, 278], [323, 279], [323, 280], [323, 281], [323, 282], [323, 283], [323, 284], [323, 285], [323, 286], [323, 287], [323, 288], [323, 289], [323, 290], [323, 291], [323, 292], [323, 293], [323, 294], [323, 295], [323, 296], [323, 297], [324, 206], [324, 207], [324, 208], [324, 209], [324, 210], [324, 211], [324, 212], [324, 213], [324, 214], [324, 215], [324, 216], [324, 217], [324, 218], [324, 219], [324, 220], [324, 221], [324, 222], [324, 223], [324, 224], [324, 225], [324, 226], [324, 227], [324, 228], [324, 229], [324, 230], [324, 231], [324, 232], [324, 233], [324, 234], [324, 235], [324, 236], [324, 237], [324, 238], [324, 239], [324, 240], [324, 241], [324, 242], [324, 243], [324, 244], [324, 245], [324, 246], [324, 247], [324, 248], [324, 249], [324, 250], [324, 251], [324, 252], [324, 253], [324, 254], [324, 255], [324, 256], [324, 257], [324, 258], [324, 259], [324, 260], [324, 261], [324, 262], [324, 263], [324, 264], [324, 265], [324, 266], [324, 267], [324, 268], [324, 269], [324, 270], [324, 271], [324, 272], [324, 273], [324, 274], [324, 275], [324, 276], [324, 277], [324, 278], [324, 279], [324, 280], [324, 281], [324, 282], [324, 283], [324, 284], [324, 285], [324, 286], [324, 287], [324, 288], [324, 289], [324, 290], [324, 291], [324, 292], [324, 293], [324, 294], [324, 295], [324, 296], [324, 297], [325, 206], [325, 207], [325, 208], [325, 209], [325, 210], [325, 211], [325, 212], [325, 213], [325, 214], [325, 215], [325, 216], [325, 217], [325, 218], [325, 219], [325, 220], [325, 221], [325, 222], [325, 223], [325, 224], [325, 225], [325, 226], [325, 227], [325, 228], [325, 229], [325, 230], [325, 231], [325, 232], [325, 233], [325, 234], [325, 235], [325, 236], [325, 237], [325, 238], [325, 239], [325, 240], [325, 241], [325, 242], [325, 243], [325, 244], [325, 245], [325, 246], [325, 247], [325, 248], [325, 249], [325, 250], [325, 251], [325, 252], [325, 253], [325, 254], [325, 255], [325, 256], [325, 257], [325, 258], [325, 259], [325, 260], [325, 261], [325, 262], [325, 263], [325, 264], [325, 265], [325, 266], [325, 267], [325, 268], [325, 269], [325, 270], [325, 271], [325, 272], [325, 273], [325, 274], [325, 275], [325, 276], [325, 277], [325, 278], [325, 279], [325, 280], [325, 281], [325, 282], [325, 283], [325, 284], [325, 285], [325, 286], [325, 287], [325, 288], [325, 289], [325, 290], [325, 291], [325, 292], [325, 293], [325, 294], [325, 295], [325, 296], [325, 297], [326, 206], [326, 207], [326, 208], [326, 209], [326, 210], [326, 211], [326, 212], [326, 213], [326, 214], [326, 215], [326, 216], [326, 217], [326, 218], [326, 219], [326, 220], [326, 221], [326, 222], [326, 223], [326, 224], [326, 225], [326, 226], [326, 227], [326, 228], [326, 229], [326, 230], [326, 231], [326, 232], [326, 233], [326, 234], [326, 235], [326, 236], [326, 237], [326, 238], [326, 239], [326, 240], [326, 241], [326, 242], [326, 243], [326, 244], [326, 245], [326, 246], [326, 247], [326, 248], [326, 249], [326, 250], [326, 251], [326, 252], [326, 253], [326, 254], [326, 255], [326, 256], [326, 257], [326, 258], [326, 259], [326, 260], [326, 261], [326, 262], [326, 263], [326, 264], [326, 265], [326, 266], [326, 267], [326, 268], [326, 269], [326, 270], [326, 271], [326, 272], [326, 273], [326, 274], [326, 275], [326, 276], [326, 277], [326, 278], [326, 279], [326, 280], [326, 281], [326, 282], [326, 283], [326, 284], [326, 285], [326, 286], [326, 287], [326, 288], [326, 289], [326, 290], [326, 291], [326, 292], [326, 293], [326, 294], [326, 295], [326, 296], [326, 297], [327, 206], [327, 207], [327, 208], [327, 209], [327, 210], [327, 211], [327, 212], [327, 213], [327, 214], [327, 215], [327, 216], [327, 217], [327, 218], [327, 219], [327, 220], [327, 221], [327, 222], [327, 223], [327, 224], [327, 225], [327, 226], [327, 227], [327, 228], [327, 229], [327, 230], [327, 231], [327, 232], [327, 233], [327, 234], [327, 235], [327, 236], [327, 237], [327, 238], [327, 239], [327, 240], [327, 241], [327, 242], [327, 243], [327, 244], [327, 245], [327, 246], [327, 247], [327, 248], [327, 249], [327, 250], [327, 251], [327, 252], [327, 253], [327, 254], [327, 255], [327, 256], [327, 257], [327, 258], [327, 259], [327, 260], [327, 261], [327, 262], [327, 263], [327, 264], [327, 265], [327, 266], [327, 267], [327, 268], [327, 269], [327, 270], [327, 271], [327, 272], [327, 273], [327, 274], [327, 275], [327, 276], [327, 277], [327, 278], [327, 279], [327, 280], [327, 281], [327, 282], [327, 283], [327, 284], [327, 285], [327, 286], [327, 287], [327, 288], [327, 289], [327, 290], [327, 291], [327, 292], [327, 293], [327, 294], [327, 295], [327, 296], [327, 297], [328, 206], [328, 207], [328, 208], [328, 209], [328, 210], [328, 211], [328, 212], [328, 213], [328, 214], [328, 215], [328, 216], [328, 217], [328, 218], [328, 219], [328, 220], [328, 221], [328, 222], [328, 223], [328, 224], [328, 225], [328, 226], [328, 227], [328, 228], [328, 229], [328, 230], [328, 231], [328, 232], [328, 233], [328, 234], [328, 235], [328, 236], [328, 237], [328, 238], [328, 239], [328, 240], [328, 241], [328, 242], [328, 243], [328, 244], [328, 245], [328, 246], [328, 247], [328, 248], [328, 249], [328, 250], [328, 251], [328, 252], [328, 253], [328, 254], [328, 255], [328, 256], [328, 257], [328, 258], [328, 259], [328, 260], [328, 261], [328, 262], [328, 263], [328, 264], [328, 265], [328, 266], [328, 267], [328, 268], [328, 269], [328, 270], [328, 271], [328, 272], [328, 273], [328, 274], [328, 275], [328, 276], [328, 277], [328, 278], [328, 279], [328, 280], [328, 281], [328, 282], [328, 283], [328, 284], [328, 285], [328, 286], [328, 287], [328, 288], [328, 289], [328, 290], [328, 291], [328, 292], [328, 293], [328, 294], [328, 295], [328, 296], [328, 297], [329, 206], [329, 207], [329, 208], [329, 209], [329, 210], [329, 211], [329, 212], [329, 213], [329, 214], [329, 215], [329, 216], [329, 217], [329, 218], [329, 219], [329, 220], [329, 221], [329, 222], [329, 223], [329, 224], [329, 225], [329, 226], [329, 227], [329, 228], [329, 229], [329, 230], [329, 231], [329, 232], [329, 233], [329, 234], [329, 235], [329, 236], [329, 237], [329, 238], [329, 239], [329, 240], [329, 241], [329, 242], [329, 243], [329, 244], [329, 245], [329, 246], [329, 247], [329, 248], [329, 249], [329, 250], [329, 251], [329, 252], [329, 253], [329, 254], [329, 255], [329, 256], [329, 257], [329, 258], [329, 259], [329, 260], [329, 261], [329, 262], [329, 263], [329, 264], [329, 265], [329, 266], [329, 267], [329, 268], [329, 269], [329, 270], [329, 271], [329, 272], [329, 273], [329, 274], [329, 275], [329, 276], [329, 277], [329, 278], [329, 279], [329, 280], [329, 281], [329, 282], [329, 283], [329, 284], [329, 285], [329, 286], [329, 287], [329, 288], [329, 289], [329, 290], [329, 291], [329, 292], [329, 293], [329, 294], [329, 295], [329, 296], [329, 297], [330, 206], [330, 207], [330, 208], [330, 209], [330, 210], [330, 211], [330, 212], [330, 213], [330, 214], [330, 215], [330, 216], [330, 217], [330, 218], [330, 219], [330, 220], [330, 221], [330, 222], [330, 223], [330, 224], [330, 225], [330, 226], [330, 227], [330, 228], [330, 229], [330, 230], [330, 231], [330, 232], [330, 233], [330, 234], [330, 235], [330, 236], [330, 237], [330, 238], [330, 239], [330, 240], [330, 241], [330, 242], [330, 243], [330, 244], [330, 245], [330, 246], [330, 247], [330, 248], [330, 249], [330, 250], [330, 251], [330, 252], [330, 253], [330, 254], [330, 255], [330, 256], [330, 257], [330, 258], [330, 259], [330, 260], [330, 261], [330, 262], [330, 263], [330, 264], [330, 265], [330, 266], [330, 267], [330, 268], [330, 269], [330, 270], [330, 271], [330, 272], [330, 273], [330, 274], [330, 275], [330, 276], [330, 277], [330, 278], [330, 279], [330, 280], [330, 281], [330, 282], [330, 283], [330, 284], [330, 285], [330, 286], [330, 287], [330, 288], [330, 289], [330, 290], [330, 291], [330, 292], [330, 293], [330, 294], [330, 295], [330, 296], [330, 297], [331, 206], [331, 207], [331, 208], [331, 209], [331, 210], [331, 211], [331, 212], [331, 213], [331, 214], [331, 215], [331, 216], [331, 217], [331, 218], [331, 219], [331, 220], [331, 221], [331, 222], [331, 223], [331, 224], [331, 225], [331, 226], [331, 227], [331, 228], [331, 229], [331, 230], [331, 231], [331, 232], [331, 233], [331, 234], [331, 235], [331, 236], [331, 237], [331, 238], [331, 239], [331, 240], [331, 241], [331, 242], [331, 243], [331, 244], [331, 245], [331, 246], [331, 247], [331, 248], [331, 249], [331, 250], [331, 251], [331, 252], [331, 253], [331, 254], [331, 255], [331, 256], [331, 257], [331, 258], [331, 259], [331, 260], [331, 261], [331, 262], [331, 263], [331, 264], [331, 265], [331, 266], [331, 267], [331, 268], [331, 269], [331, 270], [331, 271], [331, 272], [331, 273], [331, 274], [331, 275], [331, 276], [331, 277], [331, 278], [331, 279], [331, 280], [331, 281], [331, 282], [331, 283], [331, 284], [331, 285], [331, 286], [331, 287], [331, 288], [331, 289], [331, 290], [331, 291], [331, 292], [331, 293], [331, 294], [331, 295], [331, 296], [331, 297], [332, 206], [332, 207], [332, 208], [332, 209], [332, 210], [332, 211], [332, 212], [332, 213], [332, 214], [332, 215], [332, 216], [332, 217], [332, 218], [332, 219], [332, 220], [332, 221], [332, 222], [332, 223], [332, 224], [332, 225], [332, 226], [332, 227], [332, 228], [332, 229], [332, 230], [332, 231], [332, 232], [332, 233], [332, 234], [332, 235], [332, 236], [332, 237], [332, 238], [332, 239], [332, 240], [332, 241], [332, 242], [332, 243], [332, 244], [332, 245], [332, 246], [332, 247], [332, 248], [332, 249], [332, 250], [332, 251], [332, 252], [332, 253], [332, 254], [332, 255], [332, 256], [332, 257], [332, 258], [332, 259], [332, 260], [332, 261], [332, 262], [332, 263], [332, 264], [332, 265], [332, 266], [332, 267], [332, 268], [332, 269], [332, 270], [332, 271], [332, 272], [332, 273], [332, 274], [332, 275], [332, 276], [332, 277], [332, 278], [332, 279], [332, 280], [332, 281], [332, 282], [332, 283], [332, 284], [332, 285], [332, 286], [332, 287], [332, 288], [332, 289], [332, 290], [332, 291], [332, 292], [332, 293], [332, 294], [332, 295], [332, 296], [332, 297], [333, 206], [333, 207], [333, 208], [333, 209], [333, 210], [333, 211], [333, 212], [333, 213], [333, 214], [333, 215], [333, 216], [333, 217], [333, 218], [333, 219], [333, 220], [333, 221], [333, 222], [333, 223], [333, 224], [333, 225], [333, 226], [333, 227], [333, 228], [333, 229], [333, 230], [333, 231], [333, 232], [333, 233], [333, 234], [333, 235], [333, 236], [333, 237], [333, 238], [333, 239], [333, 240], [333, 241], [333, 242], [333, 243], [333, 244], [333, 245], [333, 246], [333, 247], [333, 248], [333, 249], [333, 250], [333, 251], [333, 252], [333, 253], [333, 254], [333, 255], [333, 256], [333, 257], [333, 258], [333, 259], [333, 260], [333, 261], [333, 262], [333, 263], [333, 264], [333, 265], [333, 266], [333, 267], [333, 268], [333, 269], [333, 270], [333, 271], [333, 272], [333, 273], [333, 274], [333, 275], [333, 276], [333, 277], [333, 278], [333, 279], [333, 280], [333, 281], [333, 282], [333, 283], [333, 284], [333, 285], [333, 286], [333, 287], [333, 288], [333, 289], [333, 290], [333, 291], [333, 292], [333, 293], [333, 294], [333, 295], [333, 296], [333, 297], [334, 206], [334, 207], [334, 208], [334, 209], [334, 210], [334, 211], [334, 212], [334, 213], [334, 214], [334, 215], [334, 216], [334, 217], [334, 218], [334, 219], [334, 220], [334, 221], [334, 222], [334, 223], [334, 224], [334, 225], [334, 226], [334, 227], [334, 228], [334, 229], [334, 230], [334, 231], [334, 232], [334, 233], [334, 234], [334, 235], [334, 236], [334, 237], [334, 238], [334, 239], [334, 240], [334, 241], [334, 242], [334, 243], [334, 244], [334, 245], [334, 246], [334, 247], [334, 248], [334, 249], [334, 250], [334, 251], [334, 252], [334, 253], [334, 254], [334, 255], [334, 256], [334, 257], [334, 258], [334, 259], [334, 260], [334, 261], [334, 262], [334, 263], [334, 264], [334, 265], [334, 266], [334, 267], [334, 268], [334, 269], [334, 270], [334, 271], [334, 272], [334, 273], [334, 274], [334, 275], [334, 276], [334, 277], [334, 278], [334, 279], [334, 280], [334, 281], [334, 282], [334, 283], [334, 284], [334, 285], [334, 286], [334, 287], [334, 288], [334, 289], [334, 290], [334, 291], [334, 292], [334, 293], [334, 294], [334, 295], [334, 296], [334, 297], [335, 206], [335, 207], [335, 208], [335, 209], [335, 210], [335, 211], [335, 212], [335, 213], [335, 214], [335, 215], [335, 216], [335, 217], [335, 218], [335, 219], [335, 220], [335, 221], [335, 222], [335, 223], [335, 224], [335, 225], [335, 226], [335, 227], [335, 228], [335, 229], [335, 230], [335, 231], [335, 232], [335, 233], [335, 234], [335, 235], [335, 236], [335, 237], [335, 238], [335, 239], [335, 240], [335, 241], [335, 242], [335, 243], [335, 244], [335, 245], [335, 246], [335, 247], [335, 248], [335, 249], [335, 250], [335, 251], [335, 252], [335, 253], [335, 254], [335, 255], [335, 256], [335, 257], [335, 258], [335, 259], [335, 260], [335, 261], [335, 262], [335, 263], [335, 264], [335, 265], [335, 266], [335, 267], [335, 268], [335, 269], [335, 270], [335, 271], [335, 272], [335, 273], [335, 274], [335, 275], [335, 276], [335, 277], [335, 278], [335, 279], [335, 280], [335, 281], [335, 282], [335, 283], [335, 284], [335, 285], [335, 286], [335, 287], [335, 288], [335, 289], [335, 290], [335, 291], [335, 292], [335, 293], [335, 294], [335, 295], [335, 296], [335, 297], [336, 206], [336, 207], [336, 208], [336, 209], [336, 210], [336, 211], [336, 212], [336, 213], [336, 214], [336, 215], [336, 216], [336, 217], [336, 218], [336, 219], [336, 220], [336, 221], [336, 222], [336, 223], [336, 224], [336, 225], [336, 226], [336, 227], [336, 228], [336, 229], [336, 230], [336, 231], [336, 232], [336, 233], [336, 234], [336, 235], [336, 236], [336, 237], [336, 238], [336, 239], [336, 240], [336, 241], [336, 242], [336, 243], [336, 244], [336, 245], [336, 246], [336, 247], [336, 248], [336, 249], [336, 250], [336, 251], [336, 252], [336, 253], [336, 254], [336, 255], [336, 256], [336, 257], [336, 258], [336, 259], [336, 260], [336, 261], [336, 262], [336, 263], [336, 264], [336, 265], [336, 266], [336, 267], [336, 268], [336, 269], [336, 270], [336, 271], [336, 272], [336, 273], [336, 274], [336, 275], [336, 276], [336, 277], [336, 278], [336, 279], [336, 280], [336, 281], [336, 282], [336, 283], [336, 284], [336, 285], [336, 286], [336, 287], [336, 288], [336, 289], [336, 290], [336, 291], [336, 292], [336, 293], [336, 294], [336, 295], [336, 296], [336, 297], [337, 206], [337, 207], [337, 208], [337, 209], [337, 210], [337, 211], [337, 212], [337, 213], [337, 214], [337, 215], [337, 216], [337, 217], [337, 218], [337, 219], [337, 220], [337, 221], [337, 222], [337, 223], [337, 224], [337, 225], [337, 226], [337, 227], [337, 228], [337, 229], [337, 230], [337, 231], [337, 232], [337, 233], [337, 234], [337, 235], [337, 236], [337, 237], [337, 238], [337, 239], [337, 240], [337, 241], [337, 242], [337, 243], [337, 244], [337, 245], [337, 246], [337, 247], [337, 248], [337, 249], [337, 250], [337, 251], [337, 252], [337, 253], [337, 254], [337, 255], [337, 256], [337, 257], [337, 258], [337, 259], [337, 260], [337, 261], [337, 262], [337, 263], [337, 264], [337, 265], [337, 266], [337, 267], [337, 268], [337, 269], [337, 270], [337, 271], [337, 272], [337, 273], [337, 274], [337, 275], [337, 276], [337, 277], [337, 278], [337, 279], [337, 280], [337, 281], [337, 282], [337, 283], [337, 284], [337, 285], [337, 286], [337, 287], [337, 288], [337, 289], [337, 290], [337, 291], [337, 292], [337, 293], [337, 294], [337, 295], [337, 296], [337, 297], [338, 206], [338, 207], [338, 208], [338, 209], [338, 210], [338, 211], [338, 212], [338, 213], [338, 214], [338, 215], [338, 216], [338, 217], [338, 218], [338, 219], [338, 220], [338, 221], [338, 222], [338, 223], [338, 224], [338, 225], [338, 226], [338, 227], [338, 228], [338, 229], [338, 230], [338, 231], [338, 232], [338, 233], [338, 234], [338, 235], [338, 236], [338, 237], [338, 238], [338, 239], [338, 240], [338, 241], [338, 242], [338, 243], [338, 244], [338, 245], [338, 246], [338, 247], [338, 248], [338, 249], [338, 250], [338, 251], [338, 252], [338, 253], [338, 254], [338, 255], [338, 256], [338, 257], [338, 258], [338, 259], [338, 260], [338, 261], [338, 262], [338, 263], [338, 264], [338, 265], [338, 266], [338, 267], [338, 268], [338, 269], [338, 270], [338, 271], [338, 272], [338, 273], [338, 274], [338, 275], [338, 276], [338, 277], [338, 278], [338, 279], [338, 280], [338, 281], [338, 282], [338, 283], [338, 284], [338, 285], [338, 286], [338, 287], [338, 288], [338, 289], [338, 290], [338, 291], [338, 292], [338, 293], [338, 294], [338, 295], [338, 296], [338, 297], [339, 206], [339, 207], [339, 208], [339, 209], [339, 210], [339, 211], [339, 212], [339, 213], [339, 214], [339, 215], [339, 216], [339, 217], [339, 218], [339, 219], [339, 220], [339, 221], [339, 222], [339, 223], [339, 224], [339, 225], [339, 226], [339, 227], [339, 228], [339, 229], [339, 230], [339, 231], [339, 232], [339, 233], [339, 234], [339, 235], [339, 236], [339, 237], [339, 238], [339, 239], [339, 240], [339, 241], [339, 242], [339, 243], [339, 244], [339, 245], [339, 246], [339, 247], [339, 248], [339, 249], [339, 250], [339, 251], [339, 252], [339, 253], [339, 254], [339, 255], [339, 256], [339, 257], [339, 258], [339, 259], [339, 260], [339, 261], [339, 262], [339, 263], [339, 264], [339, 265], [339, 266], [339, 267], [339, 268], [339, 269], [339, 270], [339, 271], [339, 272], [339, 273], [339, 274], [339, 275], [339, 276], [339, 277], [339, 278], [339, 279], [339, 280], [339, 281], [339, 282], [339, 283], [339, 284], [339, 285], [339, 286], [339, 287], [339, 288], [339, 289], [339, 290], [339, 291], [339, 292], [339, 293], [339, 294], [339, 295], [339, 296], [339, 297], [340, 206], [340, 207], [340, 208], [340, 209], [340, 210], [340, 211], [340, 212], [340, 213], [340, 214], [340, 215], [340, 216], [340, 217], [340, 218], [340, 219], [340, 220], [340, 221], [340, 222], [340, 223], [340, 224], [340, 225], [340, 226], [340, 227], [340, 228], [340, 229], [340, 230], [340, 231], [340, 232], [340, 233], [340, 234], [340, 235], [340, 236], [340, 237], [340, 238], [340, 239], [340, 240], [340, 241], [340, 242], [340, 243], [340, 244], [340, 245], [340, 246], [340, 247], [340, 248], [340, 249], [340, 250], [340, 251], [340, 252], [340, 253], [340, 254], [340, 255], [340, 256], [340, 257], [340, 258], [340, 259], [340, 260], [340, 261], [340, 262], [340, 263], [340, 264], [340, 265], [340, 266], [340, 267], [340, 268], [340, 269], [340, 270], [340, 271], [340, 272], [340, 273], [340, 274], [340, 275], [340, 276], [340, 277], [340, 278], [340, 279], [340, 280], [340, 281], [340, 282], [340, 283], [340, 284], [340, 285], [340, 286], [340, 287], [340, 288], [340, 289], [340, 290], [340, 291], [340, 292], [340, 293], [340, 294], [340, 295], [340, 296], [340, 297], [341, 206], [341, 207], [341, 208], [341, 209], [341, 210], [341, 211], [341, 212], [341, 213], [341, 214], [341, 215], [341, 216], [341, 217], [341, 218], [341, 219], [341, 220], [341, 221], [341, 222], [341, 223], [341, 224], [341, 225], [341, 226], [341, 227], [341, 228], [341, 229], [341, 230], [341, 231], [341, 232], [341, 233], [341, 234], [341, 235], [341, 236], [341, 237], [341, 238], [341, 239], [341, 240], [341, 241], [341, 242], [341, 243], [341, 244], [341, 245], [341, 246], [341, 247], [341, 248], [341, 249], [341, 250], [341, 251], [341, 252], [341, 253], [341, 254], [341, 255], [341, 256], [341, 257], [341, 258], [341, 259], [341, 260], [341, 261], [341, 262], [341, 263], [341, 264], [341, 265], [341, 266], [341, 267], [341, 268], [341, 269], [341, 270], [341, 271], [341, 272], [341, 273], [341, 274], [341, 275], [341, 276], [341, 277], [341, 278], [341, 279], [341, 280], [341, 281], [341, 282], [341, 283], [341, 284], [341, 285], [341, 286], [341, 287], [341, 288], [341, 289], [341, 290], [341, 291], [341, 292], [341, 293], [341, 294], [341, 295], [341, 296], [341, 297], [342, 206], [342, 207], [342, 208], [342, 209], [342, 210], [342, 211], [342, 212], [342, 213], [342, 214], [342, 215], [342, 216], [342, 217], [342, 218], [342, 219], [342, 220], [342, 221], [342, 222], [342, 223], [342, 224], [342, 225], [342, 226], [342, 227], [342, 228], [342, 229], [342, 230], [342, 231], [342, 232], [342, 233], [342, 234], [342, 235], [342, 236], [342, 237], [342, 238], [342, 239], [342, 240], [342, 241], [342, 242], [342, 243], [342, 244], [342, 245], [342, 246], [342, 247], [342, 248], [342, 249], [342, 250], [342, 251], [342, 252], [342, 253], [342, 254], [342, 255], [342, 256], [342, 257], [342, 258], [342, 259], [342, 260], [342, 261], [342, 262], [342, 263], [342, 264], [342, 265], [342, 266], [342, 267], [342, 268], [342, 269], [342, 270], [342, 271], [342, 272], [342, 273], [342, 274], [342, 275], [342, 276], [342, 277], [342, 278], [342, 279], [342, 280], [342, 281], [342, 282], [342, 283], [342, 284], [342, 285], [342, 286], [342, 287], [342, 288], [342, 289], [342, 290], [342, 291], [342, 292], [342, 293], [342, 294], [342, 295], [342, 296], [342, 297], [343, 206], [343, 207], [343, 208], [343, 209], [343, 210], [343, 211], [343, 212], [343, 213], [343, 214], [343, 215], [343, 216], [343, 217], [343, 218], [343, 219], [343, 220], [343, 221], [343, 222], [343, 223], [343, 224], [343, 225], [343, 226], [343, 227], [343, 228], [343, 229], [343, 230], [343, 231], [343, 232], [343, 233], [343, 234], [343, 235], [343, 236], [343, 237], [343, 238], [343, 239], [343, 240], [343, 241], [343, 242], [343, 243], [343, 244], [343, 245], [343, 246], [343, 247], [343, 248], [343, 249], [343, 250], [343, 251], [343, 252], [343, 253], [343, 254], [343, 255], [343, 256], [343, 257], [343, 258], [343, 259], [343, 260], [343, 261], [343, 262], [343, 263], [343, 264], [343, 265], [343, 266], [343, 267], [343, 268], [343, 269], [343, 270], [343, 271], [343, 272], [343, 273], [343, 274], [343, 275], [343, 276], [343, 277], [343, 278], [343, 279], [343, 280], [343, 281], [343, 282], [343, 283], [343, 284], [343, 285], [343, 286], [343, 287], [343, 288], [343, 289], [343, 290], [343, 291], [343, 292], [343, 293], [343, 294], [343, 295], [343, 296], [343, 297], [344, 206], [344, 207], [344, 208], [344, 209], [344, 210], [344, 211], [344, 212], [344, 213], [344, 214], [344, 215], [344, 216], [344, 217], [344, 218], [344, 219], [344, 220], [344, 221], [344, 222], [344, 223], [344, 224], [344, 225], [344, 226], [344, 227], [344, 228], [344, 229], [344, 230], [344, 231], [344, 232], [344, 233], [344, 234], [344, 235], [344, 236], [344, 237], [344, 238], [344, 239], [344, 240], [344, 241], [344, 242], [344, 243], [344, 244], [344, 245], [344, 246], [344, 247], [344, 248], [344, 249], [344, 250], [344, 251], [344, 252], [344, 253], [344, 254], [344, 255], [344, 256], [344, 257], [344, 258], [344, 259], [344, 260], [344, 261], [344, 262], [344, 263], [344, 264], [344, 265], [344, 266], [344, 267], [344, 268], [344, 269], [344, 270], [344, 271], [344, 272], [344, 273], [344, 274], [344, 275], [344, 276], [344, 277], [344, 278], [344, 279], [344, 280], [344, 281], [344, 282], [344, 283], [344, 284], [344, 285], [344, 286], [344, 287], [344, 288], [344, 289], [344, 290], [344, 291], [344, 292], [344, 293], [344, 294], [344, 295], [344, 296], [344, 297], [345, 206], [345, 207], [345, 208], [345, 209], [345, 210], [345, 211], [345, 212], [345, 213], [345, 214], [345, 215], [345, 216], [345, 217], [345, 218], [345, 219], [345, 220], [345, 221], [345, 222], [345, 223], [345, 224], [345, 225], [345, 226], [345, 227], [345, 228], [345, 229], [345, 230], [345, 231], [345, 232], [345, 233], [345, 234], [345, 235], [345, 236], [345, 237], [345, 238], [345, 239], [345, 240], [345, 241], [345, 242], [345, 243], [345, 244], [345, 245], [345, 246], [345, 247], [345, 248], [345, 249], [345, 250], [345, 251], [345, 252], [345, 253], [345, 254], [345, 255], [345, 256], [345, 257], [345, 258], [345, 259], [345, 260], [345, 261], [345, 262], [345, 263], [345, 264], [345, 265], [345, 266], [345, 267], [345, 268], [345, 269], [345, 270], [345, 271], [345, 272], [345, 273], [345, 274], [345, 275], [345, 276], [345, 277], [345, 278], [345, 279], [345, 280], [345, 281], [345, 282], [345, 283], [345, 284], [345, 285], [345, 286], [345, 287], [345, 288], [345, 289], [345, 290], [345, 291], [345, 292], [345, 293], [345, 294], [345, 295], [345, 296], [345, 297], [346, 206], [346, 207], [346, 208], [346, 209], [346, 210], [346, 211], [346, 212], [346, 213], [346, 214], [346, 215], [346, 216], [346, 217], [346, 218], [346, 219], [346, 220], [346, 221], [346, 222], [346, 223], [346, 224], [346, 225], [346, 226], [346, 227], [346, 228], [346, 229], [346, 230], [346, 231], [346, 232], [346, 233], [346, 234], [346, 235], [346, 236], [346, 237], [346, 238], [346, 239], [346, 240], [346, 241], [346, 242], [346, 243], [346, 244], [346, 245], [346, 246], [346, 247], [346, 248], [346, 249], [346, 250], [346, 251], [346, 252], [346, 253], [346, 254], [346, 255], [346, 256], [346, 257], [346, 258], [346, 259], [346, 260], [346, 261], [346, 262], [346, 263], [346, 264], [346, 265], [346, 266], [346, 267], [346, 268], [346, 269], [346, 270], [346, 271], [346, 272], [346, 273], [346, 274], [346, 275], [346, 276], [346, 277], [346, 278], [346, 279], [346, 280], [346, 281], [346, 282], [346, 283], [346, 284], [346, 285], [346, 286], [346, 287], [346, 288], [346, 289], [346, 290], [346, 291], [346, 292], [346, 293], [346, 294], [346, 295], [346, 296], [346, 297], [493, 371], [494, 348], [494, 350], [494, 351], [494, 353], [494, 354], [494, 357], [494, 358], [494, 359], [494, 360], [494, 362], [494, 363], [494, 364], [494, 365], [494, 367], [494, 368], [494, 369], [494, 370], [494, 372], [495, 320], [495, 326], [495, 327], [495, 328], [495, 329], [495, 331], [495, 332], [495, 335], [495, 337], [495, 338], [495, 339], [495, 343], [495, 344], [495, 348], [495, 349], [495, 350], [495, 353], [495, 354], [495, 355], [495, 358], [495, 359], [495, 364], [495, 366], [495, 368], [495, 371], [496, 300], [496, 302], [496, 304], [496, 305], [496, 306], [496, 308], [496, 309], [496, 312], [496, 313], [496, 314], [496, 315], [496, 319], [496, 320], [496, 323], [496, 324], [496, 325], [496, 327], [496, 328], [496, 333], [496, 334], [496, 335], [496, 338], [496, 343], [496, 346], [496, 350], [496, 357], [496, 361], [496, 372], [497, 270], [497, 277], [497, 280], [497, 281], [497, 282], [497, 283], [497, 286], [497, 288], [497, 289], [497, 290], [497, 292], [497, 293], [497, 296], [497, 297], [497, 298], [497, 299], [497, 301], [497, 302], [497, 303], [497, 307], [497, 308], [497, 311], [497, 312], [497, 319], [497, 321], [497, 323], [497, 325], [497, 331], [497, 335], [497, 340], [497, 345], [498, 255], [498, 256], [498, 258], [498, 260], [498, 261], [498, 263], [498, 265], [498, 266], [498, 267], [498, 268], [498, 272], [498, 273], [498, 274], [498, 277], [498, 278], [498, 279], [498, 282], [498, 283], [498, 284], [498, 287], [498, 288], [498, 289], [498, 292], [498, 293], [498, 295], [498, 300], [498, 305], [498, 316], [498, 320], [498, 338]]



k=0
##STANDARD DEVIATION OF NOISE OF MEASUREMENTS

#variable to point the element of dijkstra path
z=0
#####
#Class to represent a graph 
#"""
import numpy as np
import pylab

# kalman1.py
# written by Greg Czerniak (email is greg {aT] czerniak [dOt} info )
#
# Implements a single-variable linear Kalman filter.
#
# Note: This code is part of a larger tutorial "Kalman Filters for Undergrads"
# located at http://greg.czerniak.info/node/5.
import random
import numpy
import pylab
import matplotlib.pyplot as plt
std=0.01
# Implements a linear Kalman filter.
class KalmanFilterLinear:
  def __init__(self,_A, _B, _H, _x, _P, _Q, _R):
    self.A = _A                      # State transition matrix.
    self.B = _B                      # Control matrix.
    self.H = _H                      # Observation matrix.
    self.current_state_estimate = _x # Initial state estimate.
    self.current_prob_estimate = _P  # Initial covariance estimate.
    self.Q = _Q                      # Estimated error in process.
    self.R = _R                      # Estimated error in measurements.
  def GetCurrentState(self):
    return self.current_state_estimate
  def Step(self,control_vector,measurement_vector):
    #---------------------------Prediction step-----------------------------
    predicted_state_estimate = self.A * self.current_state_estimate + self.B * control_vector
    predicted_prob_estimate = (self.A * self.current_prob_estimate) * numpy.transpose(self.A) + self.Q
    #--------------------------Observation step-----------------------------
    innovation = measurement_vector - self.H*predicted_state_estimate
    innovation_covariance = self.H*predicted_prob_estimate*numpy.transpose(self.H) + self.R
    #-----------------------------Update step-------------------------------
    kalman_gain = predicted_prob_estimate * numpy.transpose(self.H) * numpy.linalg.inv(innovation_covariance)
    self.current_state_estimate = predicted_state_estimate + kalman_gain * innovation
    # We need the size of the matrix so we can make an identity matrix.
    size = self.current_prob_estimate.shape[0]
    # eye(n) = nxn identity matrix.
    self.current_prob_estimate = (numpy.eye(size)-kalman_gain*self.H)*predicted_prob_estimate

class Sonar_measurement:
  def __init__(self,_truemeasure,_noiselevel):
    self.truemeasure = _truemeasure
    self.noiselevel = _noiselevel
  def GetMeasurement(self):
    return self.truemeasure
  def GetMeasurementWithNoise(self):
    return random.gauss(self.GetMeasurement(),self.noiselevel)
class Robot_pose:
  #--------------------------------VARIABLES----------------------------------
  
  velocity = [0, 0]
  loc = [0,0] # The initial location 
  acceleration = [0,0] # The initial acceleration
  #---------------------------------METHODS-----------------------------------
  def __init__(self,_timeslice):
    self.timeslice = _timeslice
    
    
    
    
  #---------------------------------METHODS FOR EKF FILTER-----------------------------------  
# Estimation parameter of EKF
Q = np.diag([std, std,std,std,std])**2  # Observation x,y position covariance
R = np.diag([0.01, 0.01, 0.01, 0.01,0.01])**2  # predict state covariance

#  Simulation parameter
Qsim = np.diag([0.01, 0.01])**2
Rsim = np.diag([0.1,0.1])**2

DT = 0.1  # time tick [s]
SIM_TIME = 50.0  # simulation time [s]

show_animation = True


def calc_input(v,yawrate):
    #v = 1.0  # [m/s]
    
    #yawrate = 0.1  # [rad/s]
    u = np.array([[v, yawrate]]).T
    return u


#def observation(xTrue, xd, u):

#    xTrue = motion_model(xTrue, u)
  
    # add noise to gps x-y
#    zx = xTrue[0, 0] + np.random.randn() * Qsim[0, 0]
#    zy = xTrue[1, 0] + np.random.randn() * Qsim[1, 1]
#    zz = np.array([[zx, zy]])

    # add noise to input
 #   ud1 = u[0, 0] + np.random.randn() * Rsim[0, 0]
#    ud2 = u[1, 0] + np.random.randn() * Rsim[1, 1]
 #   ud = np.array([[ud1, ud2]]).T

#    xd = motion_model(xd, ud)

 #   return xTrue, zz, xd, ud

def observation(xTrue,xd,u):

    xTrue = motion_model(xTrue, u)
  
     #add noise to gps x-y
    zx = xTrue[0, 0] + np.random.randn() * Qsim[0, 0]
    zy = xTrue[1, 0] + np.random.randn() * Qsim[1, 1]
    zang=xTrue[2, 0] + np.random.randn() * Qsim[0, 0]
    zz = np.array([[zx, zy,zang]])

    # add noise to input
    ud1 =  u[0, 0] + np.random.randn() * Rsim[0, 0]
    ud2 =  u[1, 0] + np.random.randn() * Rsim[1, 1]
    ud = np.array([[ud1, ud2]]).T

    xd = motion_model(xd, ud)

    return  xTrue,zz,xd, ud

def motion_model(x, u):#observed x

    F = np.array([[1.0, 0, 0, 0, 0],
                  [0, 1.0, 0, 0, 0],
                  [0, 0, 1.0, 0, 0],
                  [0, 0, 0, 1.0, 0],
                  [0, 0, 0, 0, 1.0]])

    B = np.array([[DT * cos(rads+1.57), 0],
                  [DT * sin(rads+1.57), 0],
                  [0.0, DT],
                  [0.0, 0.0],
                  [0.0, 0.0]])

    x = F.dot(x) + B.dot(u)

    return x


def observation_model(x):#observed x
    #  Observation Model
    H = np.array([
        [1, 0, 0, 0, 0],
        [0, 1, 0, 0 ,0],
        [0, 0, 1, 0 ,0],
        [0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1]
    ])

    zz = H.dot(x)
    #H1.dot(x)+H2.dot(compass)+H3.dot(velocity)
    return zz


def jacobF(x, u):
    """
    Jacobian of Motion Model
    motion model
    x_{t+1} = x_t+v*dt*cos(yaw)
    y_{t+1} = y_t+v*dt*sin(yaw)
    yaw_{t+1} = yaw_t+omega*dt
    v_{t+1} = v{t}
    so
    dx/dyaw = -v*dt*sin(yaw)
    dx/dv = dt*cos(yaw)
    dy/dyaw = v*dt*cos(yaw)
    dy/dv = dt*sin(yaw)
    """
    yaw = x[2, 0]
    print("yaw",yaw)
    print("rads",rads)
    v = u[0, 0]
    jF = np.array([
        [1.0, 0.0, -DT * v * sin(rads+1.57), DT * cos(rads+1.57), 0.0],
        [0.0, 1.0, DT * v * cos(rads+1.57), DT * sin(rads+1.57), 0.0],
        [0.0, 0.0, 1.0, 0.0 ,DT],
        [0.0, 0.0, 0.0, 1.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 1.0]])

    return jF


def jacobH(x):
    # Jacobian of Observation Model
    jH = np.array([
        [1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0],
        [0, 0, 0, 0, 1]
        
    ])

    return jH


def ekf_estimation(xEst, PEst, zz, u):

    #  Predict
    xPred = motion_model(xEst, u)
    jF = jacobF(xPred, u)
    PPred = jF.dot(PEst).dot(jF.T) + R

    #  Update
    jH = jacobH(xPred)
    zPred = observation_model(xPred)
    y = zz.T - zPred
    S = jH.dot(PPred).dot(jH.T) + Q
    K = PPred.dot(jH.T).dot(np.linalg.inv(S))
    xEst = xPred + K.dot(y)
    PEst = (np.eye(len(xEst)) - K.dot(jH)).dot(PPred)

    return xEst, PEst


def plot_covariance_ellipse(xEst, PEst):
    Pxy = PEst[0:2, 0:2]
    eigval, eigvec = np.linalg.eig(Pxy)

    if eigval[0] >= eigval[1]:
        bigind = 0
        smallind = 1
    else:
        bigind = 1
        smallind = 0

    t = np.arange(0, 2 * PI + 0.1, 0.1)
    a = sqrt(eigval[bigind])
    b = sqrt(eigval[smallind])
    x = [a * cos(it) for it in t]
    y = [b * sin(it) for it in t]
    angle = atan2(eigvec[bigind, 1], eigvec[bigind, 0])
    R = np.array([[cos(angle), sin(angle)],
                  [-sin(angle), cos(angle)]])
    fx = R.dot(np.array([[x, y]]))
    px = np.array(fx[0, :] + xEst[0, 0]).flatten()
    py = np.array(fx[1, :] + xEst[1, 0]).flatten()
    plt.plot(px, py, "--r")




 
#variables so as robot understand what kind of obstacles have
timeslice=0
boreia=0
noteia=0
anatolika=0
dytika=0
dialegw=0
first_choice=1
count_error_obstacles=0
count_local_error_obstacles=0
##
##variable to check if the robot has scanned the whole map
whole_map_scanned=0
candidate_dijkstra_cell=0
##
TIME_STEP = 128
#MAP_SIZE=15Î¼
MAP_SIZE=500 #the whole matrix has 500 * 500 cells

COUNT_U=5
COUNT_D=9.0
#MAX_SPEED=5.24
#MAX_SPEED =1.6
MAX_SPEED=3 #for odometry
CELL_SIZE=0.01
PI =3.141592653589793
MIN_DISTANCE=1
MAX_SENSOR_NUMBER =16
WHEEL_WEIGHT_THRESHOLD=100
LOCAL_MAP_SIZE=500 #range of sonar 4/ 0.01cell size
update_x=0
update_y=0
####cells with obstacles 
obstacles_xy=[]
visited_nodes=[12499]
next_node=[]
choice=[1,2,3,4]
current_node=12499
unknown_cells=[]
######
k=0
right=1 
straight=0
wait=0
m=0
#synartisi
###for global map:
#0:free 1:occupied 2:unknown
###initializations needed for trajectory planning

northwest=0
northeast=0
west=0
east=0
north=0
south=0
far_west=0
far_east=0
far_north=0
far_south=0
real_west=0
real_east=0
real_north=0
real_south=0
##northwest barrier
far_westnorth=0
far_northwest=0
northwest_count=0
northwest_edge_x=150
northwest_edge_y=150
##southeast barrier
far_eastsouth=0
far_southeast=0
southeast_count=0
southeast_edge_x=150
southeast_edge_y=150
##northeast barrier
far_eastnorth=0
far_northeast=0
northeast_count=0
northeast_edge_x=1500
northeast_edge_y=1500
##southwest barrier
far_westsouth=0
far_southwest=0
southwest_count=0
southwest_edge_x=1500
southwest_edge_y=1500
##
###
nw_barrier=0
ne_barrier=0
se_barrier=0
sw_barrier=0
##
southwest=0
southeast=0
upwest=0
upright=0
downwest=0
downright=0
count_distance=0
counter=0
total_robot_x=0
total_robot_y=0
total_robot_xx=0
total_robot_yy=0
total_robot_xxx=0
total_robot_yyy=0
total_x=0
total_y=0
prev_left=0
prev_right=0
left_offset=0
right_offset=0
##
sum_total_x=0
sum_total_y=0
##
first_time=0
second_time=0
#
shortest_distance=2.5
covered_cells=0
total_distance=2.0
flag=0
initialization=0
###
sign_barriers=0
barrier_x=[]
barrier_y=[]
##
north_frontier=[]
east_frontier=[]
west_frontier=[]
south_frontier=[]
##
object_detected=0
side_w=0
side_e=0
side_n=0
side_s=0
chosen_path=0
variable=0
##
#edge_east_x=0
#edge_east_y=0
#edge_west_x=200
#edge_west_y=200
edge_east_x=[0]
edge_east_y=[0]
edge_west_x=[2000]
edge_west_y=[2000]
point_edge=0
unique_ob=0
temp_east_x=0
temp_east_y=0
temp_west_x=0
temp_west_y=0
hide=0
temp_edge_west_x=0
temp_edge_west_y=0
##
so_visited=0
wo_visited=0
no_visited=0
eo_visited=0
##
mean_xw=[]
mean_yw=[]
mean_xe=[]
mean_ye=[]
mean_xs=[]
mean_ys=[]
mean_xn=[]
mean_yn=[]

true_distance=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
modified_distance=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
matrix_sw=[]
matrix_se=[]
matrix_ne=[]
matrix_nw=[]
matrix_en=[]
matrix_es=[]
matrix_wn=[]
matrix_ws=[]
first_entered_w=0
first_entered_s=0
first_entered_n=0
first_entered_e=0
detected_w=0
detected_s=0
detected_n=0
detected_e=0
##
case1_done=0
##
#meas_with_gauss_error=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
meas_with_gauss_error=[]
trueX=[]
trueY=[]
noisex=[]
noisey=[]
kx=[]
ky=[]
temptime=0
time = 0.0
# State Vector [x y yaw v]'
xEst = np.array([[0],[0],[0],[0],[0]])
xTrue = np.array([[0],[0],[0],[0],[0]])

PEst = np.eye(5)
        
xDR = np.array([[0],[0],[0],[0],[0]])  # Dead reckoning
        
        # history
hxEst = xEst
hxTrue =np.zeros((3, 1))
hxDR = xTrue
hz = np.zeros((1, 3))
meas_prob=0
distance_detected=0
wideofrads=[31,11,11,11,11,11,11,31,31,11,11,11,11,11,11,31]
rangerads=[-1.5708,-0.872665,-0.5236,-0.174533,0.174533,0.5236,0.87665,1.5708,1.5708,2.26893,2.6188,2.96706,-2.96706,-2.6188,-2.26893,-1.5708]
             ##START OF ODOMETRY CODE  ##
             
             
###initialization for odometry
# calibration for an accurate odometry
from math import exp
from math import atan2
from pykalman import KalmanFilter
import numpy as np 
from random import gauss
def get_degrees(number,numb):
  rad = atan2(number, numb)
  bearing = (rad - 1.5708) /3.14 * 180.0
  
  if bearing < 0.0:
    bearing = bearing + 360.0
  return bearing
def get_rad(number,numb):
  rad = atan2(number, numb)
  return rad  
###ADD NOISE TO ALL SENSOR READINGS
def add_gaussian_noise(dist):
  #noise=gauss(0,0.25)+dist
  noise=np.random.normal(0,std,1)*dist+dist
  return noise  
def flatten(lis):
     for item in lis:
         if isinstance(item, Iterable) and not isinstance(item, str):
             for x in flatten(item):
                 yield x
         else:        
             yield item
    
#https://en.wikibooks.org/wiki/Khepera_III_Toolbox/Examples/odometry_calibration
ENCODER_UNIT=132
#increments_per_tour = 500
#increments_per_tour = 85
increments_per_tour = 360
axis_wheel_ratio = 1.95 
#axis_wheel_ratio = 38.3      
#wheel_diameter_left = 0.0195    
#wheel_diameter_right = 0.0195 
wheel_diameter_left = 0.09    
wheel_diameter_right = 0.09
scaling_factor =0.94       
  # Odometry values
configuration_wheel_distance = axis_wheel_ratio * scaling_factor * (wheel_diameter_left + wheel_diameter_right) / 2
configuration_wheel_conversion_left = wheel_diameter_left * scaling_factor * PI / increments_per_tour
configuration_wheel_conversion_right = wheel_diameter_right * scaling_factor * PI / increments_per_tour
#  return 1
#configuration_wheel_distance=0.424
#configuration_wheel_conversion_left=0.006
#configuration_wheel_conversion_right=0.006
def odometry_update_pos(pos_left,pos_right,theta6):
  print("pos_left",pos_left)
  print("pos_right",pos_right)
  noisy_pos_left=add_gaussian_noise(pos_left)
  noisy_pos_right=add_gaussian_noise(pos_right)
  print("noisy_pos_left",noisy_pos_left)
  print("noisy_pos_right",noisy_pos_right)
  delta_pos_left = noisy_pos_left
  
  delta_pos_right = noisy_pos_right
  delta_left = delta_pos_left * configuration_wheel_conversion_left
  delta_right = delta_pos_right * configuration_wheel_conversion_right
  delta_theta = get_abs(delta_right - delta_left) / configuration_wheel_distance
  #theta2 = result_theta + delta_theta * 0.5
  compasslist=compass.getValues()
        #print("gps",gpslist)
  print("compass",compasslist)
  print("delta_theta",delta_theta)
  bear = (delta_theta) /3.14 * 180.0
  
  if bear< 0.0:
      print(bear)
      bear = bear + 360.0
  
  theta4=get_degrees(compasslist[0],compasslist[2])
  theta2=get_rad(compasslist[0],compasslist[2])
  theta5=theta6
  theta5=delta_theta*0.5+theta5
  if theta5 > PI:
      theta5 -= 2 * PI
  if theta5 < -PI:
      theta5 += 2 * PI
  print(" gps rad",theta2)
  
  print("real rad",theta5)
  bearing = (theta5-1.57 ) /3.14 * 180.0
  
  if bearing < 0.0:
      print(bearing)
      bearing = bearing + 360.0
  print("gps angle",theta4)  
  print("real angle", bearing)
  delta_x = (delta_left + delta_right) * 0.5 * cos(theta2)
  print(cos(theta4))
  print(sin(theta4))
  delta_y = (delta_left + delta_right) * 0.5 * sin(theta2)
  print("delta_x",delta_x)
  print("delta_y",delta_y)
  ##
  if theta4<90.0 and theta4>70.0:
      delta_x=get_abs(delta_x)
      delta_y=-get_abs(delta_y)
  if theta4>90.0 and theta4<110.0:
      delta_x=get_abs(delta_x)
      delta_y=get_abs(delta_y)
  if theta4<275.0 and theta4>230.0:
      delta_x=-get_abs(delta_x)
      delta_y=get_abs(delta_y)
  if theta4>275.0 and theta4<290.0:
      delta_x=-get_abs(delta_x)
      delta_y=-get_abs(delta_y)  
  if theta4<30.0 and theta4>0.0:
      delta_x=get_abs(delta_x)
      delta_y=-get_abs(delta_y)
  if theta4>340.0:
      delta_x=-get_abs(delta_x)
      delta_y=-get_abs(delta_y)
  if theta4<200.0 and theta4>180.0:
      delta_x=-get_abs(delta_x)
      delta_y=get_abs(delta_y)
  if theta4>160.0 and theta4<180.0:
      delta_x=get_abs(delta_x)
      delta_y=get_abs(delta_y)
  return [delta_x,delta_y,theta5]
  
  
###              END OF ODOMETRY CODE  ##





STATE=[0,1,2]
wheel_weight= [[150, 0], [200, 0], [300, 0],[600, 0],[0, 600], [0, 300], [0, 200], [0, 150],[0, 0], 
[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0]]
wheel_weight_total=[0.0,0.0]
speed=[0.0,0.0]
state=0
starting_point=[0,0,0]

def get_abs(x):
    if x<0:
        return -x
    else:
        return x
def getDistance(sensor):
    """
    Return the distance of an obstacle for a sensor.

    The value returned by the getValue() method of the distance sensors
    corresponds to a physical value (here we have a sonar, so it is the
    strength of the sonar ray). This function makes a conversion to a
    distance value in meters.
    """
    a=((1000 - sensor.getValue()) / 1000) * 5
    return a+0.2
#####here is defined which cell is neighbour of  another 
def neighbors(node):
    
    dirs = [[1, 0], [0, 1], [-1, 0], [0, -1],[1, 1], [-1, 1], [-1, -1], [1, -1]]
    result = []
    for dir in dirs:
        neighbor = [node[0] + dir[0], node[1] + dir[1]]
        if 0 <= neighbor[0] <LOCAL_MAP_SIZE and 0 <= neighbor[1] < LOCAL_MAP_SIZE:
            result.append(neighbor)
    return result
def neighbors_general(node):
    
    dirs = [[1, 0], [0, 1], [-1, 0], [0, -1],[1, 1], [-1, 1], [-1, -1], [1, -1]]
    result = []
    for dir in dirs:
        neighbor = [node[0] + dir[0], node[1] + dir[1]]
        if 0 <= neighbor[0] <MAP_SIZE and 0 <= neighbor[1] < MAP_SIZE:
            result.append(neighbor)
    return result
#grids to nodes initialization
all_nodes = []
###initialization of graph for the djikstra algorithm
Graphy=[]
big_list=[]
##here is the function that split the square llist to a equal amount of indexes nested lists
##to create a djacency matrix to use for djikstra algorithm
def split_list (x):
   return [big_list[i:i+x] for i in range(0, len(big_list), x)]
   
   
   
   
#              INITIALIZE DEVICES    ##



# create the Robot instance.
robot = Robot()

#here is the distance sensors
so = []
soNames = ['so0', 'so1', 'so2', 'so3','so4', 'so5', 'so6', 'so7','so8','so9',
'so10', 'so11', 'so12', 'so13','so14', 'so15'
]
#enable accelemeter 
accelerometer=robot.getAccelerometer('accelerometer')
accelerometer.enable(TIME_STEP)
#enable gps
gps=robot.getGPS('gps')
gps.enable(TIME_STEP)
#enable gyro
gyro=robot.getGyro('gyro')
gyro.enable(TIME_STEP)
#enable compass
compass=robot.getCompass('compass')
compass.enable(TIME_STEP)
leftMotor = robot.getMotor('left wheel')
rightMotor = robot.getMotor('right wheel')
leftMotor.setPosition(float('inf'))
rightMotor.setPosition(float('inf'))
leftMotor.setVelocity(0.0)
rightMotor.setVelocity(0.0)
leftSensor=robot.getPositionSensor('left wheel sensor')
leftSensor.enable(TIME_STEP)
rightSensor=robot.getPositionSensor('right wheel sensor')
rightSensor.enable(TIME_STEP)
closed_sensors=1

##                END OF INITIALIZATION    ##
##



##            MAIN AND LOCAL MAP AND POSE OF THE ROBOT    ##



#thesis of robot in the global map
robot_x = (MAP_SIZE-1) / 2
robot_y = (MAP_SIZE-1) / 2
temporar_se=int(robot_y)
temporar_sw=int(robot_y)
temporar_ne=int(robot_y)
temporar_nw=int(robot_y)
temporar_en=int(robot_x)
temporar_es=int(robot_x)
temporar_ws=int(robot_x)
temporar_wn=int(robot_x)
###pose of robot in local map
rob_x = int(LOCAL_MAP_SIZE) / 2
rob_y = int(LOCAL_MAP_SIZE) / 2
for i in range(16) :
    so.append(robot.getDistanceSensor(soNames[i]))
    so[i].enable(TIME_STEP)
# integer map initailialized every cell to 0
#Map is the map for the whole enviornmnet :
##
Map=[[2] * MAP_SIZE for i in range(MAP_SIZE)]
##THE PRIOR MAP CONTAINS THE PRIOR POSSIBILITIES  OF A CELL BEING FREE OR OCCUPIED
Prior_Map_Empty=[[0.5] * MAP_SIZE for i in range(MAP_SIZE)]
##THE POSTERIOR MAP CONTAINS THE POSSIBILITY OF BEING FREE OR NOT AFTER THE CALCULATIONS
Post_Map_Empty=[[0.5] * MAP_SIZE for i in range(MAP_SIZE)]
##THE PRIOR MAP CONTAINS THE PRIOR POSSIBILITIES  OF A CELL BEING FREE OR OCCUPIED
Prior_Map_Occ=[[0.5] * MAP_SIZE for i in range(MAP_SIZE)]
##THE POSTERIOR MAP CONTAINS THE POSSIBILITY OF BEING FREE OR NOT AFTER THE CALCULATIONS
Post_Map_Occ=[[0.5] * MAP_SIZE for i in range(MAP_SIZE)]
###
Local_map=[[0] * LOCAL_MAP_SIZE for i in range(LOCAL_MAP_SIZE)]
Temp_map=[[0] * LOCAL_MAP_SIZE for i in range(LOCAL_MAP_SIZE)]

####traversable map==local map where 1 exists the robot cannot go

###initialization of local map

    
#display in the window the map
display=robot.getDisplay('display')

height=display.getHeight()
width=display.getWidth()
display.imageCopy(0,0,width,height)    
#display the modified cells occupied or not 

     
#initaliazion of temps
temp1=0
temp2=0
temp3=0
temp4=0
temp5=0
temp6=0
robott_movement_xx=0
robott_movement_yy=0
total_robot_xx=0
total_robot_yy=0
#initialize the state
state=0
c=0
mapa=0
i=0
                ####LIST OF USED COLOURS##
                
                #1   RED
        #color=display.setColor(0xF000F0)
        
                #2  LIGHT BLUE
        #color=display.setColor(0x00F0F0)
        
                #3  ORANGE
        #color=display.setColor(0xFF7000)
        
                #4 BLUE
       #color=display.setColor(0x0000FF)  
            
                ####MAIN PROGRAMM##


                
##                
# feedback loop: step simulation until receiving an exit event
while robot.step(TIME_STEP) != -1:
    import matplotlib.pyplot as plt

   # x = [20, 10, 5.22, 3, 0]
   # y = [0, 0.9082, 0.9301,1.0187,1.1437]
    
   # plt.plot(x, y)
    
    #plt.xlabel('dB')
    #plt.ylabel('ratio')
    
   # plt.title('Ratio of total occupied cells  with noise to cells without noise in increasing noise dB')
    
    #plt.show()
    if counter==0:
            initial_robot_x=robot_x
            initial_robot_y=robot_y
            #### LOCAL MAPPING OF OBSTACLES###
    
    if(mapa<=24):
        print("northeast_count",northeast_count)
        
        #initialize speed and wheel_weight_total arrays at the beginning of the loop
        for i in range(2):
            wheel_weight_total[i]=0
            speed[i]=0 
        # read sensors outputs
        accelemeterlist=accelerometer.getValues()
        print("accelerometer",accelemeterlist)
        soValues = []
        gpslist=gps.getValues()
        compasslist=compass.getValues()
        #print("gps",gpslist)
        print("compass",compasslist)
        x_compass=compasslist[0]
        y_compass=compasslist[1]
        moires=get_degrees(compasslist[0],compasslist[2])
        print("moires ",moires)
        rads=-get_rad(compasslist[2],compasslist[0])
        
        print("rad",rads)
        x_axiscoordinate=gpslist[0]
        y_axiscoordinate=gpslist[2]
        
        robot_movement_x= x_axiscoordinate-temp1
        robot_movement_y= y_axiscoordinate-temp2
        leftSensor.enable(TIME_STEP)
           
        rightSensor.enable(TIME_STEP)
        left_offset=prev_left
        right_offset=prev_right
        if mapa==0 and initialization==0:
            real=1.59
            initialization=1
        #print("left sensor",leftSensor.getValue()-left_offset)
        #print("right sensor",rightSensor.getValue()-right_offset)
        compasslist=compass.getValues()
       
        odometry=odometry_update_pos(ENCODER_UNIT *(leftSensor.getValue()-left_offset),ENCODER_UNIT * (rightSensor.getValue()-right_offset),real)
        odometry_y=odometry[1]
        odometry_x=odometry[0]
        total_x+=odometry_x
        total_y+=odometry_y
        real=odometry[2]
        
        #print("ODOMETRY X",total_x)
        #print("ODOMETRY Y",total_y)
        #print("ODOMETRY THETA",real)
        prev_left=leftSensor.getValue()
       #print("prevle",prev_left)
        prev_right=rightSensor.getValue()
        #("pervri",prev_right)
        #print(robot_movement_x)
        #print(robot_movement_y)
        #robot_x+=robot_movement_x
        #robot_y+=robot_movement_y
        print("initial_x",robot_x)
        print("initial_y",robot_y)
        print("initial_xx",int(robot_x))
        print("initial_yy",int(robot_y))
        
        color=display.setColor(0xF000F0)
       
        rect=display.drawRectangle(int(get_abs(robot_x)),int(get_abs(robot_y)),1,1)
               
        temp1=x_axiscoordinate
        temp2=y_axiscoordinate
         
        
        #algorithm for avoiding  obstacles
        if mapa==0:
            starting_point=[compasslist[0],compasslist[1],compasslist[2]]
            rob_x = int(LOCAL_MAP_SIZE) / 2
            rob_y = int(LOCAL_MAP_SIZE) / 2
        
       
        for i in range(MAX_SENSOR_NUMBER):    
            print(i)
            
            soValues.append(so[i].getValue())
            meas_with_gauss_error=[]
            for x in range(30):
                distance_noise=add_gaussian_noise(getDistance(so[i]))
                meas_with_gauss_error.append(distance_noise)
            a=np.asarray(meas_with_gauss_error)
            avg2=sum(meas_with_gauss_error)/30
            print("avg2",avg2)
           
            #distance=getDistance(so[i])
            #print(distance)
            numsteps = 60
    
           
            filter = KalmanFilterLinear(numpy.matrix([1]),numpy.matrix([0]),numpy.matrix([1]), numpy.matrix([avg2]),numpy.matrix([std**2]),numpy.matrix([0.00001]),numpy.matrix([std**2]))
            
            soValues.append(so[i].getValue())
            sonar_measurement = Sonar_measurement(getDistance(so[i]),std)
            
            measuredsonar = []
            truemeasure = []
            kalman = []
            
            for y in range(numsteps):
                measured = sonar_measurement.GetMeasurementWithNoise()
                measuredsonar.append(measured)
                truemeasure.append(sonar_measurement.GetMeasurement())
                kalman.append(filter.GetCurrentState()[0,0])
                filter.Step(numpy.matrix([0]),numpy.matrix([measured]))
            #print(kalman)
           
            kalm_distance=kalman[-1]
            del measuredsonar
            del truemeasure
            del kalman 
            del meas_with_gauss_error  
            del a    
            if kalm_distance<4 :
                print("aktina ",i)
                distance=kalm_distance
                print("distance",distance)
                tr_distance=getDistance(so[i])
                print("tr_distance",tr_distance)
                for v in range(wideofrads[i]):#20 range of this sensor
                    #rangerads[i]
                    ###NORTH
                    if rads+rangerads[i]+v*0.0174533>-0.5236 and rads+rangerads[i]+v*0.0174533<0.5236:

                        north=1
                        boreia+=1
                       
                        if rads+rangerads[i]+v*0.0174533>0 and rads+rangerads[i]+v*0.0174533<0.5236:
                            if int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533)) )<50:
                                north_frontier.append(int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533)) ))
                    ###NORTHEAST        
                    if rads+rangerads[i]+v*0.0174533>0.34 and rads+rangerads[i]+v*0.0174533<1.309:
                        northeast_count+=1
                    ###EAST
                    if rads+rangerads[i]+v*0.0174533>1.309 and rads+rangerads[i]+v*0.0174533<1.92: 
                        right+=1
                        anatolika+=1
                        
                        if rads+rangerads[i]+v*0.0174533>1.5708 and rads+rangerads[i]+v*0.0174533<1.92:
                            if int(robot_x+distance*100*get_abs(sin(rads+rangerads[i]+v*0.0174533)))>MAP_SIZE-50:
                                east_frontier.append(int(robot_x+distance*100*get_abs(sin(rads+rangerads[i]+v*0.0174533))))
                    ###SOUTH
                    if rads+rangerads[i]+v*0.0174533>2.88 and rads+rangerads[i]+v*0.0174533<3.49:
                       
                        noteia+=1
                        south=1
                        if rads+rangerads[i]+v*0.0174533>3.14159 and rads+rangerads[i]+v*0.0174533<3.49:
                            if int(robot_y-distance*100*get_abs(cos(rads+rangerads[i]+v*0.0174533)) )>MAP_SIZE-50:
                                south_frontier.append(int(robot_y-distance*100*get_abs(cos(rads+rangerads[i]+v*0.0174533)) ))
                    ###SOUTHEAST
                    if rads+rangerads[i]+v*0.0174533<2.88 and rads+rangerads[i]+v*0.0174533>1.92:
                        southeast_count+=1
                    ###WEST    
                    if rads+rangerads[i]+v*0.0174533<-1.22 and rads+rangerads[i]+v*0.0174533>-1.658: 
                        dytika+=1
                        west=1   
                        #print("west")
                        if int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533)))<100:
                            west_frontier.append(int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533))))
                           
                    ##NORTHWEST
                    if rads+rangerads[i]+v*0.0174533<-0.523 and rads+rangerads[i]+v*0.0174533>-1.396: 
                        northwest_count+=1
                    ###SOUTHWEST 
                    
                    if rads+rangerads[i]+v*0.0174533<-1.658 and rads+rangerads[i]+v*0.0174533>-2.8: 
                        southwest_count+=1
                        
                    if  int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533)))>=0 and int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533)))<=MAP_SIZE-1 and  int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533)) )>=0 and int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533)) )<=MAP_SIZE-1:  
                        color=display.setColor(0xFF0000)
                        #rect=display.drawRectangle(int(robot_x+distance*100*(sin(rads+v*0.0174533+rangerads[i]))),int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533)) ),1,1)
                       
                        Map[int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533)))][int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533)) )]=1
                        if rads+rangerads[i]+v*0.0174533<-1.0472 and  rads+rangerads[i]+v*0.0174533>-2.0944:
                           
                            mean_xw.append(int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533))))
                            mean_yw.append(int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533))))
                        if rads+rangerads[i]+v*0.0174533<0.349 and rads+rangerads[i]+v*0.0174533>-0.349 :
                           
                            mean_xn.append(int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533))))
                            mean_yn.append(int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533))))
                        if rads+rangerads[i]+v*0.0174533<2.0944 and rads+rangerads[i]+v*0.0174533>1.0472 :
                            mean_xe.append(int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533))))
                            mean_ye.append(int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533))))
                        if rads+rangerads[i]+v*0.0174533<-2.792 or rads+rangerads[i]+v*0.0174533>2.792 :
                            
                            mean_xs.append(int(robot_x+distance*100*(sin(rads+rangerads[i]+v*0.0174533))))
                            mean_ys.append(int(robot_y-distance*100*(cos(rads+rangerads[i]+v*0.0174533))))
        
        for i in range(MAX_SENSOR_NUMBER):    
            print(i)
            
            soValues.append(so[i].getValue())
            meas_with_gauss_error=[]
            for x in range(30):
                distance_noise=add_gaussian_noise(getDistance(so[i]))
                meas_with_gauss_error.append(distance_noise)
            a=np.asarray(meas_with_gauss_error)
            avg2=sum(meas_with_gauss_error)/30
            print(avg2)
            
            #distance=getDistance(so[i])
            #print(distance)
            numsteps = 60
    
           
            filter = KalmanFilterLinear(numpy.matrix([1]),numpy.matrix([0]),numpy.matrix([1]), numpy.matrix([avg2]),numpy.matrix([std**2]),numpy.matrix([0.00001]),numpy.matrix([std**2]))
            
            soValues.append(so[i].getValue())
            sonar_measurement = Sonar_measurement(getDistance(so[i]),std)
            
            measuredsonar = []
            truemeasure = []
            kalman = []
            
            for y in range(numsteps):
                measured = sonar_measurement.GetMeasurementWithNoise()
                measuredsonar.append(measured)
                truemeasure.append(sonar_measurement.GetMeasurement())
                kalman.append(filter.GetCurrentState()[0,0])
                filter.Step(numpy.matrix([0]),numpy.matrix([measured]))
            print(kalman)
           
            
            #pylab.plot(range(numsteps),measuredsonar,'b',range(numsteps),truemeasure,'r',range(numsteps),kalman,'g')
            #pylab.xlabel('Samples')
            #pylab.ylabel('Sensor Measurement')
            #pylab.title('Sensor Measurement with Kalman Filter')
            #pylab.legend(('measured','truemeasure','kalman'))
            #pylab.show()
                
            kalm_distance=kalman[-1]
            del measuredsonar
            del truemeasure
            del kalman 
            del meas_with_gauss_error  
            del a    
            if kalm_distance<4 :
                print("aktina ",i)
                distance=kalm_distance
                print("distance",distance)
                tr_distance=getDistance(so[i])
                print("tr_distance",tr_distance)
                for v in range(wideofrads[i]):#20 range of this sensor
                    if 1:      
                        if i>0 and i<=4:
                            
                            if rads>-1 and rads<1:
                                avg_x=sum(mean_xw)/len(mean_xw)
                                difference=max(mean_yw)-min(mean_yw)
                                color=display.setColor(0xFF0000) 
                                true_distance[0]=int(robot_x-avg_x)
                                true_distance[1]=int(robot_x-avg_x)
                                true_distance[2]=int(robot_x-avg_x)
                                true_distance[15]=true_distance[0]
                                #line=display.drawLine(int(avg_x),min(mean_yw),int(avg_x),max(mean_yw)) 
                                for b in range(min(mean_yw),max(mean_yw),1):
                                    Map[int(avg_x)][b]=1  
                            elif rads >1.2 and rads <1.8:
                                avg_y=sum(mean_ys)/len(mean_ys)
                                difference=max(mean_xs)-min(mean_xs)
                                color=display.setColor(0xFF0000) 
                                true_distance[14]=int(avg_y-robot_y)
                                true_distance[11]=int(avg_y-robot_y)
                                true_distance[12]=int(avg_y-robot_y)
                                true_distance[13]=int(avg_y-robot_y)
                               
                                #line=display.drawLine(min(mean_xs),int(avg_y),max(mean_xs),int(avg_y))  
                                for b in range(min(mean_xs),max(mean_xs),1):
                                    Map[b][int(avg_y)]=1
                                    
                            elif rads <-1.2 and rads >-1.8:
                                avg_y=sum(mean_yn)/len(mean_yn)
                                difference=max(mean_xn)-min(mean_xn)
                                color=display.setColor(0xFF0000) 
                                true_distance[3]=int(robot_y-avg_y)
                                true_distance[4]=int(robot_y-avg_y)
                                true_distance[5]=int(robot_y-avg_y)
                                true_distance[6]=int(robot_y-avg_y)
                                
                                #line=display.drawLine(min(mean_xn),int(avg_y),max(mean_xn),int(avg_y))  
                                for b in range(min(mean_xn),max(mean_xn),1):
                                    Map[b][int(avg_y)]=1 
                            else:
                                avg_x=sum(mean_xe)/len(mean_xe)
                                difference=max(mean_ye)-min(mean_ye)
                                color=display.setColor(0xFF0000) 
                                true_distance[10]=int(avg_x-robot_x)
                                
                                true_distance[7]=int(avg_x-robot_x)
                                true_distance[8]=int(avg_x-robot_x)
                                true_distance[9]=int(avg_x-robot_x)
                                line=display.drawLine(int(avg_x),min(mean_ye),int(avg_x),max(mean_ye))
                                for b in range(min(mean_ye),max(mean_ye),1):
                                    Map[int(avg_x)][b]=1 
                    
                        if i>4 and i<9:
                            if rads>-1 and rads<1:
                                avg_y=sum(mean_yn)/len(mean_yn)
                                difference=max(mean_xn)-min(mean_xn)
                                color=display.setColor(0xFF0000) 
                                true_distance[3]=int(robot_y-avg_y)
                                true_distance[4]=int(robot_y-avg_y)
                                true_distance[5]=int(robot_y-avg_y)
                                true_distance[6]=int(robot_y-avg_y)
                                
                                #line=display.drawLine(min(mean_xn),int(avg_y),max(mean_xn),int(avg_y))  
                                for b in range(min(mean_xn),max(mean_xn),1):
                                    Map[b][int(avg_y)]=1 
                            elif rads >1.2 and rads <1.8:
                                avg_x=sum(mean_xw)/len(mean_xw)
                                difference=max(mean_yw)-min(mean_yw)
                                color=display.setColor(0xFF0000) 
                                true_distance[0]=int(robot_x-avg_x)
                                true_distance[1]=int(robot_x-avg_x)
                                true_distance[2]=int(robot_x-avg_x)
                                true_distance[15]=true_distance[0]
                                #line=display.drawLine(int(avg_x),min(mean_yw),int(avg_x),max(mean_yw)) 
                                for b in range(min(mean_yw),max(mean_yw),1):
                                    Map[int(avg_x)][b]=1
                                    
                            elif rads <-1.2 and rads >-1.8:
                                avg_x=sum(mean_xe)/len(mean_xe)
                                difference=max(mean_ye)-min(mean_ye)
                                color=display.setColor(0xFF0000) 
                                true_distance[10]=int(avg_x-robot_x)
                                
                                true_distance[7]=int(avg_x-robot_x)
                                true_distance[8]=int(avg_x-robot_x)
                                true_distance[9]=int(avg_x-robot_x)
                                #line=display.drawLine(int(avg_x),min(mean_ye),int(avg_x),max(mean_ye))
                                for b in range(min(mean_ye),max(mean_ye),1):
                                    Map[int(avg_x)][b]=1  
                            else:
                                avg_y=sum(mean_ys)/len(mean_ys)
                                difference=max(mean_xs)-min(mean_xs)
                                color=display.setColor(0xFF0000) 
                                true_distance[14]=int(avg_y-robot_y)
                                true_distance[11]=int(avg_y-robot_y)
                                true_distance[12]=int(avg_y-robot_y)
                                true_distance[13]=int(avg_y-robot_y)
                               
                                line=display.drawLine(min(mean_xs),int(avg_y),max(mean_xs),int(avg_y))  
                                for b in range(min(mean_xs),max(mean_xs),1):
                                    Map[b][int(avg_y)]=1   
                        if i>10 and i<=13:
                           
                           if rads>-1 and rads<1:
                                avg_x=sum(mean_xe)/len(mean_xe)
                                difference=max(mean_ye)-min(mean_ye)
                                color=display.setColor(0xFF0000) 
                                true_distance[10]=int(avg_x-robot_x)
                                
                                true_distance[7]=int(avg_x-robot_x)
                                true_distance[8]=int(avg_x-robot_x)
                                true_distance[9]=int(avg_x-robot_x)
                                #line=display.drawLine(int(avg_x),min(mean_ye),int(avg_x),max(mean_ye))
                                for b in range(min(mean_ye),max(mean_ye),1):
                                    Map[int(avg_x)][b]=1  
                           elif rads >1.2 and rads <1.8:
                                avg_y=sum(mean_yn)/len(mean_yn)
                                difference=max(mean_xn)-min(mean_xn)
                                color=display.setColor(0xFF0000) 
                                true_distance[3]=int(robot_y-avg_y)
                                true_distance[4]=int(robot_y-avg_y)
                                true_distance[5]=int(robot_y-avg_y)
                                true_distance[6]=int(robot_y-avg_y)
                                
                                line=display.drawLine(min(mean_xn),int(avg_y),max(mean_xn),int(avg_y))  
                                for b in range(min(mean_xn),max(mean_xn),1):
                                    Map[b][int(avg_y)]=1 
                                    
                           elif rads <-1.2 and rads >-1.8:
                                avg_y=sum(mean_ys)/len(mean_ys)
                                difference=max(mean_xs)-min(mean_xs)
                                color=display.setColor(0xFF0000) 
                                true_distance[14]=int(avg_y-robot_y)
                                true_distance[11]=int(avg_y-robot_y)
                                true_distance[12]=int(avg_y-robot_y)
                                true_distance[13]=int(avg_y-robot_y)
                               
                                #line=display.drawLine(min(mean_xs),int(avg_y),max(mean_xs),int(avg_y))  
                                for b in range(min(mean_xs),max(mean_xs),1):
                                    Map[b][int(avg_y)]=1  
                           else:
                                avg_x=sum(mean_xw)/len(mean_xw)
                                difference=max(mean_yw)-min(mean_yw)
                                color=display.setColor(0xFF0000) 
                                true_distance[0]=int(robot_x-avg_x)
                                true_distance[1]=int(robot_x-avg_x)
                                true_distance[2]=int(robot_x-avg_x)
                                true_distance[15]=true_distance[0]
                                #line=display.drawLine(int(avg_x),min(mean_yw),int(avg_x),max(mean_yw)) 
                                for b in range(min(mean_yw),max(mean_yw),1):
                                    Map[int(avg_x)][b]=1 
                        if i>13 and i<=15:
                           
                            if rads>-1 and rads<1:
                                avg_y=sum(mean_ys)/len(mean_ys)
                                difference=max(mean_xs)-min(mean_xs)
                                color=display.setColor(0xFF0000) 
                                true_distance[14]=int(avg_y-robot_y)
                                true_distance[11]=int(avg_y-robot_y)
                                true_distance[12]=int(avg_y-robot_y)
                                true_distance[13]=int(avg_y-robot_y)
                               
                                #line=display.drawLine(min(mean_xs),int(avg_y),max(mean_xs),int(avg_y))  
                                for b in range(min(mean_xs),max(mean_xs),1):
                                    Map[b][int(avg_y)]=1
                            elif rads <-1.2 and rads >-1.8:
                                avg_x=sum(mean_xw)/len(mean_xw)
                                difference=max(mean_yw)-min(mean_yw)
                                color=display.setColor(0xFF0000) 
                                true_distance[0]=int(robot_x-avg_x)
                                true_distance[1]=int(robot_x-avg_x)
                                true_distance[2]=int(robot_x-avg_x)
                                true_distance[15]=true_distance[0]
                                #line=display.drawLine(int(avg_x),min(mean_yw),int(avg_x),max(mean_yw)) 
                                for b in range(min(mean_yw),max(mean_yw),1):
                                    Map[int(avg_x)][b]=1
                                    
                            elif rads >1.2 and rads <1.8:
                                avg_x=sum(mean_xe)/len(mean_xe)
                                difference=max(mean_ye)-min(mean_ye)
                                color=display.setColor(0xFF0000) 
                                true_distance[10]=int(avg_x-robot_x)
                                
                                true_distance[7]=int(avg_x-robot_x)
                                true_distance[8]=int(avg_x-robot_x)
                                true_distance[9]=int(avg_x-robot_x)
                                #line=display.drawLine(int(avg_x),min(mean_ye),int(avg_x),max(mean_ye))
                                for b in range(min(mean_ye),max(mean_ye),1):
                                    Map[int(avg_x)][b]=1  
                            else:
                                avg_y=sum(mean_yn)/len(mean_yn)
                                difference=max(mean_xn)-min(mean_xn)
                                color=display.setColor(0xFF0000) 
                                true_distance[3]=int(robot_y-avg_y)
                                true_distance[4]=int(robot_y-avg_y)
                                true_distance[5]=int(robot_y-avg_y)
                                true_distance[6]=int(robot_y-avg_y)
                               
                                #line=display.drawLine(min(mean_xn),int(avg_y),max(mean_xn),int(avg_y))  
                                for b in range(min(mean_xn),max(mean_xn),1):
                                    Map[b][int(avg_y)]=1 
                    if rads+rangerads[i]+v*0.0174533>0.349:
                        northeast_count+=1
                         
                  
                for y in range(wideofrads[i]):#20 range of this sensor
                    #rangerads[i]   
                    ###NORTH
                    if rads+rangerads[i]-y*0.0174533>-0.5236 and rads+rangerads[i]-y*0.0174533<0.5236:

                        north=1
                        boreia+=1
                        
                        if rads+rangerads[i]-y*0.0174533>0 and rads+rangerads[i]-y*0.0174533<0.5236:
                            if int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533)) )<50:
                                north_frontier.append(int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533)) ))
                    ###NORTHEAST        
                    if rads+rangerads[i]-y*0.0174533>0.34 and rads+rangerads[i]-y*0.0174533<1.309:
                        northeast_count+=1
                    ###EAST
                    if rads+rangerads[i]-y*0.0174533>1.309 and rads+rangerads[i]-y*0.0174533<1.92: 
                        right+=1
                        anatolika+=1
                        #print("analotika") 
                        if rads+rangerads[i]-y*0.0174533>1.5708 and rads+rangerads[i]-y*0.0174533<1.92:
                            if int(robot_x+distance*100*get_abs(sin(rads+rangerads[i]-y*0.0174533)))>MAP_SIZE-50:
                                east_frontier.append(int(robot_x+distance*100*get_abs(sin(rads+rangerads[i]-y*0.0174533))))
                    ###SOUTH
                    if rads+rangerads[i]-y*0.0174533>2.88 and rads+rangerads[i]-y*0.0174533<3.49:
                        #print("noteia",noteia)
                        noteia+=1
                        south=1
                        if rads+rangerads[i]-y*0.0174533>3.14159 and rads+rangerads[i]-y*0.0174533<3.49:
                            if int(robot_y-distance*100*get_abs(cos(rads+rangerads[i]-y*0.0174533)) )>MAP_SIZE-50:
                                south_frontier.append(int(robot_y-distance*100*get_abs(cos(rads+rangerads[i]-y*0.0174533)) ))
                    ###SOUTHEAST
                    if rads+rangerads[i]-y*0.0174533<2.88 and rads+rangerads[i]-y*0.0174533>1.92:
                        southeast_count+=1
                    ###WEST    
                    if rads+rangerads[i]-y*0.0174533<-1.22 and rads+rangerads[i]-y*0.0174533>-1.658: 
                        dytika+=1
                        west=1   
                      
                        if (int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533))))<100:
                           
                            west_frontier.append(int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533))))
                            
                    ##NORTHWEST
                    if rads+rangerads[i]-y*0.0174533<-0.523 and rads+rangerads[i]-y*0.0174533>-1.396: 
                        northwest_count+=1
                    ###SOUTHWEST 
                    
                    if rads+rangerads[i]-y*0.0174533<-1.658 and rads+rangerads[i]-y*0.0174533>-2.8: 
                        southwest_count+=1
                        
                    if  int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533)))>=0 and int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533)))<=MAP_SIZE-1 and  int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533)) )>=0 and int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533)) )<=MAP_SIZE-1:      
                        color=display.setColor(0xFF0000)
                        #rect=display.drawRectangle(int(robot_x+distance*100*(sin(rads-y*0.0174533+rangerads[i]))),int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533)) ),1,1)
                        
                        Map[int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533)))][int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533)) )]=1
                    
                    ######
                        if rads+rangerads[i]-y*0.0174533<-1.0472 and  rads+rangerads[i]-y*0.0174533>-2.0944:
                           
                            mean_xw.append(int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533))))
                            mean_yw.append(int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533))))
                                   
                        if rads+rangerads[i]-y*0.0174533<2.0944 and rads+rangerads[i]-y*0.0174533>1.0472 :
                            mean_xe.append(int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533))))
                            mean_ye.append(int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533))))
                        if rads+rangerads[i]+v*0.0174533<0.349 and rads+rangerads[i]-y*0.0174533>-0.349 :
                           
                            mean_xn.append(int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533))))
                            mean_yn.append(int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533))))
                        if rads+rangerads[i]-y*0.0174533<-2.792 or rads+rangerads[i]-y*0.0174533>2.792 :
                            
                            mean_xs.append(int(robot_x+distance*100*(sin(rads+rangerads[i]-y*0.0174533))))
                            mean_ys.append(int(robot_y-distance*100*(cos(rads+rangerads[i]-y*0.0174533))))
        for i in range(MAX_SENSOR_NUMBER):    
            print(i)
            
            soValues.append(so[i].getValue())
            meas_with_gauss_error=[]
            for x in range(30):
                distance_noise=add_gaussian_noise(getDistance(so[i]))
                meas_with_gauss_error.append(distance_noise)
            a=np.asarray(meas_with_gauss_error)
            avg2=sum(meas_with_gauss_error)/30
            print(avg2)
            
            #distance=getDistance(so[i])
            #print(distance)
            numsteps = 60
    
           
            filter = KalmanFilterLinear(numpy.matrix([1]),numpy.matrix([0]),numpy.matrix([1]), numpy.matrix([avg2]),numpy.matrix([std**2]),numpy.matrix([0.00001]),numpy.matrix([std**2]))
            
            soValues.append(so[i].getValue())
            sonar_measurement = Sonar_measurement(getDistance(so[i]),std)
            
            measuredsonar = []
            truemeasure = []
            kalman = []
            
            for y in range(numsteps):
                measured = sonar_measurement.GetMeasurementWithNoise()
                measuredsonar.append(measured)
                truemeasure.append(sonar_measurement.GetMeasurement())
                kalman.append(filter.GetCurrentState()[0,0])
                filter.Step(numpy.matrix([0]),numpy.matrix([measured]))
            #print(kalman)
           
            kalm_distance=kalman[-1]
            del measuredsonar
            del truemeasure
            del kalman 
            del meas_with_gauss_error  
            del a    
            if kalm_distance<4 :
                print("aktina ",i)
                distance=kalm_distance
                print("distance",distance)
                tr_distance=getDistance(so[i])
                print("tr_distance",tr_distance)
                
                for v in range(wideofrads[i]):#20 range of this sensor
                    if 1:
                        if i>0 and i<=4:
                            avg_x=sum(mean_xw)/len(mean_xw)
                            difference=max(mean_yw)-min(mean_yw)
                            color=display.setColor(0xFF0000) 
                            
                            #line=display.drawLine(int(avg_x),min(mean_yw),int(avg_x),max(mean_yw)) 
                            for b in range(min(mean_yw),max(mean_yw),1):
                                Map[int(avg_x)][b]=1     
                        
                        if i>4 and i<9:
                            
                            avg_y=sum(mean_yn)/len(mean_yn)
                            difference=max(mean_xn)-min(mean_xn)
                            color=display.setColor(0xFF0000)   
                            avg_y=sum(mean_yn)/len(mean_yn)
                            difference=max(mean_xn)-min(mean_xn)
                            
                            #line=display.drawLine(min(mean_xn),int(avg_y),max(mean_xn),int(avg_y))
                            
                            for b in range(min(mean_xn),max(mean_xn),1):
                                Map[b][int(avg_y)]=1    
                       
                        if i>10 and i<=13:
                           
                            avg_x=sum(mean_xe)/len(mean_xe)
                            difference=max(mean_ye)-min(mean_ye)
                            color=display.setColor(0xFF0000) 
                           
                            
                            #line=display.drawLine(int(avg_x),min(mean_ye),int(avg_x),max(mean_ye))
                            for b in range(min(mean_ye),max(mean_ye),1):
                                Map[int(avg_x)][b]=1 
                        
                        if i>13 and i<=15:
                           
                            avg_y=sum(mean_ys)/len(mean_ys)
                            difference=max(mean_xs)-min(mean_xs)
                            color=display.setColor(0xFF0000) 
                           
                            #line=display.drawLine(min(mean_xs),int(avg_y),max(mean_xs),int(avg_y))
                            for b in range(min(mean_xs),max(mean_xs),1):
                                Map[b][int(avg_y)]=1   
                 
                        
            else:
                for t in range(200):
                    for v in range(wideofrads[i]): 
                         
                        color=display.setColor(0x00F0F0)
                        if int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))>=0 and int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))<=MAP_SIZE-1  and int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )>=0 and int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )<=MAP_SIZE-1:
                            if Map[int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )]!=1:
                                #rect=display.drawRectangle(int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) ),1,1)
                                Map[int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )]=0
                        
                    for y in range(wideofrads[i]): 
                        
                        color=display.setColor(0x00F0F0)
                        if int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))>=0 and int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))<=MAP_SIZE-1 and  int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )>=0 and int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )<=MAP_SIZE-1:
                            if Map[int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )]!=1:
                                #rect=display.drawRectangle(int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533))),int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) ),1,1)
                                Map[int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )]=0
                        
                               
        ###MODIFY DISTANCES
        
        if rads>-1 and rads<1:
            print("na")
            modified_distance=[true_distance[0],true_distance[1],true_distance[2],true_distance[3],true_distance[4],true_distance[5],true_distance[6],true_distance[7],true_distance[8],true_distance[9],true_distance[10],true_distance[11],true_distance[12],true_distance[13],true_distance[14],true_distance[15]]  
        elif rads>1.2 and rads<1.8:
            print("rg")
            modified_distance=[true_distance[4],true_distance[5],true_distance[6],true_distance[7],true_distance[8],true_distance[9],true_distance[10],true_distance[11],true_distance[12],true_distance[13],true_distance[14],true_distance[15],true_distance[0],true_distance[1],true_distance[2],true_distance[3]]             
        elif rads<-1.2 and rads>-1.8:
            print("lala")
            modified_distance=[true_distance[12],true_distance[13],true_distance[14],true_distance[15],true_distance[0],true_distance[1],true_distance[2],true_distance[3],true_distance[4],true_distance[5],true_distance[6],true_distance[7],true_distance[8],true_distance[9],true_distance[10],true_distance[11]]
        else:
            print("si")
            modified_distance=[true_distance[8],true_distance[9],true_distance[10],true_distance[11],true_distance[12],true_distance[13],true_distance[14],true_distance[15],true_distance[0],true_distance[1],true_distance[2],true_distance[3],true_distance[4],true_distance[5],true_distance[6],true_distance[7]]  
        print("mmm ",modified_distance)                                     
        for i in range(MAX_SENSOR_NUMBER):    
            print(i)
            
            soValues.append(so[i].getValue())
            meas_with_gauss_error=[]
            for x in range(30):
                distance_noise=add_gaussian_noise(getDistance(so[i]))
                meas_with_gauss_error.append(distance_noise)
            a=np.asarray(meas_with_gauss_error)
            avg2=sum(meas_with_gauss_error)/30
            print(avg2)
            
            #distance=getDistance(so[i])
            #print(distance)
            numsteps = 60
    
           
            filter = KalmanFilterLinear(numpy.matrix([1]),numpy.matrix([0]),numpy.matrix([1]), numpy.matrix([avg2]),numpy.matrix([std**2]),numpy.matrix([0.00001]),numpy.matrix([std**2]))
            
            soValues.append(so[i].getValue())
            sonar_measurement = Sonar_measurement(getDistance(so[i]),std)
            
            measuredsonar = []
            truemeasure = []
            kalman = []
            
            for y in range(numsteps):
                measured = sonar_measurement.GetMeasurementWithNoise()
                measuredsonar.append(measured)
                truemeasure.append(sonar_measurement.GetMeasurement())
                kalman.append(filter.GetCurrentState()[0,0])
                filter.Step(numpy.matrix([0]),numpy.matrix([measured]))
            #print(kalman)
           
            kalm_distance=kalman[-1]
            del measuredsonar
            del truemeasure
            del kalman 
            del meas_with_gauss_error  
            del a    
            if kalm_distance<4 :
                print("aktina ",i)
                distance=kalm_distance
                print("distance",distance)
                tr_distance=getDistance(so[i])
                print("tr_distance",tr_distance)
                for v in range(wideofrads[i]): 
                    for t in range(int(modified_distance[i])):
                    
                        if int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))>0 and int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )<MAP_SIZE-1:
                            color=display.setColor(0x00F0F0)
                            ii=int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))
                            jj=int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )
                            if Map[int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )]!=1:
                                Map[int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) )]=0 
                             
                                #rect=display.drawRectangle(int(robot_x+t*(sin(rads+rangerads[i]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[i]+v*0.0174533)) ),1,1)
                            ####REGION 2 SAFE AREA FOR POSSIBLE EMPTY CELLS
                            if t+10<int(modified_distance[i]) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                meas_prob=0.98*((5-t/100)/5 + (wideofrads[i]-v*0.0174533)/wideofrads[i])/2
                                Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                if (meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))==0:
                                    print("aa",t)
                                    print(Prior_Map_Occ[ii][jj])
                                    print(Prior_Map_Empty[ii][jj])
                                    print(ii)
                                    print(jj)
                                    sys.exit()
                                if Post_Map_Empty[ii][jj]>0.85:
                                    color=display.setColor(0x0000FF)
                                    rect=display.drawRectangle(ii,jj,1,1)
                                elif Post_Map_Empty[ii][jj]>0.65:
                                    color=display.setColor(0x00F0F0)
                                    rect=display.drawRectangle(ii,jj,1,1)
                                Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                               
                            ####REGION 1 SAFE AREA FOR POSSIBLE OCCUPIED CELLS 
                            if t+10>int(modified_distance[i]) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                meas_prob=((5-t/100)/5 + (wideofrads[i]-v*0.0174533)/wideofrads[i])/2
                                Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                if (meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))==0:
                                    print("bb",t)
                                    print(Prior_Map_Occ[ii][jj])
                                    print(Prior_Map_Empty[ii][jj])
                                    print(ii)
                                    print(jj)
                                    sys.exit()
                                if Post_Map_Occ[ii][jj]>0.85:
                                    color=display.setColor(0xFF0000)
                                    rect=display.drawRectangle(ii,jj,1,1)
                                    
                                elif Post_Map_Occ[ii][jj]>0.65:
                                    color=display.setColor(0xFF7000)
                                    rect=display.drawRectangle(ii,jj,1,1)    
                                Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                
                for y in range(1,wideofrads[i]): 
                    for t in range(int(modified_distance[i])):
                        if int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))>0 and int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )<MAP_SIZE-1:
                            color=display.setColor(0x00F0F0)
                            ii=int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))
                            jj=int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )
                           
                            if Map[int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )]!=1:
                                Map[int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) )]=0 
                                #rect=display.drawRectangle(int(robot_x+t*(sin(rads+rangerads[i]-y*0.0174533))),int(robot_y-t*(cos(rads+rangerads[i]-y*0.0174533)) ),1,1)
                              ####REGION 2 SAFE AREA FOR POSSIBLE EMPTY CELLS
                            if t+10<int(modified_distance[i]) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                meas_prob=((5-t/100)/5 + (wideofrads[i]-y*0.0174533)/wideofrads[i])/2
                                Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                               
                                if Post_Map_Empty[ii][jj]>0.85:
                                    color=display.setColor(0x0000FF)
                                    rect=display.drawRectangle(ii,jj,1,1)
                                elif Post_Map_Empty[ii][jj]>0.65:
                                    color=display.setColor(0x00F0F0)
                                    rect=display.drawRectangle(ii,jj,1,1)
                                Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                
                            ####REGION 1 SAFE AREA FOR POSSIBLE OCCUPIED CELLS 
                            if t+10>int(modified_distance[i]) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                meas_prob=0.98*((5-t/100)/5 + (wideofrads[i]-y*0.0174533)/wideofrads[i])/2
                                Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                if (meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))==0:
                                    print("dd",t)
                                    print(Prior_Map_Occ[ii][jj])
                                    print(Prior_Map_Empty[ii][jj])
                                    print(ii)
                                    print(jj)
                                    sys.exit()
                                if Post_Map_Occ[ii][jj]>0.85:
                                    color=display.setColor(0xFF0000)
                                    rect=display.drawRectangle(ii,jj,1,1)
                                    
                                elif Post_Map_Occ[ii][jj]>0.65:
                                    color=display.setColor(0xFF7000)
                                    rect=display.drawRectangle(ii,jj,1,1)
                                Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                
        
        mapa=25
        
        print("EMPTY",Post_Map_Empty[263][250])
        print("OCC",Post_Map_Occ[263][250])
        print(true_distance)  
            ###EXAMINING IF ROBOT IS IN MEDIAL AXIS##
        minpos=true_distance.index(min(true_distance))
        print(minpos)
        r1=min(true_distance)
        if minpos>0 and minpos<3:
            r2=true_distance[8]
            medial_axis_approach=3
        elif minpos>2 and  minpos<7:
            r2=true_distance[12]
            medial_axis_approach=4
        elif minpos>6 and  minpos<11:
            r2=true_distance[0]
            medial_axis_approach=2
        else:
            r2=true_distance[3]
            medial_axis_approach=1
        print("r1",r1)
        print("r2",r2)
             #####
        rads=get_rad(compasslist[0],compasslist[2]) 
        #sys.exit()     
         # write aelsectuators inputs
        leftMotor.setVelocity(speed[0])
        rightMotor.setVelocity(speed[1])
        northwest=0
        northeast=0
        west=0
        right=0
        north=0
        south=0
        southwest=0
        southeast=0
        
        ##END OF LOCAL MAPPING##
   
        #####25 timesteps to turn and print the whole local map


    elif mapa==25:
        
        if southeast_count>1  and noteia>=3 and anatolika>=3 and len(east_frontier)>0 and len(south_frontier)>0:
            print("SOUTHEAST EDGE ACHIEVED")
            
            southeast_edge_x=int(sum(east_frontier)/len(east_frontier))
            southeast_edge_y=int(sum(south_frontier)/len(south_frontier))
            print(southeast_edge_x)
            print(southeast_edge_y)
            se_barrier=1
            for w in range(200):
                if int(southeast_edge_x-w)<=MAP_SIZE-1 and int(southeast_edge_x)<=MAP_SIZE-1 and int(southeast_edge_y-w)<=MAP_SIZE-1 and int(southeast_edge_y)<=MAP_SIZE-1:
                    Map[int(southeast_edge_x)][int(southeast_edge_y-w)]=1
                    Map[int(southeast_edge_x-w)][int(southeast_edge_y)]=1
                    color=display.setColor(0xFF0000)
                    #rect=display.drawRectangle(int(southeast_edge_x),int(southeast_edge_y-w),1,1)
                    #rect=display.drawRectangle(int(southeast_edge_x-w),int(southeast_edge_y),1,1)
        
        if northwest_count>1 and boreia>=3 and dytika>=3 and len(west_frontier)>0 and len(north_frontier)>0:
            print("NORTHWEST EDGE ACHIEVED")
           
            northwest_edge_x=int(sum(west_frontier)/len(west_frontier))
            northwest_edge_y=int(sum(north_frontier)/len(north_frontier))
            print(northwest_edge_x)
            print(northwest_edge_y)
            nw_barrier=1
            for w in range(200):
                Map[int(northwest_edge_x)][int(northwest_edge_y+w)]=1
                Map[int(northwest_edge_x+w)][int(northwest_edge_y)]=1
                color=display.setColor(0xFF0000)
                #rect=display.drawRectangle(int(northwest_edge_x),int(northwest_edge_y+w),1,1)
                #rect=display.drawRectangle(int(northwest_edge_x+w),int(northwest_edge_y),1,1)
        
        if northeast_count>1  and boreia>=3 and anatolika>=3 and len(east_frontier)>0 and len(north_frontier)>0:
            print("NORTHEAST EDGE ACHIEVED")
           
            northeast_edge_x=int(sum(east_frontier)/len(east_frontier))
            northeast_edge_y=int(sum(north_frontier)/len(north_frontier))
            print(northeast_edge_x)
            print(northeast_edge_y)
            ne_barrier=1
            for w in range(200):
                if int(northeast_edge_x-w)<=MAP_SIZE-1 and int(northeast_edge_x)<=MAP_SIZE-1:
                    Map[int(northeast_edge_x)][int(northeast_edge_y+w)]=1
                    Map[int(northeast_edge_x-w)][int(northeast_edge_y)]=1
                    color=display.setColor(0xFF0000)
                    #rect=display.drawRectangle(int(northeast_edge_x),int(northeast_edge_y+w),1,1)
                    #rect=display.drawRectangle(int(northeast_edge_x-w),int(northeast_edge_y),1,1)
        
        if southwest_count>1  and noteia>=3 and dytika>=3 and len(west_frontier)>0 and len(south_frontier)>0:
            print("SOUTHWEST EDGE ACHIEVED")
           
            southwest_edge_x=int(sum(west_frontier)/len(west_frontier))
            southwest_edge_y=int(sum(south_frontier)/len(south_frontier))
            print(southwest_edge_x)
            print(southwest_edge_y)
            sw_barrier=1
            for w in range(200):
                if int(southwest_edge_y-w)<=MAP_SIZE-1 and int(southwest_edge_y)<=MAP_SIZE-1:
                    Map[int(get_abs(southwest_edge_x))][int(southwest_edge_y-w)]=1
                    Map[int(get_abs(southwest_edge_x+w))][int(southwest_edge_y)]=1
                    color=display.setColor(0xFF0000)
                    #rect=display.drawRectangle(int(southwest_edge_x),int(southwest_edge_y-w),1,1)
                    #rect=display.drawRectangle(int(southwest_edge_x+w),int(southwest_edge_y),1,1)                        
       
        west=0
        right=0
        north=0
        south=0
       
        
                
     
                ####END OF UPDATE##
       
        mapa+=1
        ##PATH TO SOUTH
        #######sto shmeio auto  arxikopoioume ton topiko pinaka
        
        print(next_node)
        print(current_node)
        print("lalaalalal")                   
       
        
        ##END OF PATH PLANNING##
       
        ###PATH PLANNING STRATEGY###
        
                                  
    else:
        ####using odomtery to estimate the movemnet of the robot 
        ### precisely without using gps
        ###update the position
       

        print("gyro",gyro.getValues())
        gyro_ang=gyro.getValues()
        ang_vel=gyro_ang[0]
        ang2_vel=gyro_ang[1]
        print("1" , ang_vel)
        print("2" ,ang2_vel)
        leftSensor.enable(TIME_STEP)
           
        rightSensor.enable(TIME_STEP)
        left_offset=prev_left
        right_offset=prev_right
        
        #print("left sensor",leftSensor.getValue()-left_offset)
        #print("right sensor",rightSensor.getValue()-right_offset)
        compasslist=compass.getValues()
        #print("compasssssssssss",compasslist)
        odometry=odometry_update_pos(ENCODER_UNIT *(leftSensor.getValue()-left_offset),ENCODER_UNIT * (rightSensor.getValue()-right_offset),real)
        odometry_y=odometry[1]
        odometry_x=odometry[0]
        total_x+=odometry_x
        total_y+=odometry_y
        real=odometry[2]
        print("ODOMETRY X",total_x)
        print("ODOMETRY Y",total_y)
        print("ODOMETRY THETA",real)
        prev_left=leftSensor.getValue()
        print("prevle",prev_left)
        prev_right=rightSensor.getValue()
        print("pervri",prev_right)
       
        gpslist=gps.getValues()
        
        print("gps",gpslist)
        print("compasssssssssss",compasslist)
        rotate_compass=compasslist[2]
        
                #####GPS MODE##
        x_axiscoordinate=gpslist[0]
        y_axiscoordinate=gpslist[2]
                ####ODOMETRY MODE
        xx_axiscoordinate=total_x
        yy_axiscoordinate=total_y
                    ##
        moires=get_degrees(compasslist[0],compasslist[2])
        print("moires",moires)
        rads=-get_rad(compasslist[2],compasslist[0])
        print("rads",rads)
        velocity_left=leftMotor.getVelocity()
        velocity_right=rightMotor.getVelocity()
        print("vel",velocity_left)
        linear_velocity=(velocity_left+velocity_right)/2
        angular_velocity=(velocity_left-velocity_right)/1.95
        linear_v_x=linear_velocity*sin(rads)
        linear_v_y=linear_velocity*cos(rads)
        print("linear_v_x",linear_v_x)
        print("linear_v_y",linear_v_y)
        accelemeterlist=accelerometer.getValues()
        print("accelerometer",accelemeterlist)
        #to prin
        robott_movement_x= x_axiscoordinate-temp1
        robott_movement_y= y_axiscoordinate-temp2
        print("xx",robott_movement_x)
        print("yy",robott_movement_y)
        ###EDW EGINE H ALLLGH
        total_robot_xxx+=robott_movement_x
        total_robot_yyy+=robott_movement_y
        print("totalxx ",total_robot_x)
        print("totalyy ",total_robot_y)
        temp1=x_axiscoordinate
        temp2=y_axiscoordinate
        ##ODOMTRY MEASURES 
        robott_movement_xx= xx_axiscoordinate-temp3
        robott_movement_yy= yy_axiscoordinate-temp4
        print("ODOMETRY X",total_x)
        print("ODOMETRY Y",total_y)
        print("xx_od",robott_movement_xx)
        print("yy_odd",robott_movement_yy)
        total_robot_xx+=robott_movement_xx
        total_robot_yy+=robott_movement_yy
        print("totalxx ",total_robot_xx)
        print("totalyy ",total_robot_yy)
        temp3=xx_axiscoordinate
        temp4=yy_axiscoordinate  
         
        ##########code for ekf kalman filter in odometry####
        
        
        
       
        
        
        time += 0.128
        print("angular_velocity",angular_velocity)
        print("linear_v",linear_velocity)
        u = calc_input(-0.1*linear_velocity,ang_vel)
        
        xTrue, zz, xDR, ud = observation(xTrue, xDR, u)
        
        #xEst, PEst = ekf_estimation(xEst, PEst, np.array([[robot_x+ 100*add_gaussian_noise(total_robot_x)[0], robot_y+ 100*add_gaussian_noise(total_robot_y)[0],add_gaussian_noise(rads)[0],-10*linear_velocity,ang_vel]]), ud)
        xEst, PEst = ekf_estimation(xEst, PEst, np.array([[add_gaussian_noise(total_robot_xxx)[0], add_gaussian_noise(total_robot_yyy)[0],add_gaussian_noise(rads)[0],-0.1*linear_velocity,ang_vel]]), ud)
             #store data history
        hxEst = np.hstack((hxEst, xEst))
        hxDR = np.hstack((hxDR, xDR))
        
       
        #hxTrue = np.hstack((hxTrue, np.array([[robot_x+ 100*(total_robot_x)], [robot_y+ 100*total_robot_y],[rads]])))
        hxTrue = np.hstack((hxTrue, np.array([[total_robot_xxx], [total_robot_yyy],[rads]])))
        print("xtrue",robot_x+total_robot_x*100)
        print("kalman",xEst[0])
        
        #zz=np.array([robot_x+ 100*add_gaussian_noise(total_robot_x)[0], robot_y+ 100*add_gaussian_noise(total_robot_y)[0],add_gaussian_noise(rads)[0]])
        zz=np.array([add_gaussian_noise(total_robot_xxx)[0], add_gaussian_noise(total_robot_yyy)[0],add_gaussian_noise(rads)[0]])
        hz = np.vstack((hz, zz))
        print("xDR",xDR)
       
        print("ang_vel",ang_vel) 
        total_robot_x+=float(xEst[0])-temp5
        total_robot_y+=float(xEst[1])-temp6  
        print("kalman_x",total_robot_x)
        print("xEst",float(xEst[0]))
        print("kalman-y",total_robot_y)  
        temp5=float(xEst[0])
        temp6=float(xEst[1]) 
        #sys.exit()    
        #if show_animation:
        #     plt.cla()
       #      plt.plot(hz[:, 0], hz[:, 1], ".g")
        #     plt.plot(hxTrue[0, :].flatten(),
       #                   hxTrue[1, :].flatten(), "-b")
        #     plt.plot(hxDR[0, :].flatten(),
       #                   hxDR[1, :].flatten(), "-k")
       #      plt.plot(hxEst[0, :].flatten(),
      #                     hxEst[1, :].flatten(), "-r")
       #      plt.axis("equal")
       #      plt.grid(True)
       #      plt.pause(0.001)
        
        
  
        
        ##########code for kalman filter in odometry####
       
        #timeslice=robot.getTime()+0.128
        #timeslice =robot.getTime()-temptime # How many seconds should elapse per iteration?
        #print("timeslice",timeslice)
        #noiselevel=30
        # These are arrays to store the data points we want to plot at the end.
       # x = []
       # y = []
       # #nx = []
       # #ny = []
       # #kx = []
       # #ky = []
        
        # Let's make a cannon simulation.
       # rp = Robot_pose(timeslice)
        
       # speedX = linear_v_x
        
       # speedY = linear_v_y
        
       # # This is the state transition vector, which represents part of the kinematics.
       # # 1, ts, 0,  0  =>  x(n+1) = x(n) + vx(n)
       # # 0,  1, 0,  0  => vx(n+1) =        vx(n)
       # # 0,  0, 1, ts  =>  y(n+1) =              y(n) + vy(n)
       # # 0,  0, 0,  1  => vy(n+1) =                     vy(n)
        ## Remember, acceleration gets added to these at the control vector.
        
       # state_transition = numpy.matrix([[1,timeslice,0,0],[0,1,0,0],[0,0,1,timeslice],[0,0,0,1]])
       # control_matrix = numpy.matrix([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]])
       # # The control vector, which adds acceleration to the kinematic equations.
      #  # =>  x(n+1) =  x(n+1)+ 0.5*a*ts^2
       # # => vx(n+1) = vx(n+1)+ a*ts
       # # =>  y(n+1) =  y(n+1) + 0.5*a*ts^2
       # # => vy(n+1) = vy(n+1) + a*ts
       # #control_vector = numpy.matrix([[0.5*accelemeterlist[2]*timeslice*timeslice],[accelemeterlist[2]*timeslice],[0.5*accelemeterlist[0]*timeslice*timeslice],[accelemeterlist[0]*timeslice]])
       # control_vector = numpy.matrix([[0*accelemeterlist[0]*timeslice*timeslice],[0*accelemeterlist[0]*timeslice],[0*accelemeterlist[2]*timeslice*timeslice],[0*accelemeterlist[2]*timeslice]])
       # #control_vector = numpy.matrix([[0],[0],[0.5*-9.81*timeslice*timeslice],[-9.81*timeslice]])
       # # After state transition and control, here are the equations:
       # #control_vector = numpy.matrix([[0],[0],[0.5*-9.81*timeslice*timeslice],[-9.81*timeslice]])
       # # After state transition and control, here are the equations:
       # #  x(n+1) = x(n) + vDT*cosÎ¸
        
        ##  y(n+1) = y(n) + vDT*sinÎ¸
       # #Î˜Îº+1=Î˜Îº+Ï‰Îº*Î”Î¤
       # # vx(n+1) =v
       # # vy(n+1) = v
       # #Ï‰Îº+1=Ï‰Îº
        
       # # Which, if you recall, are the equations of motion for a parabola.  Perfect.
       # #  x(n+1) = x(n) + vx(n)+0.5*a*ts^2
       # # vx(n+1) = vx(n) +  a*ts
       # #  y(n+1) = y(n) + vy(n) + 0.5*a*ts^2
       # # vy(n+1) = vy(n) +  a*ts
       # # Observation matrix is the identity matrix, since we can get direct
       # # measurements of all values in our example.
       # observation_matrix = numpy.eye(4)
       # #observation_matrix=np.array([[1, 0, 0, 0, 0],[0, 1, 0, 0, 0] ])
       # # This is our guess of the initial state.  I intentionally set the Y value
       # # wrong to illustrate how fast the Kalman filter will pick up on that.
       # initial_state = numpy.matrix([[0],[0],[0],[0]])
        
       # initial_probability = numpy.eye(4)
        
       # process_covariance = numpy.zeros(4)
       # measurement_covariance = numpy.eye(4)*std
       # if len(trueX)==0:
        
         #   kf = KalmanFilterLinear(state_transition, control_matrix, observation_matrix, initial_state, initial_probability, process_covariance, measurement_covariance)
        
          
           # # Iterate the robot pose simulation to the next timeslice.
       # if linear_v_x<-0.01:
        #    trueX.append(0+total_robot_x*1)
        #    trueY.append(0+total_robot_y*1) 
                    
         #   noisex.append(add_gaussian_noise(trueX[-1]))
               
         #   noisey.append(add_gaussian_noise(trueY[-1]))
                
            ##kf.Step(control_vector,numpy.matrix([noisex[0],[linear_v_x],noisey[0],[linear_v_y]]))
            ##print(nx)
            ##print(ny)
         #   kx.append(kf.GetCurrentState()[0,0])
         #   ky.append(kf.GetCurrentState()[2,0])
         #   kf.Step(control_vector,numpy.matrix([noisex[-1],[0.01*linear_v_x],noisey[-1],[-0.01*linear_v_y]]))
         #   print("kx",kx)
         #   print("ky",ky)
         #   print("trueX",trueX)
         #   print("trueY",trueY)
         #   print("noisex",noisex)
          #  print("noisey",noisey)
            
            ##if total_robot_x<-1:
           #    ##pylab.plot(trueX,trueY,'-',nx,ny,':',kx,ky,'--')
            #   #pylab.plot(trueX,trueY,'-',noisex,noisey,':',kx,ky,'--')
           #    #pylab.xlabel('X position')
           #    #pylab.ylabel('Y position')
           #   # pylab.title('Measurement of Position of the robot')
          #     #pylab.legend(('true','measured','kalman'))
          #    # pylab.show()
           #   # print(len(kx))
           #    #print(len(trueX))
           # temptime=timeslice
       
        
        ###########333######END OF CODE###333###3
        path1=1
        path2=2
        path3=3
        path4=4
        print("boreia",boreia)
        print("noteia",noteia)
        print("anatolika",anatolika)
        print("dytika",dytika)
        print("far_east",far_east)
        print("far_south",far_south)
        print("far_north",far_north)
        print("far_west",far_west)
        if (boreia>0 or far_north>0) and(anatolika<1 and far_east<1) and dytika<1 and far_west<1:
            print("bo")
            path1=random.choice([2,3,4])
            if path1==2:
                next_node.append(current_node-1)
            elif path1==3:
                next_node.append(current_node+1)
            elif path1==4 and (noteia>0 or far_south>0):
                next_node.append(current_node+1)
                path1=3
            elif path1==4 and noteia<1 and far_south<1:
                next_node.append(current_node+MAP_SIZE)
            next_node.append(current_node-1)
            next_node.append(current_node+1)
            if noteia<1 and far_south<1:
                next_node.append(current_node+MAP_SIZE)
            else: 
                next_node.append(current_node+1)
                path4=3    
        if ((boreia>0 or far_north>0) and (anatolika>0 or far_east>0) and dytika<1 and far_west<1 ) or (get_abs(robot_x-northeast_edge_x)<300 and get_abs(robot_y-northeast_edge_y)<300):
            print("bo")
            path1=random.choice([2,4])
            if path1==2:
                next_node.append(current_node-1)
            elif path1==4:
                next_node.append(current_node+MAP_SIZE)
            next_node.append(current_node-1)
              
            path3=random.choice([2,4])
            if path3==2:
                next_node.append(current_node-1)
            elif path3==4:
                next_node.append(current_node+MAP_SIZE)
            next_node.append(current_node+MAP_SIZE) 
        if ((boreia>0 or far_north>0) and (anatolika<1 and far_east<1) and (dytika>0 or far_west>0) ) or (get_abs(robot_x-northwest_edge_x)<300 and get_abs(robot_y-northwest_edge_y)<300):
            print("bo")
            path1=random.choice([3,4])
            if path1==3:
                next_node.append(current_node+1)
            elif path1==4:
                next_node.append(current_node+MAP_SIZE) 
            path2=random.choice([3,4])
            if path2==3:
                next_node.append(current_node+1)
            elif path2==4:
                next_node.append(current_node+MAP_SIZE)
            next_node.append(current_node+1) 
            next_node.append(current_node+MAP_SIZE) 
        if ((noteia>0 or far_south>0)and (anatolika<1 and far_east<1) and dytika<1 and far_west<1 ) or (get_abs(robot_x-southwest_edge_x)<300 and get_abs(robot_y-southwest_edge_y)<300):
            print("no")
            next_node.append(current_node-MAP_SIZE)
            next_node.append(current_node-1)
            next_node.append(current_node+1)
            path4=random.choice([2,3,1])
            if path4==2:
                next_node.append(current_node-1)
            elif path4==3:
                next_node.append(current_node+1)
            else:
                next_node.append(current_node-MAP_SIZE)
        if ((noteia>0 or far_south>0) and (anatolika>0 or far_east>0) and dytika<1 and far_west<1 ) or (get_abs(robot_x-southeast_edge_x)<300 and get_abs(robot_y-southeast_edge_y)<300):
            print("no")
            next_node.append(current_node-MAP_SIZE)
            next_node.append(current_node-1)
            path3=random.choice([2,1])
            if path3==2:
                next_node.append(current_node-1)
            elif path3==1:
                next_node.append(current_node-MAP_SIZE)
            path4=random.choice([2,1])
            if path4==2 and dytika>1 or far_west>1:
                next_node.append(current_node-MAP_SIZE)
                path4=1
            elif path4==2 and dytika<1:
                next_node.append(current_node-1)
               
            elif path4==1:
                next_node.append(current_node-MAP_SIZE) 
        if ((noteia>0 or far_south>0) and (anatolika<1 and far_east<1) and (dytika>0 or far_west>0)) or  (get_abs(robot_x-southwest_edge_x)<300 and get_abs(robot_y-southwest_edge_y)<300):
            print("no")
            next_node.append(current_node-MAP_SIZE) 
            path2=random.choice([3,1])
            if path2==3:
                next_node.append(current_node+1)
            elif path2==1:
                next_node.append(current_node-MAP_SIZE)
            next_node.append(current_node+1)
            path4=random.choice([3,1])
            if path4==3:
                next_node.append(current_node+1)
            elif path4==1:
                next_node.append(current_node-MAP_SIZE)
        if (dytika>0 or far_west>0) and noteia==0 and far_south==0 and boreia==0 and far_north==0 and anatolika==0:
            print("d")
            next_node.append(current_node-MAP_SIZE)
            path2=random.choice([1,4])
            if path2==4:
                next_node.append(current_node+MAP_SIZE)
            elif path2==1:
                next_node.append(current_node-MAP_SIZE)
            next_node.append(current_node+1)
            next_node.append(current_node+MAP_SIZE)
        if (anatolika>0 or far_east>0) and noteia==0 and far_south==0 and boreia==0 and far_north==0 and dytika==0:
            print("a")
            next_node.append(current_node-MAP_SIZE)
            next_node.append(current_node-1)
            path3=random.choice([1,4])
            if path3==4:
                next_node.append(current_node+MAP_SIZE)
            elif path3==1:
                next_node.append(current_node-MAP_SIZE)
            next_node.append(current_node+MAP_SIZE)
        if (boreia==0 and far_north==0) and (noteia==0 and far_south==0) and (anatolika==0 and far_east==0) and (dytika==0 and far_west==0):
            next_node.append(current_node-MAP_SIZE)
            next_node.append(current_node-1)
            next_node.append(current_node+1)
            next_node.append(current_node+MAP_SIZE)
        if (boreia==0 and far_north==0) and (noteia==0 and far_south==0) and (anatolika>0 or far_east>0) and (dytika>0 or far_west>0):
            
            next_node.append(current_node-MAP_SIZE)
            path2=random.choice([1,4])
            if path2==4:
                next_node.append(current_node+MAP_SIZE)
            elif path2==1:
                next_node.append(current_node-MAP_SIZE)
            
            path3=random.choice([4,1])
            if path3==4:
                next_node.append(current_node+MAP_SIZE)
            elif path3==1:
                next_node.append(current_node-MAP_SIZE)
            next_node.append(current_node+MAP_SIZE)
        if object_detected>0:
            appr_path=chosen_path
            print(appr_path)
            print(appr_path)
            print(appr_path)
            wait=1
            dialegw=1
            z=5
            print("side_s",side_s)
            print("side_n",side_n)
            print("side_e",side_e)
            print("side_w",side_w)
            
        if dialegw==0 and object_detected==0:
            counter=1
            print(path1)#south
            print(path2)
            print(path3)#north
            print(path4)
            ####edw eixe mpei to boreia notia       
            lucky=random.choice([1,2,3,4])
           
            ##1:north
            ##2:west
            ##3:east
            ##4:south
            
            
            ##initialiazation for path planning
            far_west=0
            far_east=0
            far_north=0
            far_south=0
            real_west=0
            real_east=0
            real_north=0
            real_south=0
        #SOUTH
           
            current_node=int(visited_nodes[-1])
            print(current_node)
            print(next_node)
            #print("visit",visited_nodes)
            print(len(choice)-1)
            for n in range(1,len(choice)+1):
                if len(next_node)>1 and n-1>=0:
                    print("next_node",next_node[n-1])
                    if next_node[n-1] in visited_nodes:
                        print("reeeeee ",n)
                        print(next_node[n-1])
                        choice.remove(n)
                    else:
                        print("gggggggggg")
                        #print("visit",visited_nodes)
           
            if nw_barrier==1 and sw_barrier==1 and ne_barrier==1 and se_barrier==1:
                print("THE WHOLE MAP WAS SCANNED")
                #sys.exit()
            if r1 +10<r2:
                 appr_path=medial_axis_approach
                 case1_done=1
                
                 
            elif len(choice)>0 and case1_done==0:
                
                lucky=random.choice(choice)
                if case1_done==1:
                    total_robot_x=0
                    total_robot_y=0
                    case1_done=0
            else:
                
                appr_path=3
            print("choice",choice)
            if lucky==1 and wait==0 and case1_done==0:
                appr_path=path1
            elif lucky==2 and wait==0 and case1_done==0:
                appr_path=path2
            elif lucky==3 and wait==0 and case1_done==0:
                appr_path=path3
            elif lucky==4 and wait==0 and case1_done==0 :
                appr_path=path4
            print(appr_path)
            print("rob-x",robot_x)
            print("rob_y",robot_y)
            count=0
            
                  
            ###BELOW IS GIVEN THE ORDEN TO CHANGE DIRECTION SINCE IT COVERED THE HALF MAP 
                            ####SO AS TO CHECK THE OTHER HALF##   
                            
            #downright,upright,upwest,downwest are variables to stop robot from goiong there again##
            ##wes east are variables to point out that robot should go to the other half##
         
            if wait==0:
                z=5
                ##use dijkstra path    
            wait=1
            dialegw=1
        
        print("unknown cells",unknown_cells)
        print(path1)#south
        print(path2)
        print(path3)#north
        print(path4)
        if z==5:
            print(appr_path)
            
            ##CASE 1
            #if r1 +10<r2:
            #   appr_path=medial_axis_approach
            #   case1_done=1
            #else:
                
            #   if case1_done==1:
            #       total_robot_x=0
            #       total_robot_y=0
            #       case1_done=0    
            ###GO WEST
            if appr_path==2:
                 rads=1.57
                 if moires<260 or moires>275:
                    print(moires) 
                    ###rotate until go west
                    ##the first time is always west
                
                    ##rotate until we have 175 degrees angle 
                    if moires>90 and moires<260:   
                        speed[0] = MAX_SPEED
                        speed[1] = -MAX_SPEED
                        leftMotor.setVelocity(speed[0])
                        rightMotor.setVelocity(speed[1])
                        print("eurguwilgt")
                    else:
                        speed[0] = -MAX_SPEED
                        speed[1] = +MAX_SPEED
                        leftMotor.setVelocity(speed[0])
                        rightMotor.setVelocity(speed[1])
                        print("eurguwilgt")
                 else:
                    print(moires) 
                    velocity_left=MAX_SPEED
                    velocity_right=-MAX_SPEED
                    while velocity_left>0 and velocity_right<0 and west==0:
                        leftMotor.setVelocity(0)
                        rightMotor.setVelocity(0)
                        velocity_left=leftMotor.getVelocity()
                        velocity_right=rightMotor.getVelocity()
                        print("sdiffererkg")
                    west=1
                    speed[0] = MAX_SPEED
                    speed[1] = MAX_SPEED
                    leftMotor.setVelocity(speed[0])
                    rightMotor.setVelocity(speed[1])
                    print("aaaaaaaa",velocity_left,velocity_right)
                   
                        
                    if total_robot_x<=-total_distance:
                        print("hahahah")
                        print("total_robot_x",total_robot_x)
                        color=display.setColor(0xFF0000)
                        line=display.drawLine(temporar_wn,int(sum(matrix_wn)/len(matrix_wn)),int(robot_x+total_robot_x*100),int(sum(matrix_wn)/len(matrix_wn)))
                        
                        for c in range(temporar_wn,int(robot_x+total_robot_x*100),-1):
                            Map[c][int(sum(matrix_wn)/len(matrix_wn))]=1 
                        for q in range(temporar_wn+1,int(robot_x+total_robot_x*100 +1),-1):
                            for o in range(int(robot_y+1),int(+1+sum(matrix_wn)/len(matrix_wn)),-1):
                                
                                Map[q][o]=0
                            
                                color=display.setColor(0x0000FF)
                                #rect=display.drawRectangle(q,o,1,1)
                                
                        del matrix_wn
                        matrix_wn=[]
                        color=display.setColor(0xFF0000)
                        line=display.drawLine(temporar_ws,int(sum(matrix_ws)/len(matrix_ws)),int(robot_x+total_robot_x*100),int(sum(matrix_ws)/len(matrix_ws)))
                        
                        for c in range(temporar_ws,int(robot_x+total_robot_x*100),-1):
                            Map[c][int(sum(matrix_ws)/len(matrix_ws))]=1
                        for q in range(temporar_ws+1,int(robot_x+total_robot_x*100 +1),-1):
                            for o in range(int(robot_y+1),int(-1+sum(matrix_ws)/len(matrix_ws)),1):
                                
                                Map[q][o]=0
                            
                                color=display.setColor(0x0000FF)
                                #rect=display.drawRectangle(q,o,1,1)
                        del matrix_ws
                        matrix_ws=[]  
                        z+=1
                        for i in range(int(total_distance*100)):
                            visited_nodes.append(visited_nodes[-1]-1)
                        first_time+=1
                        true_distance[7]=true_distance[7]-total_robot_x*100
                        
                        robot_x+=total_robot_x*100
                        robot_y+=total_robot_y*100
                        ##movement to respresent the local map in the global map
                        sum_total_x+=total_robot_x
                        sum_total_y+=total_robot_y
                        total_robot_x=0
                        total_robot_y=0
                        total_x=0
                        total_distance=4.0
                        if side_s>0 and so_visited==0 and variable==1:
                            object_detected=1
                            variable=0
                            far_west=0
                            far_east=0
                            far_north=0
                            far_south=0
                            so_visited=1
                            chosen_path=4
                            hide=0
                            first_entered_n=0
                            print("temp_east_x",temp_east_x)
                            print("temp_east_y",temp_east_y)
                            print("temp_west_x",temp_west_x)
                            print("temp_west_y",temp_west_y)
                            print("edge_east_x",edge_east_x)
                            print("edge_east_y",edge_east_y)
                            print("edge_west_x",edge_west_x)
                            print("edge_west_y",edge_west_y)
                            if side_s>0 and side_n>0 and side_w>0 and side_e>0:
                                object_detected=0
                                side_s=0
                                side_n=0
                                side_w=0
                                side_e=0
                                dialegw=1
                                wait=1
                                print("gggggggggggg")
                                wo_visited=0
                                so_visited=0
                                eo_visited=0
                                no_visited=0
                                point_edge=len(edge_west_y)-1
                                if edge_east_x[point_edge]<temp_east_x:
                                    edge_east_x[point_edge]=temp_east_x
                                    edge_east_x.append(0)
                                if edge_east_y[point_edge]<temp_east_y:
                                    edge_east_y[point_edge]=temp_east_y
                                    edge_east_y.append(0)
                                if edge_west_x[point_edge]>temp_west_x:
                                    edge_west_x[point_edge]=temp_west_x
                                    edge_west_x.append(2000)
                                if edge_west_y[point_edge]>temp_west_y:
                                    edge_west_y[point_edge]=temp_west_y
                                    edge_west_y.append(2000) 
                                print("edge_east_x",edge_east_x)
                                print("edge_east_y",edge_east_y)
                                print("edge_west_x",edge_west_x)
                                print("edge_west_y",edge_west_y)
                                for d in range(int(temp_west_x),int(temp_east_x)):
                                    for f in range (int(temp_west_y),int(temp_east_y)):
                                        Map[d][f]=1
                                        color=display.setColor(0xFF0000)
                                        rect=display.drawRectangle(d,f,1,1)
                        if side_n>0 and no_visited==0 and variable==1:
                            object_detected=1
                            variable=0
                            chosen_path=1
                            far_west=0
                            far_east=0
                            far_north=0
                            far_south=0
                            no_visited=1
                            hide=0
                            first_entered_s=0
                            print("variable",variable)
                            print("temp_east_x",temp_east_x)
                            print("temp_east_y",temp_east_y)
                            print("temp_west_x",temp_west_x)
                            print("temp_west_y",temp_west_y)
                            print("edge_east_x",edge_east_x)
                            print("edge_east_y",edge_east_y)
                            print("edge_west_x",edge_west_x)
                            print("edge_west_y",edge_west_y)
                            if side_s>0 and side_n>0 and side_w>0 and side_e>0:
                                object_detected=0
                                side_s=0
                                side_n=0
                                side_w=0
                                side_e=0
                                dialegw=1
                                wait=1
                                print("gggggggggggg")
                                wo_visited=0
                                so_visited=0
                                eo_visited=0
                                no_visited=0
                                point_edge=len(edge_west_y)-1
                                if edge_east_x[point_edge]<temp_east_x:
                                    edge_east_x[point_edge]=temp_east_x
                                    edge_east_x.append(0)
                                if edge_east_y[point_edge]<temp_east_y:
                                    edge_east_y[point_edge]=temp_east_y
                                    edge_east_y.append(0)
                                if edge_west_x[point_edge]>temp_west_x:
                                    edge_west_x[point_edge]=temp_west_x
                                    edge_west_x.append(2000)
                                if edge_west_y[point_edge]>temp_west_y:
                                    edge_west_y[point_edge]=temp_west_y
                                    edge_west_y.append(2000) 
                                print("edge_east_x",edge_east_x)
                                print("edge_east_y",edge_east_y)
                                print("edge_west_x",edge_west_x)
                                print("edge_west_y",edge_west_y)
                                for m in range(int(temp_west_x)-4,int(temp_east_x)+4,1):
                                    for n in range (int(temp_west_y)+4,int(temp_east_y)-4,-1):
                                        Post_Map_Occ[m][n]=1
                                        Post_Map_Empty[m][n]=0
                                        Prior_Map_Occ[m][n]=Post_Map_Occ[m][n]
                                        Prior_Map_Empty[m][n]=Post_Map_Empty[m][n]
                                        #print(Post_Map_Occ[m][n])
                                        color=display.setColor(0xFF0000)
                                        rect=display.drawRectangle(m,n,1,1) 
                                print("mpaaaam")
                               
                                #for l in range(MAP_SIZE):
                                #    for t in range(MAP_SIZE):
                                #        if Post_Map_Occ[l][t]>=0.99: #and [l,t] not in list_of_obs:
                                #            list_of_obs.append([l,t]) 
                                #            color=display.setColor(0xFFFF00)##yellow colour
                                #            rect=display.drawRectangle(l,t,1,1)
                                #            count_error_obstacles+=1 
                                               
                                 #       if Post_Map_Occ[l][t]==1 and l>150 and t>150 and l<410 and t<410:# and [l,t] not in list_obstacles:
                                 #           count_local_error_obstacles+=1 
                                             
                                #print("to topiko sfalma einai")
                                #
                                #print(count_local_error_obstacles)
                               # print(len(list_obstacles))
                                #print(count_local_error_obstacles)
                                #print("to geniko sfalma einai")
                                
                                #print(count_error_obstacles)
                                #print(len(list_of_obs))
                                #sys.exit()
                    else:
                        if r1 +10<r2:
                            r1-=robott_movement_x*100
                            r2+=robott_movement_x*100
                            print(r1)
                            print(r2)
                            robot_x+=robott_movement_x
                            robot_y+=robott_movement_y
                            print("robot_x",robot_x)
                            print("robot_y",robot_y)
                            true_distance[7]-=robott_movement_x*100
                            true_distance[0]+=robott_movement_x*100
                            print("true_distance[7]",true_distance[7])
                            print("true_distance[0]",true_distance[0])
                            case1_done=1
                        else:
                            case1_done=0
                            distance=0
                            total_distance=0
                        for h in range(300):
                            for g in range(300):
                                if robot_x+total_robot_x*100-g>60 and robot_y+total_robot_y*100-h>60 and robot_y+total_robot_y*100-h<MAP_SIZE-60 and (int(robot_y+total_robot_y*100-h)) not in barrier_y:
                                    if Post_Map_Occ[int(robot_x+total_robot_x*100-g)][int(robot_y+total_robot_y*100-h)]>0.85   and (int(robot_y+total_robot_y*100-h) not in barrier_y or int(robot_x+total_robot_x*100-g) not in barrier_x) :
                                        if int(robot_y+total_robot_y*100-h) in barrier_y:
                                            temporar=barrier_y.index(int(robot_y+total_robot_y*100-h))
                                            if  int(robot_x+total_robot_x*100-g)>barrier_x[temporar]:
                                                barrier_x[temporar]=int(robot_x+total_robot_x*100-g)
                                                x=0
                                        else:   
                                            barrier_x.append(int(robot_x+total_robot_x*100-g))
                                            barrier_y.append(int(robot_y+total_robot_y*100-h))
                                            sign_barriers=1
                                                    
                                                    
                        for h in range(300):
                            for g in range(300):
                                if robot_x+total_robot_x*100-g>60 and robot_y+total_robot_y*100+h<MAP_SIZE-60 and (int(robot_y+total_robot_y*100+h)) not in barrier_y:
                                    if Post_Map_Occ[int(robot_x+total_robot_x*100-g)][int(robot_y+total_robot_y*100+h)]>0.85  and (int(robot_y+total_robot_y*100+h) not in barrier_y or int(robot_x+total_robot_x*100-g) not in barrier_x) :
                                        if int(robot_y+total_robot_y*100+h) in barrier_y:
                                            temporar=barrier_y.index(int(robot_y+total_robot_y*100+h))
                                            if  int(robot_x+total_robot_x*100-g)>barrier_x[temporar]:
                                                barrier_x[temporar]=int(robot_x+total_robot_x*100-g)
                                                x=0
                                        else:   
                                            barrier_x.append(int(robot_x+total_robot_x*100-g))
                                            barrier_y.append(int(robot_y+total_robot_y*100+h))
                                            sign_barriers=1
                        m=len(barrier_y)-1
                        #print(m)
                        print(barrier_x)
                        print(barrier_y)
                        
                        for s in range(8):    
                            print(s)
                            
                            soValues.append(so[s].getValue())
                            meas_with_gauss_error=[]
                            for x in range(30):
                                distance_noise=add_gaussian_noise(getDistance(so[s]))
                                meas_with_gauss_error.append(distance_noise)
                            a=np.asarray(meas_with_gauss_error)
                            avg2=sum(meas_with_gauss_error)/30
                            print(avg2)
                            
                            #distance=getDistance(so[i])
                            #print(distance)
                            numsteps = 60
                    
                           
                            filter = KalmanFilterLinear(numpy.matrix([1]),numpy.matrix([0]),numpy.matrix([1]), numpy.matrix([avg2]),numpy.matrix([std**2]),numpy.matrix([0.00001]),numpy.matrix([std**2]))
                            
                            soValues.append(so[s].getValue())
                            sonar_measurement = Sonar_measurement(getDistance(so[s]),std)
                            
                            measuredsonar = []
                            truemeasure = []
                            kalman = []
                            
                            for y in range(numsteps):
                                measured = sonar_measurement.GetMeasurementWithNoise()
                                measuredsonar.append(measured)
                                truemeasure.append(sonar_measurement.GetMeasurement())
                                kalman.append(filter.GetCurrentState()[0,0])
                                filter.Step(numpy.matrix([0]),numpy.matrix([measured]))
                            #print(kalman)
                           
                            kalm_distance=kalman[-1]
                            del measuredsonar
                            del truemeasure
                            del kalman 
                            del meas_with_gauss_error  
                            del a    
                            if kalm_distance<4.8  and (s==0 or s==4 or s==7 ):
                                print("aktina ",s)
                                distance=kalm_distance
                                print("distance",distance)
                                tr_distance=getDistance(so[s])
                                print("tr_distance",tr_distance)
                                                
                                if  s==4:
                                    color=display.setColor(0xFF0000)
                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100-distance*100),int(robot_y+total_robot_y*100),1,1)
                                    
                                    print("west")
                                    print("total_robot_x",total_robot_x)
                                    far_west=1
                                    print(-distance*100+total_robot_x*100+true_distance[0])
                                    if get_abs(-distance*100+robott_movement_x*100+true_distance[0])<100:
                                        distance=(true_distance[0]/100)+robott_movement_x
                                        print("distance",distance)
                                        print("yeahhh")
                                    else:
                                        print("yea")
                                        
                                    if distance<shortest_distance:
                                        shortest_distance=distance
                                    if flag==0 and variable==0:
                                        total_distance=int(distance)
                                        flag=1
                                   
                                   
                                    for t in range(int(distance*100)):
                                        for y in range(22):
                                            if int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )<MAP_SIZE-1 and (side_w==0 or (side_w==1  and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))>max(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]-y*0.0174533)))
                                                jj=int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]-y*0.0174533))),int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) ),1,1)
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (22-y*0.0174533)/22)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (22-y*0.0174533)/22)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                        
                                                        
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                else:
                                                
                                                    continue
                                        for v in range(22):
                                            if int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )<MAP_SIZE-1 and (side_w==0 or (side_w==1  and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))>max(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]+v*0.0174533)))
                                                jj=int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100-t*(sin(rads+rangerads[4]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) ),1,1)
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (22-v*0.0174533)/22)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (22-v*0.0174533)/22)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                       
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                else:
                                                    continue  
                                if s==0:
                                    #color=display.setColor(0xFF0000)
                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100),int(robot_y+distance*100+total_robot_y*100),1,1)
                                    print("south")
                                    far_south+=1
                                    real_south+=1
                                    
                                    ##
                                    if get_abs(distance*100+robott_movement_y*100-true_distance[12])<100:
                                        distance=(true_distance[12]/100)-robott_movement_y
                                        print("distance",distance)
                                        print("yeahhh")
                                        if len(matrix_ws)==0:
                                            matrix_ws.append(int(get_abs(robot_y+total_robot_y*100+distance*100)))
                                        else:
                                            matrix_ws.append(int(get_abs(robot_y+total_robot_y*100+distance*100)))  
                                    else: 
                                        print("yea")
                                        if len(matrix_ws)==0:
                                            matrix_ws.append(int(get_abs(robot_y+total_robot_y*100+distance*100)))
                                        
                                        if int(get_abs(robot_y+total_robot_y*100-distance*100))-100>max(matrix_ws) and len(matrix_ws)>1:
                                            print(max(matrix_ws))
                                            print(int(get_abs(robot_y+total_robot_y*100-distance*100))-100)
                                           
                                            #color=display.setColor(0xFF0000)
                                            #line=display.drawLine(temporar_ws,int(sum(matrix_ws)/len(matrix_ws)),int(robot_x+total_robot_x*100),int(sum(matrix_ws)/len(matrix_ws)))
                                                
                                            for c in range(temporar_ws,int(robot_x+total_robot_x*100),-1):
                                                Map[c][int(sum(matrix_ws)/len(matrix_ws))]=1
                                            for q in range(temporar_ws+1,int(robot_x+total_robot_x*100 +1),-1):
                                                for o in range(int(robot_y+1),int(-1+sum(matrix_ws)/len(matrix_ws)),1):
                                                        
                                                   Map[q][o]=0
                                                    
                                                   color=display.setColor(0x0000FF)
                                                   #rect=display.drawRectangle(q,o,1,1)
                                            del matrix_ws
                                            matrix_ws=[int(get_abs(robot_y+total_robot_y*100+distance*100))]
                                            temporar_ws=int(robot_x+total_robot_x*100)
                                            print("dfdfdfdfdfdfdfd")
                                            true_distance[12]=int(distance*100) 
                                    ###
                                    ##
                                    if len(edge_west_y)==1 and (getDistance(so[0])<0.9 or (side_e==0 and side_w==0 and side_n==0 ))  and first_entered_s==0 and int(robot_x+total_robot_x*100)>50 and int(robot_y+distance*100+total_robot_y*100)<MAP_SIZE-50:
                                        side_s=1
                                        hide=0
                                        first_entered_n=1       
                                        if side_s>0 and hide==0:
                                            
                                            hide=1
                                            variable=1
                                            total_distance=round(get_abs(total_robot_x)+getDistance(so[4])/2,0)
                                            
                                            #if detected_n==0 or (detected_n==1 and robot_y+distance*100+total_robot_y*100 +20>temp_west_y):
                                            #    temp_west_x=int(robot_x+total_robot_x*100)
                                           #     temp_west_y=int(robot_y+distance*100+total_robot_y*100)
                                           #     print(" temp_west_x", temp_west_x)
                                           #     print(" temp_west_y", temp_west_y)
                                           #     detected_n=1
                                    elif len(edge_west_y)>1:
                                        for b in range(len(edge_west_y)-1):
                                            if int(robot_x+total_robot_x*100)>50 and int(robot_y+distance*100+total_robot_y*100)<MAP_SIZE-50 and (int(robot_x+total_robot_x*100)<(edge_west_x[b]-6) or int(robot_x+total_robot_x*100)>(edge_east_x[b]+6) or int(get_abs(robot_y+total_robot_y*100+distance*100))<(edge_west_y[b]-6) or int(get_abs(robot_y+total_robot_y*100+distance*100))>(edge_east_y[b]+6)):
                                                unique_ob+=1
                                                continue
                                        if unique_ob==len(edge_west_y)-1  and (getDistance(so[0])<0.9 or (side_e==0 and side_w==0 and side_n==0 )) and first_entered_s==0:
                                            side_s=1
                                            hide=0
                                            point_edge=b
                                            first_entered_n=1
                                            if side_s>0 and hide==0:
                                                
                                                hide=1
                                                variable=1
                                                total_distance=round(get_abs(total_robot_x)+getDistance(so[4])/2,0)
                                                #if detected_n==0 or (detected_n==1 and robot_y+distance*100+total_robot_y*100 +20>temp_west_y):
                                                #    temp_west_x=int(robot_x+total_robot_x*100)
                                                #    temp_west_y=int(robot_y+distance*100+total_robot_y*100)
                                               #     print(" temp_west_x", temp_west_x)
                                              #      print(" temp_west_y", temp_west_y)
                                               #     detected_n=1
                                        unique_ob=0
                                    print(int(robot_x+total_robot_x*100))
                                    print(int(robot_y+distance*100+total_robot_y*100))
                                    if int(robot_y+distance*100+total_robot_y*100)<=MAP_SIZE-1:
                                        Map[int(robot_x+total_robot_x*100)][int(robot_y+distance*100+total_robot_y*100)]=1
                                    #far_southwest
                                    if robot_x>=MAP_SIZE/2 and robot_y>=MAP_SIZE/2:
                                        far_southeast=1
                                    else:
                                        far_southwest=1
                                    print(int(robot_x+total_robot_x*100))
                                    print(int(robot_y+distance*100+total_robot_y*100))
                                    for t in range(int(distance*100)):
                                        for y in range(31):
                                            
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y+t*(cos(rads+rangerads[0]-y*0.0174533)) )>0 and int(robot_y+t*(cos(rads+rangerads[0]-y*0.0174533)) )<MAP_SIZE-1 and len(barrier_x)==0 or ((side_s==0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))>min(barrier_x)) or (side_s==1 and (int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) )<min(barrier_y) or int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))<min(barrier_x)) or (int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) )>max(barrier_y)+5 ) ) ):
                                                #color=display.setColor(0x00F0F0)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))
                                                jj=int(robot_y+t*(cos(rads+rangerads[0]-y*0.0174533)) )
                                                #if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))][int(robot_y+t*(cos(rads+rangerads[0]-y*0.0174533)) )]!=1:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))][int(robot_y+t*(cos(rads+rangerads[0]-y*0.0174533)) )]=0 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533))),int(robot_y+t*(cos(rads+rangerads[0]-y*0.0174533)) ),1,1)
                                                    #continue
                                                    #x=0 
                                                if ii>0 and ii<MAP_SIZE and jj<MAP_SIZE and jj>0:
                                                    if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                        meas_prob=((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                        Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                        Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                        
                                                        Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                        Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                        if Post_Map_Empty[ii][jj]>0.85:
                                                            color=display.setColor(0x0000FF)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                        elif Post_Map_Empty[ii][jj]>0.65:
                                                            color=display.setColor(0x00F0F0)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                    if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                        meas_prob=0.98*((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                        Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                        Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                        
                                                        Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                        Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                        if Post_Map_Occ[ii][jj]>0.85:
                                                            color=display.setColor(0xFF0000)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                        elif Post_Map_Occ[ii][jj]>0.65:
                                                            color=display.setColor(0xFF7000)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y+t*(cos(rads+rangerads[0]+v*0.0174533)) )>0 and int(robot_y+t*(cos(rads+rangerads[0]+v*0.0174533)) )<MAP_SIZE-1 and len(barrier_x)==0 or  ((side_s==0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))<min(barrier_x)) or (side_s==1 and (int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) )<min(barrier_y) or int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))<min(barrier_x)) or (int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) )>max(barrier_y)+5 ) )):
                                                color=display.setColor(0x00F0F0)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))
                                                jj=int(robot_y+t*(cos(rads+rangerads[0]+v*0.0174533)) )
                                                #if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))][int(robot_y+t*(cos(rads+rangerads[0]+v*0.0174533)) )]!=1:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))][int(robot_y+t*(cos(rads+rangerads[0]+v*0.0174533)) )]=0
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533))),int(robot_y+t*(cos(rads+rangerads[0]+v*0.0174533)) ),1,1) 
                                                    #continue
                                                    #x=0
                                                if ii>0 and ii<MAP_SIZE and jj<MAP_SIZE and jj>0:
                                                    if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                        meas_prob=((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                        Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                        Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                        
                                                        Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                        Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                        if Post_Map_Empty[ii][jj]>0.85:
                                                            color=display.setColor(0x0000FF)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                        elif Post_Map_Empty[ii][jj]>0.65:
                                                            color=display.setColor(0x00F0F0)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                    if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                        meas_prob=0.98*((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                        Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                        Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                        
                                                        Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                        Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                        if Post_Map_Occ[ii][jj]>0.85:
                                                            color=display.setColor(0xFF0000)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                        elif Post_Map_Occ[ii][jj]>0.65:
                                                            color=display.setColor(0xFF7000)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                        
                                if s==7:
                                    #color=display.setColor(0xFF0000)
                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100),int(get_abs(robot_y-distance*100+total_robot_y*100)),1,1)
                                    print("north")
                                    far_north+=1
                                    real_north+=1
                                     ###
                                    if int(robot_y+total_robot_y*100-distance*100)>70:
                                        barrier_x.append(int(robot_x+total_robot_x*100))
                                        barrier_y.append(int(robot_y+total_robot_y*100-distance*100))
                                    print(barrier_x)
                                    print(barrier_y)
                                    if get_abs(distance*100+robott_movement_y*100-true_distance[4])<100:
                                       
                                        if distance*100-true_distance[4]>0.3:
                                            true_distance[4]=distance*100
                                            
                                        else:
                                            distance=(true_distance[4]/100)-robott_movement_y
                                        print("distance",distance)
                                        print("yeahhh")
                                        if len(matrix_wn)==0:
                                            matrix_wn.append(int(get_abs(robot_y+total_robot_y*100-distance*100)))
                                        else:
                                            matrix_wn.append(int(get_abs(robot_y+total_robot_y*100-distance*100)))  
                                    else: 
                                        print("yea")
                                        if len(matrix_wn)==0:
                                            matrix_wn.append(int(get_abs(robot_y+total_robot_y*100-distance*100)))        
                                        print(int(get_abs(robot_y+total_robot_y*100-distance*100))-100)
                                        print(max(matrix_wn))
                                        if int(get_abs(robot_y+total_robot_y*100-distance*100))+100<min(matrix_wn) or int(get_abs(robot_y+total_robot_y*100-distance*100))+100>max(matrix_wn) and len(matrix_wn)>1:
                                            print(max(matrix_wn))
                                            print(int(get_abs(robot_y+total_robot_y*100-distance*100))-100)
                                           
                                            color=display.setColor(0xFF0000)
                                            line=display.drawLine(temporar_wn,int(sum(matrix_wn)/len(matrix_wn)),int(robot_x+total_robot_x*100),int(sum(matrix_wn)/len(matrix_wn)))
                                            
                                            for c in range(temporar_wn,int(robot_x+total_robot_x*100),-1):
                                                Map[c][int(sum(matrix_wn)/len(matrix_wn))]=1 
                                            for q in range(temporar_wn+1,int(robot_x+total_robot_x*100 +1),-1):
                                                for o in range(int(robot_y+1),int(+1+sum(matrix_wn)/len(matrix_wn)),-1):
                                                    
                                                    #Map[q][o]=0
                                                
                                                    color=display.setColor(0x0000FF)
                                                    #rect=display.drawRectangle(q,o,1,1)
                                
                                            del matrix_wn
                                            matrix_wn=[int(get_abs(robot_y+total_robot_y*100-distance*100))]
                                            temporar_wn=int(robot_x+total_robot_x*100)
                                            print("dfdfdfdfdfdfdfd")
                                            true_distance[4]=int(distance*100) 
                                    ###
                                   
                                    if len(edge_west_y)==1  and (getDistance(so[7])<1.3 or (side_e==0 and side_w==0 and side_s==0)) and first_entered_n==0 and int(robot_x+total_robot_x*100)>50 and int(robot_y-distance*100+total_robot_y*100)>50:
                                        side_n=1
                                        hide=0
                                        first_entered_s=1 
                                        distance_detected=getDistance(so[7])       
                                        if side_n>0 and hide==0:
                                           
                                            hide=1
                                            variable=1
                                            total_distance=round(get_abs(total_robot_x)+getDistance(so[4])/2,0)
                                            if detected_n==0 or (detected_n==1 and robot_y-distance*100+total_robot_y*100 +20>temp_west_y):
                                                #temp_west_x=int(robot_x+total_robot_x*100)
                                                temp_west_y=int(sum(matrix_wn)/len(matrix_wn))
                                                #print(" temp_west_x", temp_west_x)
                                                print(" temp_west_y", temp_west_y)
                                                detected_n=1
                                    elif len(edge_west_y)>1:
                                        for b in range(len(edge_west_y)-1):
                                            if int(robot_x+total_robot_x*100)>50 and int(robot_y-distance*100+total_robot_y*100)>50 and (int(robot_x+total_robot_x*100)<(edge_west_x[b]-6) or int(robot_x+total_robot_x*100)>(edge_east_x[b]+6) or int(get_abs(robot_y+total_robot_y*100-distance*100))<(edge_west_y[b]-6) or int(get_abs(robot_y+total_robot_y*100-distance*100))>(edge_east_y[b]+6)):
                                                unique_ob+=1
                                                continue
                                        if unique_ob==len(edge_west_y)-1 and (getDistance(so[7])<0.9 or (side_e==0 and side_w==0  and side_s==0))  and first_entered_n==0:
                                            side_n=1
                                            hide=0
                                            point_edge=b
                                            first_entered_s=1
                                            distance_detected=getDistance(so[7])
                                            if side_n>0 and hide==0:
                                                
                                                hide=1
                                                variable=1
                                                total_distance=round(get_abs(total_robot_x)+getDistance(so[4])/2,0)
                                                if detected_n==0 or (detected_n==1 and robot_y+distance*100+total_robot_y*100 +20>temp_west_y):
                                                    #temp_west_x=int(robot_x+total_robot_x*100)
                                                    temp_west_y=int(sum(matrix_wn)/len(matrix_wn))
                                                    #print(" temp_west_x", temp_west_x)
                                                    print(" temp_west_y", temp_west_y)
                                                    detected_n=1
                                        unique_ob=0
                                    if robot_x>=MAP_SIZE/2 and robot_y<=MAP_SIZE/2:
                                        far_northeast=1
                                    else:
                                        far_northwest=1  
                                    
                                    
                                    for t in range(int(distance*100)):
                                        for y in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) )>0 and int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) )<MAP_SIZE-1 and len(barrier_x)==0:
                                                ii=int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))
                                                jj=int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) ) 
                                            if int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) )>0 and int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) )<MAP_SIZE-1 and len(barrier_x)>0 and  ((side_n==0 and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))<min(barrier_x)) or (side_n==1 and (int(robot_y+total_robot_y*100-t*(cos(-rads+rangerads[8]-y*0.0174533)) )>max(barrier_y) or (getDistance(so[7])<0.5+distance_detected and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))<min(barrier_x))))): 
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))
                                                jj=int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))][int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) )]!=0:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533)))][int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533))),int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) ),1,1)
                                                    x=0
                                            if  ii==int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]-y*0.0174533))) and jj==int(robot_y-t*(cos(-rads+rangerads[8]-y*0.0174533)) ):
                                                
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) )>0 and int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) )<MAP_SIZE-1 and len(barrier_x)==0:
                                                ii=int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))
                                                jj=int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) )
                                            if int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) )>0 and int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) )<MAP_SIZE-1 and len(barrier_x)>0 and ((side_n==0 and int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))<min(barrier_x)) or (side_n==1 and (int(robot_y+total_robot_y*100-t*(cos(-rads+rangerads[8]+v*0.0174533)) )>max(barrier_y) or (getDistance(so[7])<0.5+distance_detected and  int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))<min(barrier_x))))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))
                                                jj=int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))][int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) )]!=0:
                                                   # Map[int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))][int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533))),int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) ),1,1)
                                                    x=0
                                            if ii==int(robot_x+total_robot_x*100+t*(sin(-rads+rangerads[8]+v*0.0174533)))  and jj==int(robot_y-t*(cos(-rads+rangerads[8]+v*0.0174533)) ): 
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
     
             ###GO EAST
            
            
            elif appr_path==3:
                    ##rotate until go east
                rads=1.57
                if moires<84 or moires>95:
                    print(moires)        
                    if moires>275 or moires<84:
                        
                        speed[0] = MAX_SPEED
                        speed[1] = -MAX_SPEED
                        leftMotor.setVelocity(speed[0])
                        rightMotor.setVelocity(speed[1])
                        print("eurguwilgt")
                    else:
                        speed[0] = -MAX_SPEED
                        speed[1] = +MAX_SPEED
                        leftMotor.setVelocity(speed[0])
                        rightMotor.setVelocity(speed[1])
                        print("eurguwilgt")
                else:
                    print(moires)
                    velocity_left=MAX_SPEED
                    velocity_right=-MAX_SPEED
                    while velocity_left>0 and velocity_right<0 and east==0:
                    
                        leftMotor.setVelocity(0)
                        rightMotor.setVelocity(0)
                        velocity_left=leftMotor.getVelocity()
                        velocity_right=rightMotor.getVelocity()
                        print("sdiffererkg")
                    east=1
                    speed[0] = MAX_SPEED
                    speed[1] = MAX_SPEED
                    leftMotor.setVelocity(speed[0])
                    rightMotor.setVelocity(speed[1])
                    print("aaaaaaaa",velocity_left,velocity_right)
                    if total_robot_x>=total_distance:
                        print("hahahah")
                        print("total_robot_x",total_robot_x)
                        print("giatiiii")
                        color=display.setColor(0xFF0000)
                        line=display.drawLine(temporar_en,int(sum(matrix_en)/len(matrix_en)),int(robot_x+total_robot_x*100),int(sum(matrix_en)/len(matrix_en)))
                        
                        for c in range(temporar_en,int(robot_x+total_robot_x*100),1):
                            #Map[c][int(sum(matrix_en)/len(matrix_en))]=1 
                            x=0
                        for q in range(temporar_en+1,int(robot_x+total_robot_x*100 +1),1):
                            for o in range(int(robot_y+1),int(+1+sum(matrix_en)/len(matrix_en)),-1):
                                
                                #Map[q][o]=0
                            
                                color=display.setColor(0x0000FF)
                                #rect=display.drawRectangle(q,o,1,1)
                                
                        del matrix_en
                        matrix_en=[]
                        color=display.setColor(0xFF0000)
                        line=display.drawLine(temporar_es,int(sum(matrix_es)/len(matrix_es)),int(robot_x+total_robot_x*100),int(sum(matrix_es)/len(matrix_es)))
                        
                        for c in range(temporar_es,int(robot_x+total_robot_x*100),1):
                            #Map[c][int(sum(matrix_es)/len(matrix_es))]=1
                            x=0
                        for q in range(temporar_es+1,int(robot_x+total_robot_x*100 +1),1):
                            for o in range(int(robot_y+1),int(-1+sum(matrix_es)/len(matrix_es)),1):
                                
                                #Map[q][o]=0
                            
                                color=display.setColor(0x0000FF)
                                #rect=display.drawRectangle(q,o,1,1)
                        del matrix_es
                        matrix_es=[]
                        z+=1
                        for i in range(int(total_distance*100)):
                            visited_nodes.append(visited_nodes[-1]+1)
                        first_time+=1
                        true_distance[0]=true_distance[0]+total_robot_x*100
                        true_distance[7]=true_distance[7]-total_robot_x*100
                        robot_x+=total_robot_x*100
                        robot_y+=total_robot_y*100
                    ##movement to respresent the local map in the global map
                        sum_total_x+=total_robot_x
                        sum_total_y+=total_robot_y
                        total_robot_x=0
                        total_robot_y=0
                        total_x=0
                        total_distance=2.0
                        if side_n>0 and no_visited==0 and variable==1:
                            chosen_path=1
                            object_detected=1
                            variable=0
                            far_west=0
                            far_east=0
                            far_north=0
                            far_south=0
                            no_visited=1
                            first_entered_s=0
                            hide=0
                            #temp_east_x=robot_x
                            #temp_east_y=robot_y
                            print("temp_east_x",temp_east_x)
                            print("temp_east_y",temp_east_y)
                            print("temp_west_x",temp_west_x)
                            print("temp_west_y",temp_west_y)
                            print("edge_east_x",edge_east_x)
                            print("edge_east_y",edge_east_y)
                            print("edge_west_x",edge_west_x)
                            print("edge_west_y",edge_west_y)
                            if side_s>0 and side_n>0 and side_w>0 and side_e>0:
                                object_detected=0
                                side_s=0
                                side_n=0
                                side_w=0
                                side_e=0
                                dialegw=1
                                wait=1
                                print("gggggggggggg")
                                wo_visited=0
                                so_visited=0
                                eo_visited=0
                                no_visited=0
                                point_edge=len(edge_west_y)-1
                                if edge_east_x[point_edge]<temp_east_x:
                                    edge_east_x[point_edge]=temp_east_x
                                    edge_east_x.append(0)
                                if edge_east_y[point_edge]<temp_east_y:
                                    edge_east_y[point_edge]=temp_east_y
                                    edge_east_y.append(0)
                                if edge_west_x[point_edge]>temp_west_x:
                                    edge_west_x[point_edge]=temp_west_x
                                    edge_west_x.append(2000)
                                if edge_west_y[point_edge]>temp_west_y:
                                    edge_west_y[point_edge]=temp_west_y
                                    edge_west_y.append(2000) 
                                print("edge_east_x",edge_east_x)
                                print("edge_east_y",edge_east_y)
                                print("edge_west_x",edge_west_x)
                                print("edge_west_y",edge_west_y)
                                for d in range(int(temp_west_x),int(temp_east_x)):
                                    for f in range (int(temp_west_y),int(temp_east_y)):
                                        #Map[d][f]=1
                                        color=display.setColor(0xFF0000)
                                        rect=display.drawRectangle(d,f,1,1)  
                        if side_s>0 and so_visited==0 and variable==1:
                            chosen_path=4
                            object_detected=1
                            variable=0
                            far_west=0
                            far_east=0
                            far_north=0
                            far_south=0
                            so_visited=1
                            first_entered_n=0
                            hide=0
                            print("temp_east_x",temp_east_x)
                            print("temp_east_y",temp_east_y)
                            print("temp_west_x",temp_west_x)
                            print("temp_west_y",temp_west_y)
                            print("edge_east_x",edge_east_x)
                            print("edge_east_y",edge_east_y)
                            print("edge_west_x",edge_west_x)
                            print("edge_west_y",edge_west_y)
                            if side_s>0 and side_n>0 and side_w>0 and side_e>0:
                                object_detected=0
                                side_s=0
                                side_n=0
                                side_w=0
                                side_e=0
                                dialegw=1
                                wait=1
                                print("gggggggggggg")
                                wo_visited=0
                                so_visited=0
                                eo_visited=0
                                no_visited=0
                                point_edge=len(edge_west_y)-1
                                if edge_east_x[point_edge]<temp_east_x:
                                    edge_east_x[point_edge]=temp_east_x
                                    edge_east_x.append(0)
                                if edge_east_y[point_edge]<temp_east_y:
                                    edge_east_y[point_edge]=temp_east_y
                                    edge_east_y.append(0)
                                if edge_west_x[point_edge]>temp_west_x:
                                    edge_west_x[point_edge]=temp_west_x
                                    edge_west_x.append(2000)
                                if edge_west_y[point_edge]>temp_west_y:
                                    edge_west_y[point_edge]=temp_west_y
                                    edge_west_y.append(2000) 
                                print("edge_east_x",edge_east_x)
                                print("edge_east_y",edge_east_y)
                                print("edge_west_x",edge_west_x)
                                print("edge_west_y",edge_west_y)
                                for d in range(int(temp_west_x),int(temp_east_x)):
                                    for f in range (int(temp_west_y),int(temp_east_y)):
                                        #Map[d][f]=1
                                        color=display.setColor(0xFF0000)
                                        rect=display.drawRectangle(d,f,1,1)  
                    else:
                         for h in range(200):
                             for g in range(200):
                                 if robot_x+total_robot_x*100+g<MAP_SIZE-50 and robot_y+total_robot_y*100-h>50 and (int(robot_y+total_robot_y*100-h)) not in barrier_y:
                                    if Post_Map_Occ[int(robot_x+total_robot_x*100+g)][int(robot_y+total_robot_y*100-h)]>0.85:
                                         barrier_x.append(int(robot_x+total_robot_x*100+g))
                                         barrier_y.append(int(robot_y+total_robot_y*100-h))
                                         sign_barriers=1
                                                    
                         for h in range(200):
                             for g in range(200):
                                 if robot_x+total_robot_x*100+g<MAP_SIZE-50 and robot_y+total_robot_y*100+h<MAP_SIZE-50 and robot_y+total_robot_y*100+h>50 and (int(robot_y+total_robot_y*100+h)) not in barrier_y:
                                     if Post_Map_Occ[int(robot_x+total_robot_x*100+g)][int(robot_y+total_robot_y*100+h)]>0.85:
                                         barrier_x.append(int(robot_x+total_robot_x*100+g))
                                         barrier_y.append(int(robot_y+total_robot_y*100+h))
                                         sign_barriers=1
                         m=len(barrier_y)-1
                        #print(m)
                         print(barrier_x)
                         print(barrier_y)
                         for s in range(8):    
                            print(s)
                            
                            soValues.append(so[s].getValue())
                            meas_with_gauss_error=[]
                            for x in range(30):
                                distance_noise=add_gaussian_noise(getDistance(so[s]))
                                meas_with_gauss_error.append(distance_noise)
                            a=np.asarray(meas_with_gauss_error)
                            avg2=sum(meas_with_gauss_error)/30
                            print(avg2)
                            
                            #distance=getDistance(so[i])
                            #print(distance)
                            numsteps = 60
                    
                           
                            filter = KalmanFilterLinear(numpy.matrix([1]),numpy.matrix([0]),numpy.matrix([1]), numpy.matrix([avg2]),numpy.matrix([std**2]),numpy.matrix([0.00001]),numpy.matrix([std**2]))
                            
                            soValues.append(so[s].getValue())
                            sonar_measurement = Sonar_measurement(getDistance(so[s]),std)
                            
                            measuredsonar = []
                            truemeasure = []
                            kalman = []
                            
                            for y in range(numsteps):
                                measured = sonar_measurement.GetMeasurementWithNoise()
                                measuredsonar.append(measured)
                                truemeasure.append(sonar_measurement.GetMeasurement())
                                kalman.append(filter.GetCurrentState()[0,0])
                                filter.Step(numpy.matrix([0]),numpy.matrix([measured]))
                            #print(kalman)
                           
                            kalm_distance=kalman[-1]
                            del measuredsonar
                            del truemeasure
                            del kalman 
                            del meas_with_gauss_error  
                            del a    
                            if kalm_distance<4.5  and (s==0 or s==4 or s==7 ):
                                print("aktina ",s)
                                distance=kalm_distance
                                print("distance",distance)
                                tr_distance=getDistance(so[s])
                                print("tr_distance",tr_distance)
                                                
                                if getDistance(so[3])<0.5 and getDistance(so[0])<0.5:
                                    total_distance=0
                                    print("fail")
                                    continue
                            
                                if s==4 :
                                    color=display.setColor(0xFF0000)
                                    #rect=display.drawRectangle(int(robot_x+distance*100+total_robot_x*100),int(robot_y),1,1)
                                    print("anatolika")
                                    far_east+=1
                                    anatolika+=1
                                    print(+distance*100+robott_movement_x*100-true_distance[7])
                                    if get_abs(+distance*100+robott_movement_x*100-true_distance[7])<100:
                                        distance=(true_distance[7]/100)-robott_movement_x
                                        print("distance",distance)
                                        print("yeahhh")
                                    else:
                                        print("yea")
                                    if int(robot_x+distance*100+total_robot_x*100)<=MAP_SIZE-1:
                                    
                                        Map[int(robot_x+distance*100+total_robot_x*100)][int(robot_y)]=1
                                    if distance<shortest_distance:
                                        shortest_distance=distance
                                    if flag==0 and variable==0:
                                        total_distance=int(distance)
                                        flag=1 
                                    
                                    for t in range(int(distance*100)):
                                        for y in range(22):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )<MAP_SIZE-1 and (side_e==0 or (side_e==1  and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]-y*0.0174533)))<min(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]-y*0.0174533)))
                                                jj=int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]-y*0.0174533))),int(robot_y-t*(cos(rads+rangerads[4]-y*0.0174533)) ),1,1)
                                                    
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (22-y*0.0174533)/22)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (22-y*0.0174533)/22)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(22):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )<MAP_SIZE-1 and (side_e==0 or (side_e==1  and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]+v*0.0174533)))<min(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]+v*0.0174533)))
                                                jj=int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(rads+rangerads[4]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[4]+v*0.0174533)) ),1,1)
                                                    
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (22-v*0.0174533)/22)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (22-v*0.0174533)/22)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj] 
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                if s==0:
                                    color=display.setColor(0xFF0000)
                                    
                                    rect=display.drawRectangle(int(robot_x+total_robot_x*100),int(get_abs(robot_y+total_robot_y*100-distance*100)),1,1)
                                    print("boreia")
                                    print("b")
                                    print(int(robot_x+total_robot_x*100))
                                    print(robot_y+total_robot_y*100-distance*100)
                                    Map[int(robot_x+total_robot_x*100)][int(get_abs(robot_y+total_robot_y*100-distance*100))]=1
                                    far_north+=1
                                    real_north+=1
                                    if int(robot_y+total_robot_y*100-distance*100)>70:
                                        barrier_x.append(int(robot_x+total_robot_x*100))
                                        barrier_y.append(int(robot_y+total_robot_y*100-distance*100))
                                    print(barrier_x)
                                    print(barrier_y)
                                    ###
                                    print(true_distance[4])
                                    print(get_abs(distance*100+robott_movement_y*100-true_distance[4]))
                                    if get_abs(distance*100+robott_movement_y*100-true_distance[4])<160:
                                        distance=(true_distance[4]/100)-robott_movement_y
                                        print("distance",distance)
                                        print("yeahhh")
                                        if len(matrix_en)==0:
                                            matrix_en.append(int(get_abs(robot_y+total_robot_y*100-distance*100)))
                                        else:
                                            matrix_en.append(int(get_abs(robot_y+total_robot_y*100-distance*100)))  
                                    else: 
                                        print("yea")
                                        print(int(get_abs(robot_y+total_robot_y*100-distance*100))-100)
                                        print(max(matrix_en))
                                        if int(get_abs(robot_y+total_robot_y*100-distance*100))+100<min(matrix_en) or int(get_abs(robot_y+total_robot_y*100-distance*100))+100>max(matrix_en):
                                            print(max(matrix_en))
                                            print(int(get_abs(robot_y+total_robot_y*100-distance*100))-100)
                                           
                                            color=display.setColor(0xFF0000)
                                            line=display.drawLine(temporar_en,int(sum(matrix_en)/len(matrix_en)),int(robot_x+total_robot_x*100),int(sum(matrix_en)/len(matrix_en)))
                                            
                                            for c in range(temporar_en,int(robot_x+total_robot_x*100),1):
                                                Map[c][int(sum(matrix_en)/len(matrix_en))]=1 
                                            for q in range(temporar_en+1,int(robot_x+total_robot_x*100 +1),1):
                                                for o in range(int(robot_y+1),int(+1+sum(matrix_en)/len(matrix_en)),-1):
                                                    
                                                    Map[q][o]=0
                                                
                                                    color=display.setColor(0x0000FF)
                                                    #rect=display.drawRectangle(q,o,1,1)
                                
                                            del matrix_en
                                            matrix_en=[int(get_abs(robot_y+total_robot_y*100-distance*100))]
                                            temporar_en=int(robot_x+total_robot_x*100)
                                            print("dfdfdfdfdfdfdfd")
                                            true_distance[4]=int(distance*100) 
                                    ###
                                    if len(edge_west_y)==1 and (getDistance(so[0])<0.9 or (side_e==0 and side_w==0 and side_s==0))  and first_entered_n==0 and int(robot_x+total_robot_x*100)<MAP_SIZE-50 and int(get_abs(robot_y+total_robot_y*100-distance*100))>50:
                                        side_n=1
                                        hide=0
                                        first_entered_s=1
                                        if side_n>0 and hide==0 and getDistance(so[4])>1.3:
                                            
                                            hide=1
                                            variable=1
                                            total_distance=round(total_robot_x+getDistance(so[4])/2,0)
                                           # if detected_s==0 or (detected_s==1 and robot_y-distance*100+total_robot_y*100 +20>temp_east_y):
                                           #     temp_east_x=int(robot_x+total_robot_x*100)
                                          #      temp_east_y=int(robot_y-distance*100+total_robot_y*100)
                                          #      print(" temp_east_x", temp_east_x)
                                         #       print(" temp_east_y", temp_east_y)
                                           #     detected_s=1
                                           
                                    elif len(edge_west_y)>1:
                                        for b in range(len(edge_west_y)-1):
                                            if int(robot_x+total_robot_x*100)<MAP_SIZE-50 and int(get_abs(robot_y+total_robot_y*100-distance*100))>50 and (int(robot_x+total_robot_x*100)<(edge_west_x[b]-6) or int(robot_x+total_robot_x*100)>(edge_east_x[b]+6) or int(get_abs(robot_y+total_robot_y*100-distance*100))<(edge_west_y[b]-6) or int(get_abs(robot_y+total_robot_y*100-distance*100))>(edge_east_y[b]+6)):
                                                unique_ob+=1
                                                continue
                                        if unique_ob==len(edge_west_y)-1 and (getDistance(so[0])<0.9 or (side_e==0 and side_w==0  and side_s==0)) and first_entered_n==0:
                                            side_n=1
                                            hide=0
                                            point_edge=b
                                            first_entered_s=1
                                            if side_n>0 and hide==0:
                                               
                                                hide=1
                                                variable=1
                                                total_distance=round(total_robot_x+getDistance(so[4])/2,0)
                                              #  if detected_s==0 or (detected_s==1 and robot_y-distance*100+total_robot_y*100 +20>temp_east_y):
                                              #      temp_east_x=int(robot_x+total_robot_x*100)
                                              #      temp_east_y=int(robot_y-distance*100+total_robot_y*100)
                                              #      print(" temp_east_x", temp_east_x)
                                              #      print(" temp_east_y", temp_east_y)
                                               #     detected_s=1
                                           
                                        unique_ob=0
                                    if robot_x>=MAP_SIZE/2 and robot_y<=MAP_SIZE/2:
                                        far_northeast=1
                                    else:
                                        far_northwest=1 
                                    
                                    for t in range(int(distance*100)):
                                        for y in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[0]-y*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[0]-y*0.0174533)) )<MAP_SIZE-1 and ((side_n==0  and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))<min(barrier_x)) or (side_n==1 and int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) )>max(barrier_y) or int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))>max(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))
                                                jj=int(robot_y-t*(cos(rads+rangerads[0]-y*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[0]-y*0.0174533)) )]!=0:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[0]-y*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533))),int(robot_y-t*(cos(rads+rangerads[0]-y*0.0174533)) ),1,1)
                                                    x=0
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[0]+v*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[0]+v*0.0174533)) )<MAP_SIZE-1 and ((side_n==0  and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))<min(barrier_x)) or (side_n==1 and int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) )>max(barrier_y) or int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))>max(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))
                                                jj=int(robot_y-t*(cos(rads+rangerads[0]+v*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[0]+v*0.0174533)) )]!=0:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[0]+v*0.0174533)) )]=1
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[0]+v*0.0174533)) ),1,1) 
                                               
                                                    x=0
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    
                                if s==7:
                                    color=display.setColor(0xFF0000)
                                    
                                    rect=display.drawRectangle(int(robot_x+total_robot_x*100),int(robot_y+total_robot_y*100+distance*100),1,1)
                                    print("notia")
                                    print("n")
                                    if int(robot_y+total_robot_y*100+distance*100)<MAP_SIZE-70:
                                        barrier_x.append(int(robot_x+total_robot_x*100))
                                        barrier_y.append(int(robot_y+total_robot_y*100+distance*100))
                                    print(barrier_x)
                                    print(barrier_y)
                                    #print(int(robot_x+total_robot_x*5))
                                    #print(robot_y+total_robot_y*5+distance*5)
                                    if int(robot_y+total_robot_y*100+distance*100)<=MAP_SIZE-1:
                                        Map[int(robot_x+total_robot_x*100)][int(robot_y+total_robot_y*100+distance*100)]=1
                                    far_south+=1
                                    real_south+=1
                                    ##
                                    print(true_distance[12])
                                    if get_abs(distance*100+robott_movement_y*100-true_distance[12])<100:
                                        distance=(true_distance[12]/100)-robott_movement_y
                                        print("distance",distance)
                                        print("yeahhh")
                                        if len(matrix_es)==0:
                                            matrix_es.append(int(get_abs(robot_y+total_robot_y*100+distance*100)))
                                        else:
                                            matrix_es.append(int(get_abs(robot_y+total_robot_y*100+distance*100)))  
                                    else: 
                                        print("yea")
                                        print(max(matrix_es))
                                        print(int(get_abs(robot_y+total_robot_y*100+distance*100))-100)
                                        if int(get_abs(robot_y+total_robot_y*100+distance*100))-100>max(matrix_es) or int(get_abs(robot_y+total_robot_y*100+distance*100))-100<min(matrix_es):
                                            
                                            color=display.setColor(0xFF0000)
                                            line=display.drawLine(temporar_es,int(sum(matrix_es)/len(matrix_es)),int(robot_x+total_robot_x*100),int(sum(matrix_es)/len(matrix_es)))
                                            print("AVERAGE",int(sum(matrix_es)/len(matrix_es)))    
                                            for c in range(temporar_es,int(robot_x+total_robot_x*100),1):
                                                Map[c][int(sum(matrix_es)/len(matrix_es))]=1
                                            for q in range(temporar_es+1,int(robot_x+total_robot_x*100 +1),1):
                                                for o in range(int(robot_y+1),int(-1+sum(matrix_es)/len(matrix_es)),1):
                                                        
                                                   Map[q][o]=0
                                                    
                                                   color=display.setColor(0x0000FF)
                                                   #rect=display.drawRectangle(q,o,1,1)
                                            del matrix_es
                                            matrix_es=[int(get_abs(robot_y+total_robot_y*100+distance*100))]
                                            temporar_es=int(robot_x+total_robot_x*100)
                                            print("dfdfdfdfdfdfdfd")
                                            true_distance[12]=int(distance*100) 
                                    ###
                                    ##
                                    if len(edge_west_y)==1 and (getDistance(so[7])<1.2 or (side_e==0 and side_w==0 and side_n==0 )) and first_entered_s==0 and int(robot_x+total_robot_x*100)<MAP_SIZE-50 and int(get_abs(robot_y+total_robot_y*100+distance*100))<MAP_SIZE-50:
                                        side_s=1
                                        hide=0
                                        first_entered_n=1
                                        ###distance whick detects the object
                                        distance_detected=getDistance(so[7])        
                                        if side_s>0 and hide==0:
                                            
                                            hide=1
                                            variable=1
                                            total_distance=round(total_robot_x+getDistance(so[4])/2,1)
                                            print("total_distance",total_distance)
                                            print("total_robot_x",total_robot_x)
                                            if detected_s==0 or (detected_s==1 and robot_y-distance*100+total_robot_y*100 +20>temp_east_y):
                                                #temp_east_x=int(robot_x+total_robot_x*100)
                                                temp_east_y=int(sum(matrix_es)/len(matrix_es))
                                                #print(" temp_east_x", temp_east_x)
                                                print(" temp_east_y", temp_east_y)
                                                detected_s=1
                                           
                                    elif len(edge_west_y)>1:
                                        for b in range(len(edge_west_y)-1):
                                            if int(robot_x+total_robot_x*100)<MAP_SIZE-50 and int(get_abs(robot_y+total_robot_y*100+distance*100))<MAP_SIZE-50 and (int(robot_x+total_robot_x*100)<(edge_west_x[b]-6) or int(robot_x+total_robot_x*100)>(edge_east_x[b]+6) or int(robot_y+total_robot_y*100+distance*100)<(edge_west_y[b]-6) or int(robot_y+total_robot_y*100+distance*100)>(edge_east_y[b]+6)):
                                                unique_ob+=1
                                                continue
                                        if unique_ob==len(edge_west_y)-1 and (getDistance(so[7])<1.2 or (side_e==0 and side_w==0 and side_n==0 )) and first_entered_s==0:
                                            side_s=1
                                            hide=0
                                            distance_detected=getDistance(so[7]) 
                                            point_edge=b
                                            first_entered_n=1
                                            if side_s>0 and hide==0:
                                                
                                                hide=1
                                                variable=1
                                                total_distance=round(total_robot_x+getDistance(so[4])/2,1)
                                                print("total_distance",total_distance)
                                                print("total_robot_x",total_robot_x)
                                                if detected_s==0 or (detected_s==1 and robot_y-distance*100+total_robot_y*100 +20>temp_east_y):
                                                    #temp_east_x=int(robot_x+total_robot_x*100)
                                                    temp_east_y=int(sum(matrix_es)/len(matrix_es))
                                                    #print(" temp_east_x", temp_east_x)
                                                    print(" temp_east_y", temp_east_y)
                                                    detected_s=1
                                        unique_ob=0
                                    if robot_x>=MAP_SIZE/2 and robot_y>=MAP_SIZE/2:
                                        far_southeast=1
                                    else:
                                        far_southwest=1 
                                    
                                    
                                    print("robot_x",robot_x)
                                    print("robot_y",robot_y)        
                                    for t in range(int(distance*100)):
                                        for y in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[8]-y*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[8]-y*0.0174533)) )<MAP_SIZE-1 and ((side_s==0  and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533)))<min(barrier_x)) or (side_s==1 and int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[8]-y*0.0174533)) )>max(barrier_y) and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))>max(barrier_x) or (getDistance(so[7])<0.5+distance_detected and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533)))>max(barrier_x)))):
                                                color=display.setColor(0xFF0000)
                                               
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533)))
                                                jj=int(robot_y-t*(cos(rads+rangerads[8]-y*0.0174533)) )
                                                #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533))),int(robot_y-t*(cos(rads+rangerads[8]-y*0.0174533)) ),1,1)
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[8]-y*0.0174533)) )]!=0:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[8]-y*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533))),int(robot_y-t*(cos(rads+rangerads[8]-y*0.0174533)) ),1,1)
                                                    x=0
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                        #print(ii,jj)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                       
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                        
                                        for v in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) )>0 and int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) )<MAP_SIZE-1 and ((side_s==0  and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))<min(barrier_x) ) or (side_s==1 and int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[8]+v*0.0174533)) )>max(barrier_y) and  int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))>max(barrier_x) or (getDistance(so[7])<0.5+distance_detected and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))>max(barrier_x)))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))
                                                jj=int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) )
                                                #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) ),1,1)
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) )]!=0:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533)))][int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) ),1,1)
                                                    x=0
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
     
            ##GO NORTH
            
            elif  appr_path==1:
                    
                rads=1.57  
                if (moires<350 and moires>6) and north==0:
                    print(moires)
                    ##rotate until we have 0 degrees angle 
                    if moires>180 and moires<350:   
                        speed[0] = MAX_SPEED
                        speed[1] = -MAX_SPEED
                        leftMotor.setVelocity(speed[0])
                        rightMotor.setVelocity(speed[1])
                        print(compasslist[2],compasslist[0])
                        print("eurguwilgt")
                    else:
                        speed[0] = -MAX_SPEED
                        speed[1] = MAX_SPEED
                        leftMotor.setVelocity(speed[0])
                        rightMotor.setVelocity(speed[1])
                        print(compasslist[2],compasslist[0])
                        print("eurguwilgt")
                else:
                    print(moires)
                    velocity_left=MAX_SPEED
                    velocity_right=-MAX_SPEED
                    while velocity_left>0 and velocity_right<0 and east==0:
                    
                        leftMotor.setVelocity(0)
                        rightMotor.setVelocity(0)
                        velocity_left=leftMotor.getVelocity()
                        velocity_right=rightMotor.getVelocity()
                        print("sdiffererkg")
                    north=1
                    speed[0] = MAX_SPEED
                    speed[1] = MAX_SPEED
                    leftMotor.setVelocity(speed[0])
                    rightMotor.setVelocity(speed[1])
                    print("aaaaaaaa",velocity_left,velocity_right)
                    if get_abs(total_robot_y)>=total_distance :
                        print("hahahah")
                        
                        first_time+=1
                        print("giatiiii")
                        color=display.setColor(0xFF0000)
                        line=display.drawLine(int(sum(matrix_ne)/len(matrix_ne)),temporar_ne,int(sum(matrix_ne)/len(matrix_ne)),int(robot_y+total_robot_y*100))
                        for c in range(temporar_ne,int(robot_y+total_robot_y*100),1):
                            Map[int(sum(matrix_ne)/len(matrix_ne))][c]=1 
                        for q in range(temporar_ne-1,int(robot_y+total_robot_y*100 +1),-1):
                            for o in range(int(robot_x+1),int(-1+sum(matrix_ne)/len(matrix_ne)),1):
                                
                                #Map[o][q]=0
                            
                                color=display.setColor(0x0000FF)
                                #rect=display.drawRectangle(o,q,1,1)
                        print("AVERAGE",int(robot_y+total_robot_y*100 +1))       
                        del matrix_ne
                        matrix_ne=[]
                        color=display.setColor(0xFF0000)
                        line=display.drawLine(int(sum(matrix_nw)/len(matrix_nw)),temporar_nw,int(sum(matrix_nw)/len(matrix_nw)),int(robot_y+total_robot_y*100))
                        for c in range(temporar_sw,int(robot_y+total_robot_y*100),1):
                            Map[int(sum(matrix_nw)/len(matrix_nw))][c]=1
                        for q in range(temporar_nw-1,int(robot_y+total_robot_y*100 +1),-1):
                            for o in range(int(+1+sum(matrix_nw)/len(matrix_nw)),int(robot_x-1),1):
                                
                                #Map[o][q]=0
                            
                                color=display.setColor(0x0000FF)
                                #rect=display.drawRectangle(o,q,1,1)
                        del matrix_nw
                        matrix_nw=[]
                        true_distance[4]=true_distance[4]+total_robot_y*100
                        true_distance[12]=true_distance[12]-total_robot_y*100
                        robot_y+=total_robot_y*100
                        ##movement to respresent the local map in the global map
                        sum_total_y+=total_robot_y
                       
                        z+=1
                        for i in range(int(total_distance*100)):
                            visited_nodes.append(visited_nodes[-1]-MAP_SIZE)
                        total_robot_y=0
                        total_y=0
                        total_distance=4.0
                        if side_w>0 and wo_visited==0 and variable==1:
                            chosen_path=2
                            object_detected=1
                            variable=0
                            hide=0
                            far_west=0
                            far_east=0
                            far_north=0
                            far_south=0
                            wo_visited=1
                            first_entered_e=0
                            print("temp_east_x",temp_east_x)
                            print("temp_east_y",temp_east_y)
                            print("temp_west_x",temp_west_x)
                            print("temp_west_y",temp_west_y)
                            print("edge_east_x",edge_east_x)
                            print("edge_east_y",edge_east_y)
                            print("edge_west_x",edge_west_x)
                            print("edge_west_y",edge_west_y)
                            #mapa=0
                            if side_s>0 and side_n>0 and side_w>0 and side_e>0:
                                object_detected=0
                                side_s=0
                                side_n=0
                                side_w=0
                                side_e=0
                                dialegw=1
                                wait=1
                                print("gggggggggggg")
                                wo_visited=0
                                so_visited=0
                                eo_visited=0
                                no_visited=0
                                point_edge=len(edge_west_y)-1
                                if edge_east_x[point_edge]<temp_east_x:
                                    edge_east_x[point_edge]=temp_east_x
                                    edge_east_x.append(0)
                                if edge_east_y[point_edge]<temp_east_y:
                                    edge_east_y[point_edge]=temp_east_y
                                    edge_east_y.append(0)
                                if edge_west_x[point_edge]>temp_west_x:
                                    edge_west_x[point_edge]=temp_west_x
                                    edge_west_x.append(2000)
                                if edge_west_y[point_edge]>temp_west_y:
                                    edge_west_y[point_edge]=temp_west_y
                                    edge_west_y.append(2000) 
                                print("edge_east_x",edge_east_x)
                                print("edge_east_y",edge_east_y)
                                print("edge_west_x",edge_west_x)
                                print("edge_west_y",edge_west_y)
                                for d in range(int(temp_west_x),int(temp_east_x)):
                                    for f in range (int(temp_west_y),int(temp_east_y)):
                                        Map[d][f]=1
                                        color=display.setColor(0xFF0000)
                                        rect=display.drawRectangle(d,f,1,1) 
                        if side_e>0 and eo_visited==0 and variable==1:
                            chosen_path=3
                            object_detected=1
                            variable=0
                            hide=0
                            
                            far_west=0
                            far_east=0
                            far_north=0
                            far_south=0
                            eo_visited=1
                            first_entered_w=0
                            print("temp_east_x",temp_east_x)
                            print("temp_east_y",temp_east_y)
                            print("temp_west_x",temp_west_x)
                            print("temp_west_y",temp_west_y)
                            print("edge_east_x",edge_east_x)
                            print("edge_east_y",edge_east_y)
                            print("edge_west_x",edge_west_x)
                            print("edge_west_y",edge_west_y)
                            if side_s>0 and side_n>0 and side_w>0 and side_e>0:
                                object_detected=0
                                side_s=0
                                side_n=0
                                side_w=0
                                side_e=0
                                dialegw=1
                                wait=1
                                print("gggggggggggg")
                                wo_visited=0
                                so_visited=0
                                eo_visited=0
                                no_visited=0
                                point_edge=len(edge_west_y)-1 
                                if edge_east_x[point_edge]<temp_east_x:
                                    edge_east_x[point_edge]=temp_east_x
                                    edge_east_x.append(0)
                                if edge_east_y[point_edge]<temp_east_y:
                                    edge_east_y[point_edge]=temp_east_y
                                    edge_east_y.append(0)
                                if edge_west_x[point_edge]>temp_west_x:
                                    edge_west_x[point_edge]=temp_west_x
                                    edge_west_x.append(2000)
                                if edge_west_y[point_edge]>temp_west_y:
                                    edge_west_y[point_edge]=temp_west_y
                                    edge_west_y.append(2000) 
                                
                                for d in range(int(temp_west_x),int(temp_east_x)):
                                    for f in range (int(temp_west_y),int(temp_east_y)):
                                        Map[d][f]=1
                                        color=display.setColor(0xFF0000)
                                        rect=display.drawRectangle(d,f,1,1) 
                    else:
                        for h in range(300):
                            for g in range(300):
                                if robot_x+total_robot_x*100+g<MAP_SIZE-50 and robot_y+total_robot_y*100-h>200:
                                    if Post_Map_Occ[int(robot_x+total_robot_x*100+g)][int(robot_y+total_robot_y*100-h)]>0.85 and (int(robot_y+total_robot_y*100-h) not in barrier_y or int(robot_x+total_robot_x*100+g) not in barrier_x) :
                                        if int(robot_y+total_robot_y*100-h) in barrier_y:
                                            temporar=barrier_y.index(int(robot_y+total_robot_y*100-h))
                                            if  int(robot_x+total_robot_x*100+g)<barrier_x[temporar]:
                                                barrier_x[temporar]=int(robot_x+total_robot_x*100+g)
                                        else:   
                                            barrier_x.append(int(robot_x+total_robot_x*100+g))
                                            barrier_y.append(int(robot_y+total_robot_y*100-h))
                                            sign_barriers=1
                                                    
                        for h in range(300):
                            for g in range(300):
                                if robot_x+total_robot_x*100-g>200 and robot_x+total_robot_x*100-g<MAP_SIZE-50 and robot_y+total_robot_y*100-h>200:
                                    if Post_Map_Occ[int(robot_x+total_robot_x*100-g)][int(robot_y+total_robot_y*100-h)]>0.85 and (int(robot_y+total_robot_y*100-h) not in barrier_y or int(robot_x+total_robot_x*100-g) not in barrier_x) :
                                       
                                        if int(robot_y+total_robot_y*100-h) in barrier_y:
                                            temporar=barrier_y.index(int(robot_y+total_robot_y*100-h))
                                            if  int(robot_x+total_robot_x*100-g)>barrier_x[temporar]:
                                                barrier_x[temporar]=int(robot_x+total_robot_x*100-g)
                                        else:   
                                            barrier_x.append(int(robot_x+total_robot_x*100-g))
                                            barrier_y.append(int(robot_y+total_robot_y*100-h))
                                            sign_barriers=1
                                       
                        #m=len(barrier_y)-1
                        print(barrier_x)
                        print(barrier_y)
                        print("sign_barriers",sign_barriers)
                        for s in range(8):    
                            print(s)
                            
                            soValues.append(so[s].getValue())
                            meas_with_gauss_error=[]
                            for x in range(30):
                                distance_noise=add_gaussian_noise(getDistance(so[s]))
                                meas_with_gauss_error.append(distance_noise)
                            a=np.asarray(meas_with_gauss_error)
                            avg2=sum(meas_with_gauss_error)/30
                            print(avg2)
                            
                            #distance=getDistance(so[i])
                            #print(distance)
                            numsteps = 60
                    
                           
                            filter = KalmanFilterLinear(numpy.matrix([1]),numpy.matrix([0]),numpy.matrix([1]), numpy.matrix([avg2]),numpy.matrix([std**2]),numpy.matrix([0.00001]),numpy.matrix([std**2]))
                            
                            soValues.append(so[s].getValue())
                            sonar_measurement = Sonar_measurement(getDistance(so[s]),std)
                            
                            measuredsonar = []
                            truemeasure = []
                            kalman = []
                            
                            for y in range(numsteps):
                                measured = sonar_measurement.GetMeasurementWithNoise()
                                measuredsonar.append(measured)
                                truemeasure.append(sonar_measurement.GetMeasurement())
                                kalman.append(filter.GetCurrentState()[0,0])
                                filter.Step(numpy.matrix([0]),numpy.matrix([measured]))
                            #print(kalman)
                           
                            kalm_distance=kalman[-1]
                            del measuredsonar
                            del truemeasure
                            del kalman 
                            del meas_with_gauss_error  
                            del a    
                            if kalm_distance<4  and (s==0 or s==4 or s==7 ):
                                print("aktina ",s)
                                distance=kalm_distance
                                print("distance",distance)
                                tr_distance=getDistance(so[s])
                                print("tr_distance",tr_distance)
                                                
                                if getDistance(so[3])<0.5 and getDistance(so[0])<0.5:
                                    total_distance=0
                                    print("fail")
                                    temp_edge_west_x=robot_x+total_robot_x*100
                                    temp_edge_west_y=robot_y+total_robot_y*100
                                    continue
                                
                                if s==4:
                                    rect=display.drawRectangle(int(robot_x+total_robot_x*100),int(robot_y+total_robot_y*100-distance*100),1,1)
                                    print("north")
                                    print("distance",distance)
                                    Map[int(robot_x+total_robot_x*100)][int(robot_y+total_robot_y*100-distance*100)]=1
                                    far_north+=1
                                    if distance<shortest_distance:
                                        shortest_distance=distance
                                   
                                    if flag==0 and variable==0:
                                        
                                        total_distance=int(distance)
                                       
                                        flag=1
                                    print(+distance*100+robott_movement_y*100-true_distance[4])
                                    if get_abs(+distance*100+robott_movement_y*100-true_distance[4])<100:
                                        distance=(true_distance[4]/100)+robott_movement_y
                                        print("distance",distance)
                                        print("yeahhh")
                                    else:
                                        print("yea")
                                    print("rads",rads)
                                    
                                    for t in range(int(distance*100)):
                                        for y in range(22):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) )<MAP_SIZE-1:
                                                #color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]-y*0.0174533))),int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]-y*0.0174533)) ),1,1)
                                                    
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (22-y*0.0174533)/22)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (22-y*0.0174533)/22)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                       
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(22):
                                            if int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) )<MAP_SIZE-1:
                                                #color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(rads+rangerads[0]+v*0.0174533))),int(robot_y+total_robot_y*100-t*(cos(rads+rangerads[0]+v*0.0174533)) ),1,1)
                                                     
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (22-v*0.0174533)/22)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (22-v*0.0174533)/22)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)        
                                if s==0:
                                    color=display.setColor(0xFF0000)
                            
                                    #rect=display.drawRectangle(int(get_abs(robot_x+total_robot_x*100-distance*100))+1,int(robot_y+total_robot_y*100),1,1)
                                    #rect=display.drawRectangle(int(get_abs(robot_x+total_robot_x*100-distance*100))+1,int(robot_y+total_robot_y*100),1,1)
                                    print("west")
                                    if int(robot_x+total_robot_x*100-distance*100)>70:
                                        barrier_x.append(int(robot_x+total_robot_x*100-distance*100))
                                        barrier_y.append(int(robot_y+total_robot_y*100))
                                    print(barrier_x)
                                    print(barrier_y)
                                    ##
                                    if get_abs(distance*100+robott_movement_x*100-true_distance[0])<100:
                                        distance=(true_distance[0]/100)-robott_movement_x
                                        print("distance",distance)
                                        print("yeahhh")
                                        if len(matrix_nw)==0:
                                            matrix_nw.append(int(get_abs(robot_x+total_robot_x*100-distance*100)))
                                        else:
                                            matrix_nw.append(int(get_abs(robot_x+total_robot_x*100-distance*100)))  
                                    else: 
                                        print("yea")
                                        if int(get_abs(robot_x+total_robot_x*100-distance*100))-100>max(matrix_sw) or int(get_abs(robot_x+total_robot_x*100-distance*100))-100<min(matrix_sw) :
                                            print(max(matrix_nw))
                                            print(int(get_abs(robot_x+total_robot_x*100-distance*100))-100)
                                           
                                            #color=display.setColor(0xFF0000)
                                            #line=display.drawLine(int(sum(matrix_nw)/len(matrix_nw)),temporar_nw,int(sum(matrix_nw)/len(matrix_nw)),int(robot_y+total_robot_y*100))
                                            for c in range(temporar_nw,int(robot_y+total_robot_y*100),1):
                                                Map[int(sum(matrix_nw)/len(matrix_nw))][c]=1
                                            for q in range(temporar_nw+1,int(robot_y+total_robot_y*100 -1),1):
                                                for o in range(int(robot_x+1),int(-1+sum(matrix_nw)/len(matrix_nw)),1):
                                
                                                    #Map[o][q]=0
                            
                                                    color=display.setColor(0x0000FF)
                                                    #rect=display.drawRectangle(o,q,1,1)
                                            del matrix_nw
                                            matrix_nw=[int(get_abs(robot_x+total_robot_x*100+distance*100))]
                                            temporar_nw=int(robot_y+total_robot_y*100)
                                            print("dfdfdfdfdfdfdfd")
                                            true_distance[0]=int(distance*100)        
                                    ##
                                    far_west+=1
                                    real_west+=1
                                    if len(edge_west_y)==1 and (getDistance(so[0])<0.9 or (side_e==0  and side_n==0 and side_s==0)) and first_entered_w==0 and int(robot_x+total_robot_x*100-distance*100)>50 and int(get_abs(robot_y+total_robot_y*100))>50:
                                        side_w=1
                                        hide=0
                                        first_entered_e=1
                                        if side_w>0 and hide==0:
                                            
                                            hide=1
                                            variable=1
                                            total_distance=round(get_abs(total_robot_y)+getDistance(so[4])/2,1) 
                                    elif len(edge_west_y)>1:
                                        for b in range(len(edge_west_y)-1):
                                            if int(robot_x+total_robot_x*100-distance*100)>50 and int(get_abs(robot_y+total_robot_y*100))>50  and (int(robot_x+total_robot_x*100-distance*100)<(edge_west_x[b]-6) or int(get_abs(robot_x+total_robot_x*100-distance*100))>(edge_east_x[b]+6) or int(robot_y+total_robot_y*100)<(edge_west_y[b]-6) or int(robot_y+total_robot_y*100)>(edge_east_y[b]+6)):
                                                unique_ob+=1
                                                continue
                                        if unique_ob==len(edge_west_y)-1 and (getDistance(so[0])<0.9 or (side_e==0  and side_n==0 and side_s==0))  and first_entered_w==0:
                                            side_w=1
                                            first_entered_e=1
                                            hide=0
                                            point_edge=b
                                            if side_e>0 and hide==0:
                                              
                                                hide=1
                                                variable=1
                                                total_distance=round(get_abs(total_robot_y)+getDistance(so[4])/2,1)
                                        unique_ob=0
                                    if robot_x<=MAP_SIZE/2 and robot_y>=MAP_SIZE/2:
                                        far_westsouth=1
                                    else:
                                        far_westnorth=1
                                    #print("robot_x",robot_x)
                                    #print("robot_y",robot_y)
                                    for t in range(int(distance*100)):
                                        for y in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]-y*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]-y*0.0174533)) )<MAP_SIZE-1  and  ((side_w==0 and int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533)))<min(barrier_x)) or (side_w==1 and int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]-y*0.0174533)) )<min(barrier_y) or int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533)))>max(barrier_x))):
                                                #color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]-y*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]-y*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]-y*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533))),int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]-y*0.0174533)) ),1,1)
                                                    
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                       
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                       
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)     
                                        for v in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]+v*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]+v*0.0174533)) )<MAP_SIZE-1 and ((side_w==0 and int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]+v*0.0174533)))<min(barrier_x)) or  (side_w==1 and int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]-y*0.0174533)) )<min(barrier_y) or int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]-y*0.0174533)))>max(barrier_x))):
                                                #color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]+v*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]+v*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]+v*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]+v*0.0174533)) )]=1
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin((rads-1.57)+rangerads[0]+v*0.0174533))),int(robot_y+total_robot_y*100-t*(cos((rads-1.57)+rangerads[0]+v*0.0174533)) ),1,1) 
                                                     
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                       
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                       
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)         
                                if s==7:
                                    color=display.setColor(0xFF0000)
                                    print("distance",distance)
                                    rect=display.drawRectangle(int(robot_x+total_robot_x*100+distance*100),int(robot_y+total_robot_y*100),1,1)
                                    print("anatolika")
                                    if int(robot_x+total_robot_x*100+distance*100)<MAP_SIZE-70:
                                        barrier_x.append(int(robot_x+total_robot_x*100+distance*100))
                                        barrier_y.append(int(robot_y+total_robot_y*100))
                                    print(barrier_x)
                                    print(barrier_y)
                                    if int(robot_x+total_robot_x*100+distance*100)<=MAP_SIZE-1 and  int(robot_y+total_robot_y*100)<=MAP_SIZE-1:
                                        Map[int(robot_x+total_robot_x*100+distance*100)][int(robot_y+total_robot_y*100)]=1
                                    far_east=1
                                    real_east+=1
                                    #3333
                                    print(distance*100+robott_movement_x*100-true_distance[7])
                                    print(total_robot_x*100 +100)
                                    if get_abs(distance*100+robott_movement_x*100-true_distance[7])<(total_robot_x*100 +100):
                                        print("distance",distance)
                                        distance=(true_distance[7]/100)-robott_movement_x
                                        print("yeahhh")
                                        print(matrix_ne)
                                        if len(matrix_ne)==0:
                                            matrix_ne.append(int(get_abs(robot_x+total_robot_x*100+get_abs(distance*100))))
                                        else:
                                            matrix_ne.append(int(get_abs(robot_x+total_robot_x*100+get_abs(distance*100))))  
                                    else: 
                                        print("yea")
                                        print(matrix_ne)
                                        if int(get_abs(robot_x+total_robot_x*100+distance*100))-100>max(matrix_ne) or int(get_abs(robot_x+total_robot_x*100+distance*100))-100<min(matrix_ne):
                                            print(max(matrix_ne))
                                            
                                            print(int(get_abs(robot_x+total_robot_x*100+distance*100))-100)
                                            
                                            color=display.setColor(0xFF0000)
                                            #line=display.drawLine(int(sum(matrix_ne)/len(matrix_ne)),int(robot_y),int(sum(matrix_ne)/len(matrix_ne)),int(robot_y+total_robot_y*100))
                                            for c in range(temporar_ne,int(robot_y+total_robot_y*100),-1):
                                                Map[int(sum(matrix_ne)/len(matrix_ne))][c]=1
                                            for q in range(temporar_ne-1,int(robot_y+total_robot_y*100 +1),-1):
                                                for o in range(int(robot_x+1),int(-1+sum(matrix_ne)/len(matrix_ne)),1):
                                
                                                    Map[o][q]=0
                            
                                                    color=display.setColor(0x0000FF)
                                                    rect=display.drawRectangle(o,q,1,1)
                                            print("AVERAGE",int(robot_y+total_robot_y*100 +1))
                                            del matrix_ne
                                            matrix_ne=[int(get_abs(robot_x+total_robot_x*100+distance*100))]
                                            temporar_ne=int(robot_y+total_robot_y*100)
                                            print("dfdfdfdfdfdfdfd")
                                            true_distance[7]=int(distance*100)
                                    ##
                                    if len(edge_west_y)==1 and (getDistance(so[7])<0.9 or (side_w==0 and side_n==0 and side_s==0)) and first_entered_e==0 and int(robot_x+total_robot_x*100+distance*100)<MAP_SIZE-50 and int(get_abs(robot_y+total_robot_y*100))>50:
                                        side_e=1
                                        hide=0
                                        first_entered_w=1       
                                        if side_e>0 and hide==0:
                                            
                                            total_distance=round(get_abs(total_robot_y)+getDistance(so[4])/2,1)
                                            hide=1
                                            variable=1
                                            if detected_w==0 or (detected_w==1 and robot_x+total_robot_x*100+distance*100 -50<temp_west_x):
                                                temp_west_x=int(sum(matrix_ne)/len(matrix_ne))
                                                #temp_west_y=int(get_abs(robot_y+total_robot_y*100))
                                                print(" temp_west_x", temp_west_x)
                                                #print(" temp_west_y", temp_west_y)
                                                detected_w=1
                                    elif len(edge_west_y)>1:
                                        for b in range(len(edge_west_y)-1):
                                            if int(robot_x+total_robot_x*100+distance*100)<MAP_SIZE-100 and int(get_abs(robot_y+total_robot_y*100))>50  and ((int(robot_x+total_robot_x*100+distance*100)<(edge_west_x[b]-6)) or (int(robot_x+total_robot_x*100+distance*100)>(edge_east_x[b]+6)) or (int(robot_y+total_robot_y*100)<(edge_west_y[b]-6)) or (int(robot_y+total_robot_y*100)>(edge_east_y[b]+6))):
                                                unique_ob+=1
                                                continue
                                        if unique_ob==len(edge_west_y)-1 and first_entered_e==0 and (getDistance(so[7])<0.9 or (side_w==0 and side_n==0 and side_s==0)):
                                            side_e=1
                                            first_entered_w=1
                                            hide=0
                                            point_edge=b
                                            if side_e>0 and hide==0:
                                                print(int(robot_x+total_robot_x*100+distance*100))
                                                total_distance=round(get_abs(total_robot_y)+getDistance(so[4])/2,1)
                                                hide=1
                                                variable=1
                                                if detected_w==0 or (detected_w==1 and robot_x+total_robot_x*100+distance*100<temp_west_x):
                                                    temp_west_x=int(sum(matrix_ne)/len(matrix_ne))
                                                    #temp_west_y=int(get_abs(robot_y+total_robot_y*100))
                                                    print(" temp_west_x", temp_west_x)
                                                    #print(" temp_west_y", temp_west_y)
                                        unique_ob=0
                                        print("edge_east_x",edge_east_x)
                                        print("edge_east_y",edge_east_y)
                                        print("edge_west_x",edge_west_x)
                                        print("edge_west_y",edge_west_y) 
                                    
                                    if robot_x>=MAP_SIZE/2 and robot_y>=MAP_SIZE/2:
                                        far_eastsouth=1
                                    else:
                                        far_eastnorth=1 
                                   
                                    for t in range(int(distance*100)):
                                        for y in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(0+rangerads[8]-y*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(0+rangerads[8]-y*0.0174533)) )<MAP_SIZE-1 and (side_e==0 and int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]-y*0.0174533)))<min(barrier_x)) or ((side_e==1 and int(robot_y+total_robot_y*100-t*(cos(0+rangerads[8]-y*0.0174533)) )<min(barrier_y) and int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]-y*0.0174533)))>max(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]-y*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(0+rangerads[8]-y*0.0174533)) )
                                                
                                                if t+10<int(distance*100) and  ii<MAP_SIZE and jj>0:
                                                    if Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                        meas_prob=((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                        Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                        Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                        
                                                        Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                        Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                        if Post_Map_Empty[ii][jj]>0.85:
                                                            color=display.setColor(0x0000FF)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                            
                                                        elif Post_Map_Empty[ii][jj]>0.65:
                                                            color=display.setColor(0x00F0F0)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and  ii<MAP_SIZE and jj>0:
                                                    if Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                        meas_prob=0.98*((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                        Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                        Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                        
                                                        Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                        Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                        if Post_Map_Occ[ii][jj]>0.85:
                                                            color=display.setColor(0xFF0000)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                        elif Post_Map_Occ[ii][jj]>0.65:
                                                            color=display.setColor(0xFF7000)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(0+rangerads[8]+v*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(0+rangerads[8]+v*0.0174533)) )<MAP_SIZE-1 and  (side_e==0 and int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]+v*0.0174533)))<min(barrier_x)) or ((side_e==1 and int(robot_y+total_robot_y*100-t*(cos(0+rangerads[8]+v*0.0174533)) )<min(barrier_y) and int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]+v*0.0174533)))>max(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(0+rangerads[8]+v*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(0+rangerads[8]+v*0.0174533)) )
                                                #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) ),1,1)
                                                
                                                if t+10<int(distance*100) and ii<MAP_SIZE and jj>0: 
                                                    if  Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                        meas_prob=((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                        Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                        Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                        
                                                        Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                        Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                        if Post_Map_Empty[ii][jj]>0.85:
                                                            color=display.setColor(0x0000FF)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                        elif Post_Map_Empty[ii][jj]>0.65:
                                                            color=display.setColor(0x00F0F0)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and ii<MAP_SIZE and jj>0:
                                                    if Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                        meas_prob=0.98*((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                        Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                        Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                        
                                                        Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                        Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                        if Post_Map_Occ[ii][jj]>0.85:
                                                            color=display.setColor(0xFF0000)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                                                        elif Post_Map_Occ[ii][jj]>0.65:
                                                            color=display.setColor(0xFF7000)
                                                            rect=display.drawRectangle(ii,jj,1,1)
                ###GO SOUTH
            elif appr_path==4:
                    ##rotate until go south
                rads=1.57
                print("pmpmpmpmpm")
                #if (compasslist[2]<-0.3  or compasslist[2]>0.3 or compasslist[0]>-0.92) and south==0 :
                if (moires<170 or moires>190) and south==0:
                    ##rotate until we have 180 degrees angle 
                    if moires>6 and moires<170:   
                        speed[0] = MAX_SPEED
                        speed[1] = -MAX_SPEED
                        leftMotor.setVelocity(speed[0])
                        rightMotor.setVelocity(speed[1])
                
                        print("eurguwilgt")
                    else:
                        speed[0] = -MAX_SPEED
                        speed[1] = +MAX_SPEED
                        leftMotor.setVelocity(speed[0])
                        rightMotor.setVelocity(speed[1])    
                    
                else:
                    print(moires)
                    velocity_left=MAX_SPEED
                    velocity_right=-MAX_SPEED
                    while velocity_left>0 and velocity_right<0 and east==0:
                    
                        leftMotor.setVelocity(0)
                        rightMotor.setVelocity(0)
                        velocity_left=leftMotor.getVelocity()
                        velocity_right=rightMotor.getVelocity()
                        print("sdiffererkg")
                    south=1
                    speed[0] = MAX_SPEED
                    speed[1] = MAX_SPEED
                    leftMotor.setVelocity(speed[0])
                    rightMotor.setVelocity(speed[1])
                    print("aaaaaaaa",velocity_left,velocity_right)
                    if get_abs(total_robot_y)>=total_distance:
                        print("hahahah")
                        
                        first_time+=1
                         
                        
                        print("giatiiii")
                        #color=display.setColor(0xFF0000)
                        #line=display.drawLine(int(sum(matrix_se)/len(matrix_se)),temporar_se,int(sum(matrix_se)/len(matrix_se)),int(robot_y+total_robot_y*100))
                        for c in range(temporar_se,int(robot_y+total_robot_y*100),1):
                            #Map[int(sum(matrix_se)/len(matrix_se))][c]=1
                            x=0 
                        for q in range(temporar_se+1,int(robot_y+total_robot_y*100 -1),1):
                            for o in range(int(robot_x+1),int(-1+sum(matrix_se)/len(matrix_se)),1):
                                
                                #Map[o][q]=0
                            
                                color=display.setColor(0x0000FF)
                                #rect=display.drawRectangle(o,q,1,1)
                                
                        del matrix_se
                        matrix_se=[]
                        #color=display.setColor(0xFF0000)
                        #line=display.drawLine(int(sum(matrix_sw)/len(matrix_sw)),temporar_sw,int(sum(matrix_sw)/len(matrix_sw)),int(robot_y+total_robot_y*100))
                        for c in range(temporar_sw,int(robot_y+total_robot_y*100),1):
                            #Map[int(sum(matrix_sw)/len(matrix_sw))][c]=1
                            x=0
                        for q in range(temporar_se+1,int(robot_y+total_robot_y*100 -1),1):
                            for o in range(int(+1+sum(matrix_sw)/len(matrix_sw)),int(robot_x-1),1):
                                
                                #Map[o][q]=0
                            
                                color=display.setColor(0x0000FF)
                                #rect=display.drawRectangle(o,q,1,1)
                        del matrix_sw
                        matrix_sw=[]
                        robot_y+=total_robot_y*100
                        ##movement to respresent the local map in the global map
                        sum_total_y+=total_robot_y
                        true_distance[12]=true_distance[12]-total_robot_y*100
                        true_distance[4]=true_distance[4]+total_robot_y*100
                        z+=1
                        for i in range(int(total_distance*100)):
                            visited_nodes.append(visited_nodes[-1]+MAP_SIZE)
                        total_robot_y=0
                        total_y=0
                        south=0
                        total_distance=4.0
                        ####PRINTING LINES
                      
                                              
                        if side_e>0 and eo_visited==0 and variable==1:
                           
                            object_detected=1
                            chosen_path=3
                            variable=0
                            hide=0
                            far_west=0
                            far_east=0
                            far_north=0
                            far_south=0
                            eo_visited=1
                            first_entered_w=0
                            print("temp_east_x",temp_east_x)
                            print("temp_east_y",temp_east_y)
                            print("temp_west_x",temp_west_x)
                            print("temp_west_y",temp_west_y)
                            print("edge_east_x",edge_east_x)
                            print("edge_east_y",edge_east_y)
                            print("edge_west_x",edge_west_x)
                            print("edge_west_y",edge_west_y)
                            if side_s>0 and side_n>0 and side_w>0 and side_e>0:
                                object_detected=0
                                side_s=0
                                side_n=0
                                side_w=0
                                side_e=0
                                dialegw=1
                                wait=1
                                print("gggggggggggg")
                                wo_visited=0
                                so_visited=0
                                eo_visited=0
                                no_visited=0
                                point_edge=len(edge_west_y)-1
                                if edge_east_x[point_edge]<temp_east_x:
                                    edge_east_x[point_edge]=temp_east_x
                                    edge_east_x.append(0)
                                if edge_east_y[point_edge]<temp_east_y:
                                    edge_east_y[point_edge]=temp_east_y
                                    edge_east_y.append(0)
                                if edge_west_x[point_edge]>temp_west_x:
                                    edge_west_x[point_edge]=temp_west_x
                                    edge_west_x.append(2000)
                                if edge_west_y[point_edge]>temp_west_y:
                                    edge_west_y[point_edge]=temp_west_y
                                    edge_west_y.append(2000) 
                                
                                for d in range(int(temp_west_x),int(temp_east_x)):
                                    for f in range (int(temp_west_y),int(temp_east_y)):
                                        Map[d][f]=1
                                        color=display.setColor(0xFF0000)
                                        rect=display.drawRectangle(d,f,1,1) 
                        if side_w>0 and wo_visited==0 and variable==1:
                           
                            object_detected=1
                            chosen_path=2
                            variable=0
                            hide=0
                            print("temp_east_x",temp_east_x)
                            print("temp_east_y",temp_east_y)
                            print("temp_west_x",temp_west_x)
                            print("temp_west_y",temp_west_y)
                            print("edge_east_x",edge_east_x)
                            print("edge_east_y",edge_east_y)
                            print("edge_west_x",edge_west_x)
                            print("edge_west_y",edge_west_y)
                            far_west=0
                            far_east=0
                            far_north=0
                            far_south=0
                            wo_visited=1
                            first_entered_e=0
                            if side_s>0 and side_n>0 and side_w>0 and side_e>0:
                                object_detected=0
                                side_s=0
                                side_n=0
                                side_w=0
                                side_e=0
                                dialegw=1
                                wait=1
                                print("gggggggggggg")
                                wo_visited=0
                                so_visited=0
                                eo_visited=0
                                no_visited=0
                                point_edge=len(edge_west_y)-1
                                if edge_east_x[point_edge]<temp_east_x:
                                    edge_east_x[point_edge]=temp_east_x
                                    edge_east_x.append(0)
                                if edge_east_y[point_edge]<temp_east_y:
                                    edge_east_y[point_edge]=temp_east_y
                                    edge_east_y.append(0)
                                if edge_west_x[point_edge]>temp_west_x:
                                    edge_west_x[point_edge]=temp_west_x
                                    edge_west_x.append(2000)
                                if edge_west_y[point_edge]>temp_west_y:
                                    edge_west_y[point_edge]=temp_west_y
                                    edge_west_y.append(2000)
                                
                                for d in range(int(temp_west_x),int(temp_east_x)):
                                    for f in range (int(temp_west_y),int(temp_east_y)):
                                        Map[d][f]=1
                                        color=display.setColor(0xFF0000)
                                        rect=display.drawRectangle(d,f,1,1)  
                    else:
                        for h in range(200):
                            for g in range(200):
                                if robot_x+total_robot_x*100+g<MAP_SIZE-150 and robot_y+total_robot_y*100+h<MAP_SIZE-70:
                                    if Post_Map_Occ[int(robot_x+total_robot_x*100+g)][int(robot_y+total_robot_y*100+h)]>0.85 and (int(robot_y+total_robot_y*100+h) not in barrier_y or int(robot_x+total_robot_x*100+g) not in barrier_x) :
                                        if int(robot_y+total_robot_y*100+h) in barrier_y:
                                            temporar=barrier_y.index(int(robot_y+total_robot_y*100+h))
                                            if  int(robot_x+total_robot_x*100+g)<barrier_x[temporar]:
                                                barrier_x[temporar]=int(robot_x+total_robot_x*100+g)
                                        else:   
                                            barrier_x.append(int(robot_x+total_robot_x*100+g))
                                            barrier_y.append(int(robot_y+total_robot_y*100+h))
                                            sign_barriers=1
                                                    
                        for h in range(200):
                            for g in range(200):
                                if robot_x+total_robot_x*100-g>20 and robot_y+total_robot_y*100+h<MAP_SIZE-70 and  robot_x+total_robot_x*100-g<=MAP_SIZE:
                                    if Post_Map_Occ[int(robot_x+total_robot_x*100-g)][int(robot_y+total_robot_y*100+h)]>0.85 and (int(robot_y+total_robot_y*100+h) not in barrier_y or int(robot_x+total_robot_x*100-g) not in barrier_x) :
                                        
                                        if int(robot_y+total_robot_y*100+h) in barrier_y:
                                            temporar=barrier_y.index(int(robot_y+total_robot_y*100+h))
                                            if  int(robot_x+total_robot_x*100-g)>barrier_x[temporar]:
                                                barrier_x[temporar]=int(robot_x+total_robot_x*100-g)
                                        else:   
                                            barrier_x.append(int(robot_x+total_robot_x*100-g))
                                            barrier_y.append(int(robot_y+total_robot_y*100+h))
                                            sign_barriers=1
                                       
                        m=len(barrier_x)-1
                        print(barrier_x)
                        print(barrier_y)
                        for s in range(8):    
                            print(s)
                            
                            soValues.append(so[s].getValue())
                            meas_with_gauss_error=[]
                            for x in range(30):
                                distance_noise=add_gaussian_noise(getDistance(so[s]))
                                meas_with_gauss_error.append(distance_noise)
                            a=np.asarray(meas_with_gauss_error)
                            avg2=sum(meas_with_gauss_error)/30
                            print(avg2)
                            
                            #distance=getDistance(so[i])
                            #print(distance)
                            numsteps = 60
                    
                           
                            filter = KalmanFilterLinear(numpy.matrix([1]),numpy.matrix([0]),numpy.matrix([1]), numpy.matrix([avg2]),numpy.matrix([std**2]),numpy.matrix([0.00001]),numpy.matrix([std**2]))
                            
                            soValues.append(so[s].getValue())
                            sonar_measurement = Sonar_measurement(getDistance(so[s]),std)
                            
                            measuredsonar = []
                            truemeasure = []
                            kalman = []
                            
                            for y in range(numsteps):
                                measured = sonar_measurement.GetMeasurementWithNoise()
                                measuredsonar.append(measured)
                                truemeasure.append(sonar_measurement.GetMeasurement())
                                kalman.append(filter.GetCurrentState()[0,0])
                                filter.Step(numpy.matrix([0]),numpy.matrix([measured]))
                            #print(kalman)
                           
                            kalm_distance=kalman[-1]
                            del measuredsonar
                            del truemeasure
                            del kalman 
                            del meas_with_gauss_error  
                            del a    
                            if kalm_distance<4.8  and (s==0 or s==4 or s==7 ):
                                print("aktina ",s)
                                distance=kalm_distance
                                print("distance",distance)
                                tr_distance=getDistance(so[s])
                                print("tr_distance",tr_distance)
                                                
                                if getDistance(so[3])<0.5 and getDistance(so[0])<0.5:
                                    total_distance=0
                                    print("fail")
                                    continue
                                if s==4 :#and s<=4 :
                                    rect=display.drawRectangle(int(robot_x+total_robot_x*100),int(robot_y+total_robot_y*100+distance*100),1,1)
                                    print("south")
                                    if get_abs(distance*100+robott_movement_x*100-true_distance[12])<100:
                                        distance=(true_distance[12]/100)-robott_movement_y
                                        print("distance",distance)
                                        print("yeahhh")
                                    else:
                                        print("yea")
                                    #if int(robot_y+total_robot_y*100+distance*100)<=MAP_SIZE-1:
                                    #    Map[int(robot_x+total_robot_x*100)][int(robot_y+total_robot_y*100+distance*100)]=1
                                    print(int(robot_x+total_robot_x*100))
                                    print(int(robot_y+total_robot_y*100+distance*100))
                                    far_south+=1
                                    #if distance<shortest_distance:
                                    #    shortest_distance=distance
                                    if flag==0:
                                        total_distance=int(distance)
                                        flag=1
                                    
                                    for t in range(int(distance*100)):
                                        for y in range(22):
                                            if int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]-y*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]-y*0.0174533)) )<MAP_SIZE-1 and (side_s==0 or (side_s==1 and int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]-y*0.0174533)) )<min(barrier_y))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]-y*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]-y*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]-y*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]-y*0.0174533)) )]=1 
                                                   # rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]-y*0.0174533))),int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]-y*0.0174533)) ),1,1)
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (22-y*0.0174533)/22)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (22-y*0.0174533)/22)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(22):
                                            if int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]+v*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]+v*0.0174533)) )<MAP_SIZE-1 and (side_s==0 or (side_s==1 and int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]+v*0.0174533)) )<min(barrier_y))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]+v*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]+v*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]+v*0.0174533)) )]!=0:
                                                    Map[int(robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]+v*0.0174533)) )]=1 
                                                  #  rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(-1.57+rangerads[0]+v*0.0174533))),int(robot_y+total_robot_y*100-t*(cos(-1.57+rangerads[0]+v*0.0174533)) ),1,1)
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (22-v*0.0174533)/22)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (22-v*0.0174533)/22)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj] 
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)  
                                if s==0:
                                    #color=display.setColor(0xFF0000)
                            
                                    #rect=display.drawRectangle(int(get_abs(robot_x+total_robot_x*100+distance*100)),int(robot_y+total_robot_y*100),1,10)
                                    print("anatolika")
                                    print(get_abs(distance*100+total_robot_x*100-true_distance[7]))
                                    print(total_robot_x*100 +100)
                                    print(true_distance[7])
                                    if get_abs(distance*100+robott_movement_x*100-true_distance[7])<(total_robot_x*100 +100):
                                        print("distance",distance)
                                        distance=(true_distance[7]/100)-robott_movement_x
                                        print("yeahhh")
                                        print(matrix_se)
                                        if len(matrix_se)==0:
                                            matrix_se.append(int(get_abs(robot_x+total_robot_x*100+get_abs(distance*100))))
                                        else:
                                            matrix_se.append(int(get_abs(robot_x+total_robot_x*100+get_abs(distance*100))))  
                                    else: 
                                        print("yea")
                                        print(matrix_se)
                                        if int(get_abs(robot_x+total_robot_x*100+distance*100))-100>max(matrix_se):
                                            print(max(matrix_se))
                                            
                                            print(int(get_abs(robot_x+total_robot_x*100+distance*100))-100)
                                            
                                            color=display.setColor(0xFF0000)
                                            #line=display.drawLine(int(sum(matrix_se)/len(matrix_se)),int(robot_y),int(sum(matrix_se)/len(matrix_se)),int(robot_y+total_robot_y*100))
                                            for c in range(temporar_se,int(robot_y+total_robot_y*100),1):
                                                Map[int(sum(matrix_se)/len(matrix_se))][c]=1
                                            for q in range(temporar_se+1,int(robot_y+total_robot_y*100 -1),1):
                                                for o in range(int(robot_x+1),int(-1+sum(matrix_se)/len(matrix_se)),1):
                                
                                                    #Map[o][q]=0
                            
                                                    color=display.setColor(0x0000FF)
                                                    #rect=display.drawRectangle(o,q,1,1)
                                 
                                            del matrix_se
                                            matrix_se=[int(get_abs(robot_x+total_robot_x*100+distance*100))]
                                            temporar_se=int(robot_y+total_robot_y*100)
                                            print("dfdfdfdfdfdfdfd")
                                            true_distance[7]=int(distance*100)
                                            
                                            
                                    if int(get_abs(robot_x+total_robot_x*100+distance*100))<MAP_SIZE and int(robot_y+total_robot_y*100)<MAP_SIZE:
                                        Map[int(get_abs(robot_x+total_robot_x*100+distance*100))][int(robot_y+total_robot_y*100)]=1
                                    far_east+=1
                                    real_east+=1
                                    if len(edge_west_y)==1 and (getDistance(so[0])<0.9 or (side_w==0 and side_n==0 and side_s==0)) and first_entered_e==0 and int(get_abs(robot_x+total_robot_x*100+distance*100))<MAP_SIZE-100 and int(robot_y+total_robot_y*100)<MAP_SIZE-50  :
                                        side_e=1
                                        first_entered_w=1    
                                        hide=0
                                        if side_e>0 and hide==0:
                                            
                                            hide=1
                                            variable=1
                                            total_distance=round(total_robot_y+getDistance(so[4])/2,1)
                                           
                                    elif len(edge_west_y)>1:    
                                        for b in range(len(edge_west_y)-1):
                                            if int(get_abs(robot_x+total_robot_x*100+distance*100))<MAP_SIZE-50 and int(robot_y+total_robot_y*100)<MAP_SIZE-50   and (int(robot_x+total_robot_x*100+distance*100)<(edge_west_x[b]-6) or int(robot_x+total_robot_x*100+distance*100)>(edge_east_x[b]+6) or int(robot_y+total_robot_y*100)<(edge_west_y[b]-6) or int(robot_y+total_robot_y*100)>(edge_east_y[b]+6)):
                                              unique_ob+=1
                                              continue
                                        if unique_ob==len(edge_west_y)-1 and (getDistance(so[0])<0.9 or ( side_w==0 and side_n==0 and side_s==0)) and first_entered_e==0:
                                            side_e=1
                                            first_entered_w=1
                                            
                                            hide=0
                                            point_edge=b
                                            if side_e>0 and hide==0 :
                                               
                                                hide=1
                                                variable=1
                                                total_distance=round(total_robot_y+getDistance(so[4])/2,1)
                                        unique_ob=0
                                    if robot_x>=MAP_SIZE/2 and robot_y>=MAP_SIZE/2:
                                        far_eastsouth=1
                                    else:
                                        far_eastnorth=1 
                                    print("distance",distance)
                                    
                                              
                                    for t in range(int(distance*100)):
                                        for y in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]-y*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]-y*0.0174533)) )<MAP_SIZE-1 and ((side_e==0 and int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]-y*0.0174533)))<min(barrier_x)) or (side_e==1 and int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]-y*0.0174533)))>max(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]-y*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]-y*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]-y*0.0174533)) )]!=0:
                                                   # Map[int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]-y*0.0174533)) )]=1 
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]-y*0.0174533))),int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]-y*0.0174533)) ),1,1)
                                                    x=0
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]+v*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]+v*0.0174533)) )<MAP_SIZE-1 and ((side_e==0 and int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]+v*0.0174533)))<min(barrier_x)) or (side_e==1 and int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]+v*0.0174533)))>max(barrier_x))):
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]+v*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]+v*0.0174533)) )
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]+v*0.0174533)) )]!=0:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]+v*0.0174533)) )]=1
                                                    #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(3.14+rangerads[0]+v*0.0174533))),int(robot_y+total_robot_y*100-t*(cos(3.14+rangerads[0]+v*0.0174533)) ),1,1) 
                                                    x=0       
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                if s==7:
                                    color=display.setColor(0xFF0000)
                                    print("west")
                                    print("true_distance[0]",true_distance[0])
                                    if get_abs(distance*100+robott_movement_x*100-true_distance[0])<(total_robot_x*100 +100):
                                        distance=(true_distance[0]/100)-robott_movement_x
                                        print("distance",distance)
                                        print("yeahhh")
                                        if len(matrix_sw)==0:
                                            matrix_sw.append(int(get_abs(robot_x+total_robot_x*100-distance*100)))
                                        else:
                                            matrix_sw.append(int(get_abs(robot_x+total_robot_x*100-distance*100)))  
                                    else: 
                                        print("yea")
                                        
                                        if int(get_abs(robot_x+total_robot_x*100-distance*100))-100>max(matrix_sw) or int(get_abs(robot_x+total_robot_x*100-distance*100))-100<min(matrix_sw) :
                                            print(max(matrix_sw))
                                            print(int(get_abs(robot_x+total_robot_x*100-distance*100))-100)
                                           
                                            color=display.setColor(0xFF0000)
                                            #line=display.drawLine(int(sum(matrix_sw)/len(matrix_sw)),temporar_sw,int(sum(matrix_sw)/len(matrix_sw)),int(robot_y+total_robot_y*100))
                                            for c in range(temporar_sw,int(robot_y+total_robot_y*100),1):
                                                Map[int(sum(matrix_sw)/len(matrix_sw))][c]=1
                                            for q in range(temporar_sw+1,int(robot_y+total_robot_y*100 -1),1):
                                                for o in range(int(robot_x+1),int(-1+sum(matrix_sw)/len(matrix_sw)),1):
                                
                                                    #Map[o][q]=0
                            
                                                    color=display.setColor(0x0000FF)
                                                    #rect=display.drawRectangle(o,q,1,1)
                                            del matrix_sw
                                            matrix_sw=[int(get_abs(robot_x+total_robot_x*100-distance*100))]
                                            temporar_sw=int(robot_y+total_robot_y*100)
                                            print("dfdfdfdfdfdfdfd")
                                            true_distance[0]=int(distance*100)
                                            
                                    far_west+=1
                                    real_west+=1
                                    if len(edge_west_y)==1  and (getDistance(so[7])<0.9 or (side_e==0  and side_n==0 and side_s==0)) and first_entered_w==0 and int(get_abs(robot_x+total_robot_x*100-distance*100))>50 and int(robot_y+total_robot_y*100)<MAP_SIZE-50:
                                        side_w=1
                                        hide=0
                                        first_entered_e=1
                                        if side_w>0 and hide==0:
                                           
                                            hide=1
                                            variable=1
                                            total_distance=round(total_robot_y+getDistance(so[4])/2,1)
                                            if detected_e==0 or (detected_e==1 and robot_x+total_robot_x*100-distance*100 +20>temp_east_x):
                                                temp_east_x=int(sum(matrix_sw)/len(matrix_sw))
                                                #temp_east_y=int(robot_y+total_robot_y*100)
                                                print(" temp_east_x", temp_east_x)
                                                #print(" temp_east_y", temp_east_y)
                                                detected_e=1
                                    elif len(edge_west_y)>1: 
                                        for b in range(len(edge_west_y)-1):
                                            if int(get_abs(robot_x+total_robot_x*100-distance*100))>50 and int(robot_y+total_robot_y*100)<MAP_SIZE-50 and (int(robot_x+total_robot_x*100-distance*100)<(edge_west_x[b]-6) or int(robot_x+total_robot_x*100-distance*100)>(edge_east_x[b]+6) or int(robot_y+total_robot_y*100)<(edge_west_y[b]-6) or int(robot_y+total_robot_y*100)>(edge_east_y[b]+6)):
                                                unique_ob+=1
                                                continue
                                        if unique_ob==len(edge_west_y)-1 and (getDistance(so[7])<0.9 or (side_e==0  and side_n==0 and side_s==0)) and first_entered_w==0:
                                            side_w=1
                                            first_entered_e=1
                                            hide=0
                                            point_edge=b
                                            if side_w>0 and hide==0:
                                                
                                                hide=1
                                                variable=1
                                                total_distance=round(total_robot_y+getDistance(so[4])/2,1)
                                                
                                                if detected_e==0 or (detected_e==1 and robot_x+total_robot_x*100-distance*100 +20>temp_east_x):
                                                    temp_east_x=int(sum(matrix_sw)/len(matrix_sw))
                                                    #temp_east_y=int(robot_y+total_robot_y*100)
                                                    print(" temp_east_x", temp_east_x)
                                                    #print(" temp_east_y", temp_east_y)
                                                    detected_e=1
                                        unique_ob=0
                                    Map[int(get_abs(robot_x+total_robot_x*100-distance*100))][int(robot_y+total_robot_y*100)]=1
                                    
                                    if robot_x<=MAP_SIZE/2 and robot_y>=MAP_SIZE/2:
                                        far_westsouth=1
                                    else:
                                        far_westnorth=1
                                    
                                    for t in range(int(distance*100)):
                                        for y in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]-y*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]-y*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]-y*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]-y*0.0174533)) )<MAP_SIZE-1 and ((side_w==0 and int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]-y*0.0174533)))<min(barrier_x)) or (side_w==1 and int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]-y*0.0174533)))>max(barrier_x))): 
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]-y*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]-y*0.0174533)) )
                                                #rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]-y*0.0174533))),int(robot_y-t*(cos(rads+rangerads[8]-y*0.0174533)) ),1,1)
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]-y*0.0174533)) )]!=0:
                                                    #Map[int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]-y*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]-y*0.0174533)) )]=1 
                                                   # rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]-y*0.0174533))),int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]-y*0.0174533)) ),1,1)
                                                    x=0
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-y*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                        for v in range(31):
                                            if int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]+v*0.0174533)))>0 and int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]+v*0.0174533)))<MAP_SIZE-1 and int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]+v*0.0174533)) )>0 and int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]+v*0.0174533)) )<MAP_SIZE-1 and ((side_w==0 and int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]+v*0.0174533)))<min(barrier_x)) or (side_w==1 and int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]+v*0.0174533)))>max(barrier_x))): 
                                                color=display.setColor(0xFF0000)
                                                ii=int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]+v*0.0174533)))
                                                jj=int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]+v*0.0174533)) )
                                                #rect=display.drawRectangle(int(robot_x+total_robot_x+total_robot_x*100+t*(sin(rads+rangerads[8]+v*0.0174533))),int(robot_y-t*(cos(rads+rangerads[8]+v*0.0174533)) ),1,1)
                                                if Map[int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]+v*0.0174533)) )]!=0:
                                                 #   Map[int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]+v*0.0174533)))][int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]+v*0.0174533)) )]=1 
                                                 #   rect=display.drawRectangle(int(robot_x+total_robot_x*100+t*(sin(-3.14+rangerads[8]+v*0.0174533))),int(robot_y+total_robot_y*100-t*(cos(-3.14+rangerads[8]+v*0.0174533)) ),1,1)
                                                    x=0
                                                if t+10<int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1 :
                                                    meas_prob=((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Empty[ii][jj]=(meas_prob*Prior_Map_Empty[ii][jj])/( meas_prob*Prior_Map_Empty[ii][jj] + (1-meas_prob)*(Prior_Map_Occ[ii][jj]))
                                                    Post_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    
                                                    Prior_Map_Empty[ii][jj]=Post_Map_Empty[ii][jj]
                                                    Prior_Map_Occ[ii][jj]=1-Post_Map_Empty[ii][jj]
                                                    if Post_Map_Empty[ii][jj]>0.85:
                                                        color=display.setColor(0x0000FF)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Empty[ii][jj]>0.65:
                                                        color=display.setColor(0x00F0F0)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                if t+10>int(distance*100) and Prior_Map_Empty[ii][jj]!=0 and Prior_Map_Empty[ii][jj]!=1:
                                                    meas_prob=0.98*((5-t/100)/5 + (31-v*0.0174533)/31)/2
                                                    Post_Map_Occ[ii][jj]=(meas_prob*Prior_Map_Occ[ii][jj])/( meas_prob*Prior_Map_Occ[ii][jj] + (1-meas_prob)*(Prior_Map_Empty[ii][jj]))
                                                    Post_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    
                                                    Prior_Map_Occ[ii][jj]=Post_Map_Occ[ii][jj]
                                                    Prior_Map_Empty[ii][jj]=1-Post_Map_Occ[ii][jj]
                                                    if Post_Map_Occ[ii][jj]>0.85:
                                                        color=display.setColor(0xFF0000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
                                                    elif Post_Map_Occ[ii][jj]>0.65:
                                                        color=display.setColor(0xFF7000)
                                                        rect=display.drawRectangle(ii,jj,1,1)
       
                    ####INITIALIAZATIONS ARE MADE TO START OVER##
                    
                    
                    
        else:            
             leftMotor.setVelocity(0)
             rightMotor.setVelocity(0)
             
             closed_sensors=0
             total_x=0
             total_y=0
             mapa=0
             del all_nodes
             del obstacles_xy
             del next_node
             all_nodes=[]
             obstacles_xy=[]
             next_node=[]
             choice=[1,2,3,4]
             #print(all_nodes)
             print("telos pame apo thn arxh")
             i=5
             wait=0
             first_time=0
             print(sum_total_x)
             print(sum_total_y)
             #print(visited_nodes)
             print(robot_x)
             print(robot_y)
             boreia=0
             noteia=0
             anatolika=0
             dytika=0
             north=0
             east=0
             west=0
             southeast=0
             northwest=0
             southwest=0
             northeast=0
             dialegw=0
             current_node=visited_nodes[-1]
             print(current_node)
             shortest_distance=2.5
             
             southeast_count=0
             southwest_count=0
             northeast_count=0
             northwest_count=0
             del barrier_x
             del barrier_y
             barrier_x=[]
             barrier_y=[]
             del north_frontier
             del south_frontier
             del east_frontier
             del west_frontier
             north_frontier=[]
             south_frontier=[]
             west_frontier=[]
             east_frontier=[]
             del true_distance
             del modified_distance
             
             true_distance=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
             modified_distance=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
             sign_barriers=0
             m=0
             for d in range(MAP_SIZE):
                 for n in range(MAP_SIZE):
                     if Map[d][n]==0 or Map[d][n]==1:
                         covered_cells+=1
             print("POSOSTO")
             print(100*covered_cells/(MAP_SIZE*MAP_SIZE))
             synthiki=100*covered_cells/(MAP_SIZE*MAP_SIZE)
             if synthiki>99.0:
                 sys.exit()
             covered_cells=0    
             total_distance=2.0
             flag=0
             variable=0
             
